{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"themes/hexo-theme-matery/source/favicon.png","path":"favicon.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","path":"css/gitment.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/matery.css","path":"css/matery.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my.css","path":"css/my.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/matery.js","path":"js/matery.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","path":"medias/comment_bg.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","path":"medias/icp.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","path":"medias/logo.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","path":"libs/background/canvas-nest.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","path":"libs/background/ribbon-refresh.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","path":"libs/background/ribbon-dynamic.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","path":"libs/background/ribbon.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","path":"libs/codeBlock/codeBlockFuction.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","path":"libs/instantpage/instantpage.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","path":"medias/cover.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery.min.js","path":"libs/jquery/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/avatar.png","path":"medias/avatar.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.jpg","path":"medias/reward/wechat.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","path":"libs/awesome/webfonts/fa-regular-400.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","path":"libs/awesome/webfonts/fa-regular-400.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","path":"libs/awesome/webfonts/fa-regular-400.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","path":"libs/awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","path":"libs/lightGallery/fonts/lg.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","path":"libs/awesome/webfonts/fa-brands-400.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","path":"libs/awesome/webfonts/fa-solid-900.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","path":"libs/awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","path":"libs/awesome/css/all.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","path":"libs/awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","path":"libs/awesome/webfonts/fa-brands-400.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","path":"libs/awesome/webfonts/fa-brands-400.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","path":"libs/awesome/webfonts/fa-regular-400.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","path":"libs/awesome/webfonts/fa-solid-900.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","path":"libs/awesome/webfonts/fa-solid-900.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","path":"libs/awesome/webfonts/fa-brands-400.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","path":"libs/awesome/webfonts/fa-solid-900.svg","modified":1,"renderable":1},{"_id":"source/assets/计算机组成.png","path":"assets/计算机组成.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1585290536393},{"_id":"themes/hexo-theme-matery/.gitignore","hash":"727607929a51db7ea10968f547c26041eee9cfff","modified":1576073008000},{"_id":"themes/hexo-theme-matery/LICENSE","hash":"7df059597099bb7dcf25d2a9aedfaf4465f72d8d","modified":1576073008000},{"_id":"themes/hexo-theme-matery/README.md","hash":"1c9c512aeafc29afef0a2ffab2aa53ea48b6bc72","modified":1576073008000},{"_id":"themes/hexo-theme-matery/README_CN.md","hash":"e7565b179024ef8043d34c7b8468dc5f16ba366c","modified":1576073008000},{"_id":"themes/hexo-theme-matery/_config.yml","hash":"5de59b8baf85ed221d1b0e9c320c01d63238bf72","modified":1585293502326},{"_id":"source/_posts/Redux之redux-thunk异步机制分析.md","hash":"ea15f7fb4452fad1881229ae71aa525f2e1c054c","modified":1585281199244},{"_id":"source/_posts/计算机组成原理.md","hash":"783ada265eb09d20cac905c10c5ed690acf8ee1c","modified":1585281199188},{"_id":"source/about/index.md","hash":"27716ad12695774908760b4b4efa667654c1f754","modified":1585281118963},{"_id":"source/categories/index.md","hash":"57974cb8107db54818077da09cd4851bfdac9716","modified":1585281199308},{"_id":"source/tags/index.md","hash":"6c223043ba32b7c76c33eafceeff9ed879520bfb","modified":1585281199377},{"_id":"themes/hexo-theme-matery/languages/default.yml","hash":"54ccc01b097c5bf6820f0edfcece1a87b78ab32d","modified":1576073008000},{"_id":"themes/hexo-theme-matery/languages/zh-CN.yml","hash":"a957b05f70265a86a87d922e18488571809d2472","modified":1576073008000},{"_id":"themes/hexo-theme-matery/layout/about.ejs","hash":"ee639d0310867976b3e5fb9f92c215a17a433703","modified":1576073008000},{"_id":"themes/hexo-theme-matery/layout/archive.ejs","hash":"7fe7b9028b0da9c84715c3583b6b4172c2342ac8","modified":1576073008000},{"_id":"themes/hexo-theme-matery/layout/categories.ejs","hash":"8e54665cc25d7c333da7d9f312987190be6215da","modified":1576073008000},{"_id":"themes/hexo-theme-matery/layout/category.ejs","hash":"720d02e5fc37d154b60590bb7f64a2a4651c02db","modified":1576073008000},{"_id":"themes/hexo-theme-matery/layout/contact.ejs","hash":"c3396cc5b1cbb102f500554f76946f5b45ee6d54","modified":1576073008000},{"_id":"themes/hexo-theme-matery/layout/friends.ejs","hash":"4cb216b2a650ad5d2942047a65d0883a188c2abb","modified":1576073008000},{"_id":"themes/hexo-theme-matery/layout/index.ejs","hash":"92f053ac3e335129269036f862521326f10e80d8","modified":1576073008000},{"_id":"themes/hexo-theme-matery/layout/post.ejs","hash":"f9662a96d0f497a3b2731472b8ad871c7cbdf13a","modified":1576073008000},{"_id":"themes/hexo-theme-matery/layout/layout.ejs","hash":"ae8103ff07796e3bce5a6707a069c939c4f60d5e","modified":1576073008000},{"_id":"themes/hexo-theme-matery/layout/tag.ejs","hash":"0c0194cf006fab2dccf4f788075e51cd06637df4","modified":1576073008000},{"_id":"themes/hexo-theme-matery/layout/tags.ejs","hash":"cf9517aa6a0111355121f44615d6923e312283c7","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/favicon.png","hash":"20674c497b75fc889194b47fd18ecea12303d8ec","modified":1576073008000},{"_id":"themes/hexo-theme-matery/layout/_widget/category-cloud.ejs","hash":"424ef5db791264a79c1f3338e7c43a2f445cb2ab","modified":1576073008000},{"_id":"themes/hexo-theme-matery/layout/_widget/category-radar.ejs","hash":"f5561dd7d53d68897a33090bf677719213459b19","modified":1576073008000},{"_id":"themes/hexo-theme-matery/layout/_widget/dream.ejs","hash":"ba83115ce66f4328601e567aa30f50d1410b9bfa","modified":1576073008000},{"_id":"themes/hexo-theme-matery/layout/_widget/music.ejs","hash":"1b7e97c73a6c466a521a277691e19b5c057f0546","modified":1576073008000},{"_id":"themes/hexo-theme-matery/layout/_widget/my-gallery.ejs","hash":"de2e0abc085b721318f35c0b5d4891230be36529","modified":1576073008000},{"_id":"themes/hexo-theme-matery/layout/_widget/my-projects.ejs","hash":"dbd8df5146bd6e873535e24f09dd7cf04e17a4e4","modified":1576073008000},{"_id":"themes/hexo-theme-matery/layout/_widget/my-skills.ejs","hash":"89a0092df72d23093128f2fbbdc8ca7f83ebcfd9","modified":1576073008000},{"_id":"themes/hexo-theme-matery/layout/_widget/post-calendar.ejs","hash":"06c5196b3115b2a30cc6001529b08f21b54ce31f","modified":1576073008000},{"_id":"themes/hexo-theme-matery/layout/_widget/post-charts.ejs","hash":"a3666971c96169aac38708675dbd2df2b44a4cdd","modified":1576073008000},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-cloud.ejs","hash":"fc42b72cddc231f7485cdc1fd6852b66be6add26","modified":1576073008000},{"_id":"themes/hexo-theme-matery/layout/_widget/recommend.ejs","hash":"a40f466dc96cedfcde66b89acdc0a2fa8a8dfefe","modified":1576073008000},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-wordcloud.ejs","hash":"e3f245c42d8a7c5810f689bd9a4ac48e77217260","modified":1576073008000},{"_id":"themes/hexo-theme-matery/layout/_widget/video.ejs","hash":"4162453e7e125013c8b1ad18ffc691a6ba124b88","modified":1576073008000},{"_id":"themes/hexo-theme-matery/layout/_partial/back-top.ejs","hash":"47ee36a042bb6d52bbe1d0f329637e8ffcf1d0aa","modified":1576073008000},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-push.ejs","hash":"2cebcc5ea3614d7f76ec36670e68050cbe611202","modified":1576073008000},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-analytics.ejs","hash":"3bbcdb474ca1dcad514bdc4b7763e17c55df04fd","modified":1576073008000},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover-content.ejs","hash":"b5a1371f8b3d2a90ad575f1b6d25230e97ec0e7c","modified":1576073008000},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover.ejs","hash":"02191109712f61c0e487b8f0b8466597181a9004","modified":1576073008000},{"_id":"themes/hexo-theme-matery/layout/_partial/disqus.ejs","hash":"a0f53d1a9b579d52e52ccad8c6e330bf3b89547e","modified":1576073008000},{"_id":"themes/hexo-theme-matery/layout/_partial/gitalk.ejs","hash":"fe7c785f0536ad828d957a9565ca5c53a0cead43","modified":1576073008000},{"_id":"themes/hexo-theme-matery/layout/_partial/footer.ejs","hash":"f358674421ef21f638b3e3633a447876fe2a07a5","modified":1576073008000},{"_id":"themes/hexo-theme-matery/layout/_partial/github-link.ejs","hash":"3aeb581bd78ab8e15b858e4c44c03bcf92f20b9e","modified":1576073008000},{"_id":"themes/hexo-theme-matery/layout/_partial/google-analytics.ejs","hash":"5f4992205617da5f8cc5863c62b5ec46e414e2fb","modified":1576073008000},{"_id":"themes/hexo-theme-matery/layout/_partial/gitment.ejs","hash":"4f3a8f243ea07644fc599bdb44cc6be1a78fb0a1","modified":1576073008000},{"_id":"themes/hexo-theme-matery/layout/_partial/head.ejs","hash":"61e03d8106ee4615f5f2ebc6ef7e648f5a1f9c65","modified":1576073008000},{"_id":"themes/hexo-theme-matery/layout/_partial/header.ejs","hash":"f555d813f568a2dbf6f572559020c44d13975449","modified":1576073008000},{"_id":"themes/hexo-theme-matery/layout/_partial/index-cover.ejs","hash":"489e629d460ea8c732cd2c1b38d7871af84cac89","modified":1576073008000},{"_id":"themes/hexo-theme-matery/layout/_partial/livere.ejs","hash":"9c3401b42ea7f26410a5593bae93ada7e57b43be","modified":1576073008000},{"_id":"themes/hexo-theme-matery/layout/_partial/mobile-nav.ejs","hash":"153b80047ac06a8d06a97002a98d38111d92b494","modified":1576073008000},{"_id":"themes/hexo-theme-matery/layout/_partial/navigation.ejs","hash":"5ff6fdfe973619120a9eda4505bbff4545e39ff0","modified":1576073008000},{"_id":"themes/hexo-theme-matery/layout/_partial/paging.ejs","hash":"e2df12cf92a82b1a7a7add2eac1db1d954bc5511","modified":1576073008000},{"_id":"themes/hexo-theme-matery/layout/_partial/post-cover.ejs","hash":"68738493f40e22ff82891e3aecaa2746c8470cd0","modified":1576073008000},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail-toc.ejs","hash":"78a9ea7cb06f7eb7a39a854ca25864e5dc574800","modified":1576073008000},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail.ejs","hash":"2a000638814aafe4d812f09ce8f1b10bca314d8d","modified":1576073008000},{"_id":"themes/hexo-theme-matery/layout/_partial/post-statis.ejs","hash":"04889f9031743c6b081d02fa4027b0dbfcc45ecf","modified":1576073008000},{"_id":"themes/hexo-theme-matery/layout/_partial/prev-next.ejs","hash":"35b6b4a0200c10be6ae9d9558367718290476f84","modified":1576073008000},{"_id":"themes/hexo-theme-matery/layout/_partial/reprint-statement.ejs","hash":"01f5eef82bbcb9d432631dbb78dd51d4d4b3b8b5","modified":1576073008000},{"_id":"themes/hexo-theme-matery/layout/_partial/reward.ejs","hash":"8a1176c4f33a0cd00db05561ce7b8ac6bceb322c","modified":1576073008000},{"_id":"themes/hexo-theme-matery/layout/_partial/search.ejs","hash":"84e1073b3bef478c352c271f8169d667db42f5eb","modified":1576073008000},{"_id":"themes/hexo-theme-matery/layout/_partial/share.ejs","hash":"5bf9dabd3ab2e298ead92256f5a732f27939ec66","modified":1576073008000},{"_id":"themes/hexo-theme-matery/layout/_partial/social-link.ejs","hash":"6f871bd3a70f720e4e451f1f4f625cbc6d8994a4","modified":1576073008000},{"_id":"themes/hexo-theme-matery/layout/_partial/valine.ejs","hash":"60bcc9b0a0983d631c0fb69f6d1672d895df5107","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","hash":"eeda46a83d0db1cc239a9cd27d544faf663f9883","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/css/matery.css","hash":"be62bf75d47b464fdbc14d10dba903e5182b3e3e","modified":1585290998805},{"_id":"themes/hexo-theme-matery/source/css/my.css","hash":"10577fbc30f241b126d1b51b1f56136ecba86b19","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/js/matery.js","hash":"07ed4f743a497d7850b3fdda2a5d9beccc5a8fb5","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/js/search.js","hash":"499e11786efbb04815b54a1de317cc8606a37555","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","hash":"5d1a1f3051c8a4ad70afa0a5488dfa7f0bb27bd5","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","hash":"4050259723bd418648ec40028a8020364e57a6a3","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","hash":"3aac1db83b0135c521187254ff302d125cc30706","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","hash":"66706dfde7d910182c2f1dbadd0e9e917630b8dd","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","hash":"9cac6b80b0cc8959fc8aabfbd1adcab79ebebfc9","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","hash":"5cf9fc64d5d74ab6ba69bb8bff580fdc22ba32d0","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","hash":"16f1d89cdba4dce935ac0f12599e0fcfda543a93","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","hash":"d70b088850c3565e5b5bb9eb8fe4abe688c964cf","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","hash":"bf5b59d193e5ca089a7fff034c222bfa2c4dc41f","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","hash":"ed5ac9f616d3b99af5188a10b1761884c37e93e5","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","hash":"c3c1f36a1b1886037db604f151f335cd4599e970","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","hash":"a0246a4a560438938489cdd154e35f172b3f31b0","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","hash":"5a46ca4ab4c4ab2101a2af77a31a8878bccc483c","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/medias/avatar.png","hash":"22e2f64e8606bfcff9f542fd6168710cfaefd3e4","modified":1585293417283},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","hash":"1f2ec55fe7825475fde2601573bb622f0bf2acba","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","hash":"2066cdda98ad0035071cd4aa7bd696eb078c0b6d","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","hash":"d16e28bd23ea3a63643826dde5eea6b7a9bdda5d","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","hash":"9ed45f95b83626e3d91d6c405eb8bfe6fcb9736a","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","hash":"838e704942de076c60894d14e5f280e2724b6f68","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","hash":"8aeb816faca2d5eaea4cce9e881d6ff87b8c7cf1","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","hash":"f168ca5b046d10a878a7b0bcfab540e2c4428887","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","hash":"ae23fdfaa59bc57b7ed49e90c5d59e4b68e1eea5","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","hash":"57bc7c804b78b5cceb4eb1f9e51b734b75151b71","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","hash":"8271c4a327632b566ea62f546c083d08a0528e72","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","hash":"5e879652e032f02961a331b598a50b60ebe80a39","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","hash":"4eea5bdb5724ef1ed65790e481eda0d2fb176bf0","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","hash":"c63ff64bdd5f6c82da8804c7248fc519d23eaf0b","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","hash":"815c84778b721e3606c2bd7c099c7de7c53251ba","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","hash":"9892674eafcb6cd3ccc6f2ac7d0e7063800d31ee","modified":1585293457326},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.jpg","hash":"ca687a039c14965e1511c72f717d16aa7bc6ebbc","modified":1585293457338},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","hash":"734f56442e62fe55f677e8ccae7f175445667767","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","hash":"9a732790adc004b22022cc60fd5f77ec4c8e3e5a","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","hash":"fbfdbe06aebf7d0c00da175a4810cf888d128f11","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","hash":"1142b47de219dddfba2e712cd3189dec0c8b7bee","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","hash":"39150b45ec5fc03155b7ebeaa44f1829281788e2","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","hash":"80ae4aa0dba3634dd9bf59586d541d2dd8d8191c","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","hash":"f0a1b849868a6bf351ff98dc3924a4e7254eb88b","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","hash":"c3d5ab183b39a7140941b8375e29498f9d24f343","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","hash":"8d3c8391ff161eec70f66d69e5545a9468cc52ef","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","hash":"4a08deec1dd5b4f1490e8fc23adfb75a0f88b0c4","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","hash":"62e9586a8cec91a160f147c424a3d1d1aea360f9","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","hash":"047be4239dd7e0be83243ee6b49a392a61f16b9a","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","hash":"ecc41e32ad2696877a1656749841f3b5543bbe3d","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","hash":"56850c3139cbd72a0eff0c35d8fac32c9c66dd6a","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","hash":"229afff648cbd17de80176e0feb969c7f514be7e","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","hash":"25612c76ded31c497effe46454d8d2bb36fb99d6","modified":1576073008000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","hash":"2c026711e4dd6b6d805cc19c0e4a572e6239a05b","modified":1576073008000},{"_id":"source/assets/计算机组成.png","hash":"bb03748bc2e9745ac255469d36ac92a4882e1748","modified":1585281198903},{"_id":"public/search.xml","hash":"22240031de90bf4bfbc9fc950490b425fd0016d1","modified":1585296560277},{"_id":"public/categories/index.html","hash":"c4103d13cd0a46da69400b475cf6b2a56daea05f","modified":1585296560277},{"_id":"public/tags/index.html","hash":"97a6de331ac6d004d7f44e1a84c86f6485485898","modified":1585296560277},{"_id":"public/about/index.html","hash":"b42a2990259d494be122abbc84075f432d738529","modified":1585296560277},{"_id":"public/2019/06/15/ji-suan-ji-zu-cheng-yuan-li/index.html","hash":"6af41314b45da39382481b314233f52dd5633b01","modified":1585296560277},{"_id":"public/2019/05/15/redux-zhi-redux-thunk-yi-bu-ji-zhi-fen-xi/index.html","hash":"b0b750c44b7a09e9b29e90991c2d56fc780d8c0a","modified":1585296560277},{"_id":"public/categories/前端/index.html","hash":"2d24bae70f0b99aec31a8537fef6ab170e88d01a","modified":1585296560277},{"_id":"public/categories/CS基础/index.html","hash":"777153a32a480ee801f2411157f8e691591458d4","modified":1585296560277},{"_id":"public/index.html","hash":"9b5ce0f535e083a7ac419628c03454bd588d6926","modified":1585296560277},{"_id":"public/tags/react/index.html","hash":"7f6099784414f19a56d59c3f9c8ba21eeafd362e","modified":1585296560277},{"_id":"public/tags/redux/index.html","hash":"bd6c15592d74d587805a4bda9036eb9f2b0b856f","modified":1585296560277},{"_id":"public/tags/redux-thunk/index.html","hash":"2599e31bbc429641239f3ba963bb68e6163d771d","modified":1585296560277},{"_id":"public/tags/计算机原理/index.html","hash":"14766833a02792cb501516970b7e8e2bfa3618a7","modified":1585296560277},{"_id":"public/archives/index.html","hash":"3ad65033664673bc50dd562b4787aa43ae3da351","modified":1585296560277},{"_id":"public/archives/2019/index.html","hash":"f093c6d385ce29da5e88f50fcdc81c11a567b46b","modified":1585296560277},{"_id":"public/archives/2019/05/index.html","hash":"3057151031c85b8c2459bf98929ad41cd0bf2e18","modified":1585296560277},{"_id":"public/archives/2019/06/index.html","hash":"6716dfb0206428f3e9b263f330aec773b7e9b523","modified":1585296560277},{"_id":"public/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1585296560277},{"_id":"public/medias/icp.png","hash":"5d1a1f3051c8a4ad70afa0a5488dfa7f0bb27bd5","modified":1585296560277},{"_id":"public/medias/logo.png","hash":"4050259723bd418648ec40028a8020364e57a6a3","modified":1585296560277},{"_id":"public/medias/featureimages/13.jpg","hash":"66706dfde7d910182c2f1dbadd0e9e917630b8dd","modified":1585296560277},{"_id":"public/medias/featureimages/16.jpg","hash":"9cac6b80b0cc8959fc8aabfbd1adcab79ebebfc9","modified":1585296560277},{"_id":"public/medias/featureimages/15.jpg","hash":"5cf9fc64d5d74ab6ba69bb8bff580fdc22ba32d0","modified":1585296560277},{"_id":"public/medias/featureimages/2.jpg","hash":"16f1d89cdba4dce935ac0f12599e0fcfda543a93","modified":1585296560277},{"_id":"public/medias/featureimages/21.jpg","hash":"d70b088850c3565e5b5bb9eb8fe4abe688c964cf","modified":1585296560277},{"_id":"public/medias/featureimages/22.jpg","hash":"bf5b59d193e5ca089a7fff034c222bfa2c4dc41f","modified":1585296560277},{"_id":"public/medias/featureimages/23.jpg","hash":"ed5ac9f616d3b99af5188a10b1761884c37e93e5","modified":1585296560277},{"_id":"public/medias/featureimages/5.jpg","hash":"c3c1f36a1b1886037db604f151f335cd4599e970","modified":1585296560277},{"_id":"public/medias/featureimages/7.jpg","hash":"a0246a4a560438938489cdd154e35f172b3f31b0","modified":1585296560277},{"_id":"public/medias/featureimages/8.jpg","hash":"5a46ca4ab4c4ab2101a2af77a31a8878bccc483c","modified":1585296560277},{"_id":"public/medias/reward/alipay.jpg","hash":"9892674eafcb6cd3ccc6f2ac7d0e7063800d31ee","modified":1585296560277},{"_id":"public/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1585296560277},{"_id":"public/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1585296560277},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1585296560277},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1585296560277},{"_id":"public/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1585296560277},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"9a732790adc004b22022cc60fd5f77ec4c8e3e5a","modified":1585296560277},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1585296560277},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1585296560277},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1585296560277},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"fbfdbe06aebf7d0c00da175a4810cf888d128f11","modified":1585296560277},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"1142b47de219dddfba2e712cd3189dec0c8b7bee","modified":1585296560277},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"39150b45ec5fc03155b7ebeaa44f1829281788e2","modified":1585296560277},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1585296560277},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"f0a1b849868a6bf351ff98dc3924a4e7254eb88b","modified":1585296560277},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1585296560277},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1585296560277},{"_id":"public/css/prism-tomorrow.css","hash":"3b99487dfc9b4e51e9105a93743b92a761840e34","modified":1585296560277},{"_id":"public/favicon.png","hash":"20674c497b75fc889194b47fd18ecea12303d8ec","modified":1585296560277},{"_id":"public/medias/banner/0.jpg","hash":"1f2ec55fe7825475fde2601573bb622f0bf2acba","modified":1585296560277},{"_id":"public/medias/featureimages/0.jpg","hash":"2066cdda98ad0035071cd4aa7bd696eb078c0b6d","modified":1585296560277},{"_id":"public/medias/featureimages/1.jpg","hash":"d16e28bd23ea3a63643826dde5eea6b7a9bdda5d","modified":1585296560277},{"_id":"public/medias/featureimages/10.jpg","hash":"838e704942de076c60894d14e5f280e2724b6f68","modified":1585296560277},{"_id":"public/medias/featureimages/11.jpg","hash":"9ed45f95b83626e3d91d6c405eb8bfe6fcb9736a","modified":1585296560277},{"_id":"public/medias/featureimages/14.jpg","hash":"8aeb816faca2d5eaea4cce9e881d6ff87b8c7cf1","modified":1585296560277},{"_id":"public/medias/featureimages/17.jpg","hash":"f168ca5b046d10a878a7b0bcfab540e2c4428887","modified":1585296560277},{"_id":"public/medias/featureimages/20.jpg","hash":"8271c4a327632b566ea62f546c083d08a0528e72","modified":1585296560277},{"_id":"public/medias/featureimages/19.jpg","hash":"57bc7c804b78b5cceb4eb1f9e51b734b75151b71","modified":1585296560277},{"_id":"public/medias/featureimages/18.jpg","hash":"ae23fdfaa59bc57b7ed49e90c5d59e4b68e1eea5","modified":1585296560277},{"_id":"public/medias/featureimages/3.jpg","hash":"5e879652e032f02961a331b598a50b60ebe80a39","modified":1585296560277},{"_id":"public/medias/featureimages/4.jpg","hash":"4eea5bdb5724ef1ed65790e481eda0d2fb176bf0","modified":1585296560277},{"_id":"public/medias/featureimages/6.jpg","hash":"c63ff64bdd5f6c82da8804c7248fc519d23eaf0b","modified":1585296560277},{"_id":"public/medias/featureimages/9.jpg","hash":"815c84778b721e3606c2bd7c099c7de7c53251ba","modified":1585296560277},{"_id":"public/medias/reward/wechat.jpg","hash":"ca687a039c14965e1511c72f717d16aa7bc6ebbc","modified":1585296560277},{"_id":"public/medias/banner/2.jpg","hash":"8d3c8391ff161eec70f66d69e5545a9468cc52ef","modified":1585296560277},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1585296560277},{"_id":"public/medias/featureimages/12.jpg","hash":"047be4239dd7e0be83243ee6b49a392a61f16b9a","modified":1585296560277},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1585296560277},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1585296560277},{"_id":"public/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1585296560277},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1585296560277},{"_id":"public/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1585296560277},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1585296560277},{"_id":"public/css/my.css","hash":"10577fbc30f241b126d1b51b1f56136ecba86b19","modified":1585296560277},{"_id":"public/js/matery.js","hash":"07ed4f743a497d7850b3fdda2a5d9beccc5a8fb5","modified":1585296560277},{"_id":"public/css/my-gitalk.css","hash":"eeda46a83d0db1cc239a9cd27d544faf663f9883","modified":1585296560277},{"_id":"public/js/search.js","hash":"499e11786efbb04815b54a1de317cc8606a37555","modified":1585296560277},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1585296560277},{"_id":"public/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1585296560277},{"_id":"public/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1585296560277},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1585296560277},{"_id":"public/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1585296560277},{"_id":"public/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1585296560277},{"_id":"public/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1585296560277},{"_id":"public/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1585296560277},{"_id":"public/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1585296560277},{"_id":"public/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1585296560277},{"_id":"public/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1585296560277},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1585296560277},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1585296560277},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1585296560277},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1585296560277},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1585296560277},{"_id":"public/libs/tocbot/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1585296560277},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1585296560277},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1585296560277},{"_id":"public/css/matery.css","hash":"be62bf75d47b464fdbc14d10dba903e5182b3e3e","modified":1585296560277},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1585296560277},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1585296560277},{"_id":"public/libs/gitalk/gitalk.css","hash":"3aac1db83b0135c521187254ff302d125cc30706","modified":1585296560277},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1585296560277},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1585296560277},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1585296560277},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1585296560277},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1585296560277},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1585296560277},{"_id":"public/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1585296560277},{"_id":"public/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1585296560277},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1585296560277},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1585296560277},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"734f56442e62fe55f677e8ccae7f175445667767","modified":1585296560277},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1585296560277},{"_id":"public/libs/materialize/materialize.min.css","hash":"580459a012f556fba86438953062013a94b201af","modified":1585296560277},{"_id":"public/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1585296560277},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1585296560277},{"_id":"public/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1585296560277},{"_id":"public/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1585296560277},{"_id":"public/libs/awesome/css/all.css","hash":"ecc41e32ad2696877a1656749841f3b5543bbe3d","modified":1585296560277},{"_id":"public/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1585296560277},{"_id":"public/medias/banner/1.jpg","hash":"c3d5ab183b39a7140941b8375e29498f9d24f343","modified":1585296560277},{"_id":"public/medias/banner/3.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1585296560277},{"_id":"public/medias/banner/5.jpg","hash":"4a08deec1dd5b4f1490e8fc23adfb75a0f88b0c4","modified":1585296560277},{"_id":"public/medias/banner/6.jpg","hash":"62e9586a8cec91a160f147c424a3d1d1aea360f9","modified":1585296560277},{"_id":"public/libs/awesome/webfonts/fa-regular-400.svg","hash":"229afff648cbd17de80176e0feb969c7f514be7e","modified":1585296560277},{"_id":"public/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1585296560277},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1585296560277},{"_id":"public/medias/avatar.png","hash":"22e2f64e8606bfcff9f542fd6168710cfaefd3e4","modified":1585296560277},{"_id":"public/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1585296560277},{"_id":"public/medias/banner/4.jpg","hash":"56850c3139cbd72a0eff0c35d8fac32c9c66dd6a","modified":1585296560277},{"_id":"public/libs/awesome/webfonts/fa-solid-900.svg","hash":"2c026711e4dd6b6d805cc19c0e4a572e6239a05b","modified":1585296560277},{"_id":"public/libs/awesome/webfonts/fa-brands-400.svg","hash":"25612c76ded31c497effe46454d8d2bb36fb99d6","modified":1585296560277},{"_id":"public/assets/计算机组成.png","hash":"bb03748bc2e9745ac255469d36ac92a4882e1748","modified":1585296560277}],"Category":[{"name":"前端","_id":"ck89wn30v0004i7rh2qo2d3xq"},{"name":"CS基础","_id":"ck89wn30y0007i7rh6wd9gs19"}],"Data":[],"Page":[{"title":"categories","date":"2018-09-30T09:25:30.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-09-30 17:25:30\ntype: \"categories\"\nlayout: \"categories\"\n---","updated":"2020-03-27T03:53:19.308Z","path":"categories/index.html","comments":1,"_id":"ck89wn30s0001i7rh1o3t9eed","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2018-09-30T10:23:38.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-09-30 18:23:38\ntype: \"tags\"\nlayout: \"tags\"\n---","updated":"2020-03-27T03:53:19.377Z","path":"tags/index.html","comments":1,"_id":"ck89wn30u0003i7rhgidf6jnj","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"about","date":"2018-09-30T09:25:30.000Z","type":"about","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-09-30 17:25:30\ntype: \"about\"\nlayout: \"about\"\n---\n","updated":"2020-03-27T03:51:58.963Z","path":"about/index.html","comments":1,"_id":"ck89wn30x0006i7rh20pafimc","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Redux之redux-thunk异步机制分析","author":"Rongo Li","abbrlink":"dfe6","date":"2019-05-15T02:12:00.000Z","_content":"\n### 前言\n写该文档的目的是为了帮助刚接触react的developer快速了解react中的异步机制，通过对redux-thunk的源码分析能够加深你对action => `others` => reducer => state的理解。阅读此文档前，你需要对redux有一定的了解，可参考：[Redux中文文档](http://cn.redux.js.org/)or[Redux官方文档](https://redux.js.org/introduction/getting-started)\n\n### redux-thunk 是什么？\nredux-thunk是一个提供异步编程能力的中间件，通常改变state的方式：\n```js\naction => reducer => state\n```\n这一系列的改变过程都是同步进行的，而这远远满足不了我们的实际开发需求，例如我们需要做如下的改变：\n```diff\n- action => reducer => state\n+ action => fetch => reducer => state\n```\n在`action`到达`reducer`这个过程中完成网络请求，然后将请求的数据通过`reducer`更新`state`的数据。而`redux-thunk`就是提供这种异步的能力。\n\n### redux-thunk 怎么做到呢？\n要想弄清楚它的来龙去脉，首先要看一下它的源码\n```js\nfunction createThunkMiddleware(extraArgument) {\n  return ({ dispatch, getState }) => next => action => {\n    if (typeof action === 'function') {\n      return action(dispatch, getState, extraArgument);\n    }\n\n    return next(action);\n  };\n}\n\nconst thunk = createThunkMiddleware();\nthunk.withExtraArgument = createThunkMiddleware;\n\nexport default thunk;\n```\n源码看上去非常精简,首先`createThunkMiddleware(extraArgument)`接收一个`extraArgument`参数，提供给developer自己管理额外的数据。该函数返回一个接收`{dispatch,getState}`对象的匿名函数，这里我将会在应用该中间件的地方详细解释这些参数是什么和怎么传递的。再看下一步，该匿名函数又返回一个接收参数为`next`的函数。继续下一步该函数又返回一个接收参数为`action`的函数，该函数内部判断`action`的类型为函数的时候，执行该`action`函数，否则该`action`作为`next`的参数执行`next`函数。\n\n如上就是核心部分的定义过程，该模块导出的thunk是执行`createThunkMiddleware()`后的函数，即返回接收`{ dispatch, getState }`对象的匿名函数，该返回函数对象扩充了一个`withExtraArgument`属性，并将该函数原型赋值给该属性，developer如果想做额外的数据管理可以通过`thunk.withExtraArgument('你的额外数据')`。以上就是redux-thunk的实现过程。\n\n### redux-thunk 如何工作的？\n要弄清楚redux-thunk的工作过程，我们要结合一下它的使用场景分析，如下\n```js\nimport thunkMiddleware from 'redux-thunk';\nimport {createStore,applyMiddleware,compose} from 'redux';\nimport Immutable from 'immutable';\nimport rootReducer from './../Reducer/rootReducer';\n\nconst createStoreWithMiddleware = applyMiddleware(thunkMiddleware)(createStore);\nexport default function store() {\n  const initialState = Immutable.Map();\n  const store = createStoreWithMiddleware(rootReducer, initialState);\n  return store;\n}\n```\n我们看到`applyMiddleware`处使用了`redux-thunk`，那么它内部是如何工作的呢？接下来我们需要看一下redux内部的`applyMiddleware`函数的源码实现：\n```js\nexport default function applyMiddleware(...middlewares) {\n  return createStore => (...args) => {\n    const store = createStore(...args)\n    let dispatch = () => {\n      throw new Error(\n        'Dispatching while constructing your middleware is not allowed. ' +\n          'Other middleware would not be applied to this dispatch.'\n      )\n    }\n\n    const middlewareAPI = {\n      getState: store.getState,\n      dispatch: (...args) => dispatch(...args)\n    }\n    const chain = middlewares.map(middleware => middleware(middlewareAPI))\n    dispatch = compose(...chain)(store.dispatch)\n\n    return {\n      ...store,\n      dispatch\n    }\n  }\n}\n```\n接下来我们分析一下它是如何使用redux-thunk中间件的，首先`applyMiddleware(...middlewares)`接收中间件并返回一个接收`createStore`的函数，这一步在上面使用场景中有调用`applyMiddleware(thunkMiddleware)(createStore)`传进来的`middlewares`就是来自`redux-thunk`的`thunkMiddleware`，而`createStore`即来自`redux`。继续下一步，该函数又返回接收`...args`的函数，该部分的调用是在`createStoreWithMiddleware(rootReducer, initialState);`,该函数内部创建了一个`store`实例，并将`store.getState`和`dispatch`函数保存在`middlewareAPI`对象中，在`middlewares.map(...)`这一步，表示遍历所有的中间件并执行该中间件函数，所以我们的redux-thunk就是其中之一，执行部分如下：\n```js\nreturn ({ dispatch, getState }) => next => action => {\n    if (typeof action === 'function') {\n      return action(dispatch, getState, extraArgument);\n    }\n\n    return next(action);\n  };\n```\n传入的参数`{ dispatch, getState }`就是middlewareAPI对象。接下来你肯定好奇next是什么了，再看上面的`dispatch = compose(...chain)(store.dispatch)`，`compose`函数将所有的中间件聚合后传入`store.dispatch`参数，所以`next`就是`store.dispatch`。最终增强版的`dispatch`即为如下函数：\n```js\ndispatch = (action) => {\n    if (typeof action === 'function') {\n      return action(dispatch, getState, extraArgument);\n    }\n    return next(action);\n  };\n```\n当action为普通的对象类型时：执行`next(action)`，即`store.dispatch`。当为函数类型时：将`dispatch,getState,extraArgument`作为参数传入并执行该函数，回顾一下这些参数的来源。\n```js\nconst middlewareAPI = {\n      getState: store.getState,\n      dispatch: (...args) => dispatch(...args)\n    }\n\nfunction createThunkMiddleware(extraArgument) {\n  return ({ dispatch, getState }) => next => action => {\n    if (typeof action === 'function') {\n      return action(dispatch, getState, extraArgument);\n    }\n\n    return next(action);\n  };\n}\n```\n再看一下函数类型的的`action`使用场景\n```js\nexport function fetchData (params) {\n  return dispatch => {\n    services.fetchComments(params)\n      .then(res => {\n        dispatch({type:'actionType',data:res});\n      });\n  };\n}\n```\n\n### 注意\n需要注意的是`middlewareAPI`中`dispatch: (...args) => dispatch(...args)`后面被修改了，真正下发到`middleware`中的`dispatch`其实是`dispatch = compose(...chain)(store.dispatch)`处理后的，如下。\n```js \ndispatch = (action) => {\n    if (typeof action === 'function') {\n      return action(dispatch, getState, extraArgument);\n    }\n    return next(action);\n  };\n```\n\n### 总结\n原来`redux-thunk`所具有的异步能力是对`store.dispatch`进行了一层包装，将之前仅支持的`Plain Object`拓展成还可以支持`函数类型`的，如果是普通的对象则还使用原来的`store.dispatch`，如果是函数类型则执行该函数，将包装后的`dispatch`下发到该`action`的`内部作用域`。如上就是个人最近针对redux及redux-thunk异步能力的一些理解总结，如有理解不当或书写错误的地方欢迎交流指正。\n","source":"_posts/Redux之redux-thunk异步机制分析.md","raw":"---\ntitle: Redux之redux-thunk异步机制分析\nauthor: Rongo Li\ncategories: 前端\ntags:\n  - react\n  - redux\n  - redux-thunk\nabbrlink: dfe6\ndate: 2019-05-15 10:12:00\n---\n\n### 前言\n写该文档的目的是为了帮助刚接触react的developer快速了解react中的异步机制，通过对redux-thunk的源码分析能够加深你对action => `others` => reducer => state的理解。阅读此文档前，你需要对redux有一定的了解，可参考：[Redux中文文档](http://cn.redux.js.org/)or[Redux官方文档](https://redux.js.org/introduction/getting-started)\n\n### redux-thunk 是什么？\nredux-thunk是一个提供异步编程能力的中间件，通常改变state的方式：\n```js\naction => reducer => state\n```\n这一系列的改变过程都是同步进行的，而这远远满足不了我们的实际开发需求，例如我们需要做如下的改变：\n```diff\n- action => reducer => state\n+ action => fetch => reducer => state\n```\n在`action`到达`reducer`这个过程中完成网络请求，然后将请求的数据通过`reducer`更新`state`的数据。而`redux-thunk`就是提供这种异步的能力。\n\n### redux-thunk 怎么做到呢？\n要想弄清楚它的来龙去脉，首先要看一下它的源码\n```js\nfunction createThunkMiddleware(extraArgument) {\n  return ({ dispatch, getState }) => next => action => {\n    if (typeof action === 'function') {\n      return action(dispatch, getState, extraArgument);\n    }\n\n    return next(action);\n  };\n}\n\nconst thunk = createThunkMiddleware();\nthunk.withExtraArgument = createThunkMiddleware;\n\nexport default thunk;\n```\n源码看上去非常精简,首先`createThunkMiddleware(extraArgument)`接收一个`extraArgument`参数，提供给developer自己管理额外的数据。该函数返回一个接收`{dispatch,getState}`对象的匿名函数，这里我将会在应用该中间件的地方详细解释这些参数是什么和怎么传递的。再看下一步，该匿名函数又返回一个接收参数为`next`的函数。继续下一步该函数又返回一个接收参数为`action`的函数，该函数内部判断`action`的类型为函数的时候，执行该`action`函数，否则该`action`作为`next`的参数执行`next`函数。\n\n如上就是核心部分的定义过程，该模块导出的thunk是执行`createThunkMiddleware()`后的函数，即返回接收`{ dispatch, getState }`对象的匿名函数，该返回函数对象扩充了一个`withExtraArgument`属性，并将该函数原型赋值给该属性，developer如果想做额外的数据管理可以通过`thunk.withExtraArgument('你的额外数据')`。以上就是redux-thunk的实现过程。\n\n### redux-thunk 如何工作的？\n要弄清楚redux-thunk的工作过程，我们要结合一下它的使用场景分析，如下\n```js\nimport thunkMiddleware from 'redux-thunk';\nimport {createStore,applyMiddleware,compose} from 'redux';\nimport Immutable from 'immutable';\nimport rootReducer from './../Reducer/rootReducer';\n\nconst createStoreWithMiddleware = applyMiddleware(thunkMiddleware)(createStore);\nexport default function store() {\n  const initialState = Immutable.Map();\n  const store = createStoreWithMiddleware(rootReducer, initialState);\n  return store;\n}\n```\n我们看到`applyMiddleware`处使用了`redux-thunk`，那么它内部是如何工作的呢？接下来我们需要看一下redux内部的`applyMiddleware`函数的源码实现：\n```js\nexport default function applyMiddleware(...middlewares) {\n  return createStore => (...args) => {\n    const store = createStore(...args)\n    let dispatch = () => {\n      throw new Error(\n        'Dispatching while constructing your middleware is not allowed. ' +\n          'Other middleware would not be applied to this dispatch.'\n      )\n    }\n\n    const middlewareAPI = {\n      getState: store.getState,\n      dispatch: (...args) => dispatch(...args)\n    }\n    const chain = middlewares.map(middleware => middleware(middlewareAPI))\n    dispatch = compose(...chain)(store.dispatch)\n\n    return {\n      ...store,\n      dispatch\n    }\n  }\n}\n```\n接下来我们分析一下它是如何使用redux-thunk中间件的，首先`applyMiddleware(...middlewares)`接收中间件并返回一个接收`createStore`的函数，这一步在上面使用场景中有调用`applyMiddleware(thunkMiddleware)(createStore)`传进来的`middlewares`就是来自`redux-thunk`的`thunkMiddleware`，而`createStore`即来自`redux`。继续下一步，该函数又返回接收`...args`的函数，该部分的调用是在`createStoreWithMiddleware(rootReducer, initialState);`,该函数内部创建了一个`store`实例，并将`store.getState`和`dispatch`函数保存在`middlewareAPI`对象中，在`middlewares.map(...)`这一步，表示遍历所有的中间件并执行该中间件函数，所以我们的redux-thunk就是其中之一，执行部分如下：\n```js\nreturn ({ dispatch, getState }) => next => action => {\n    if (typeof action === 'function') {\n      return action(dispatch, getState, extraArgument);\n    }\n\n    return next(action);\n  };\n```\n传入的参数`{ dispatch, getState }`就是middlewareAPI对象。接下来你肯定好奇next是什么了，再看上面的`dispatch = compose(...chain)(store.dispatch)`，`compose`函数将所有的中间件聚合后传入`store.dispatch`参数，所以`next`就是`store.dispatch`。最终增强版的`dispatch`即为如下函数：\n```js\ndispatch = (action) => {\n    if (typeof action === 'function') {\n      return action(dispatch, getState, extraArgument);\n    }\n    return next(action);\n  };\n```\n当action为普通的对象类型时：执行`next(action)`，即`store.dispatch`。当为函数类型时：将`dispatch,getState,extraArgument`作为参数传入并执行该函数，回顾一下这些参数的来源。\n```js\nconst middlewareAPI = {\n      getState: store.getState,\n      dispatch: (...args) => dispatch(...args)\n    }\n\nfunction createThunkMiddleware(extraArgument) {\n  return ({ dispatch, getState }) => next => action => {\n    if (typeof action === 'function') {\n      return action(dispatch, getState, extraArgument);\n    }\n\n    return next(action);\n  };\n}\n```\n再看一下函数类型的的`action`使用场景\n```js\nexport function fetchData (params) {\n  return dispatch => {\n    services.fetchComments(params)\n      .then(res => {\n        dispatch({type:'actionType',data:res});\n      });\n  };\n}\n```\n\n### 注意\n需要注意的是`middlewareAPI`中`dispatch: (...args) => dispatch(...args)`后面被修改了，真正下发到`middleware`中的`dispatch`其实是`dispatch = compose(...chain)(store.dispatch)`处理后的，如下。\n```js \ndispatch = (action) => {\n    if (typeof action === 'function') {\n      return action(dispatch, getState, extraArgument);\n    }\n    return next(action);\n  };\n```\n\n### 总结\n原来`redux-thunk`所具有的异步能力是对`store.dispatch`进行了一层包装，将之前仅支持的`Plain Object`拓展成还可以支持`函数类型`的，如果是普通的对象则还使用原来的`store.dispatch`，如果是函数类型则执行该函数，将包装后的`dispatch`下发到该`action`的`内部作用域`。如上就是个人最近针对redux及redux-thunk异步能力的一些理解总结，如有理解不当或书写错误的地方欢迎交流指正。\n","slug":"Redux之redux-thunk异步机制分析","published":1,"updated":"2020-03-27T03:53:19.244Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck89wn30m0000i7rhdy04hjpn","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>写该文档的目的是为了帮助刚接触react的developer快速了解react中的异步机制，通过对redux-thunk的源码分析能够加深你对action =&gt; <code>others</code> =&gt; reducer =&gt; state的理解。阅读此文档前，你需要对redux有一定的了解，可参考：<a href=\"http://cn.redux.js.org/\" target=\"_blank\" rel=\"noopener\">Redux中文文档</a>or<a href=\"https://redux.js.org/introduction/getting-started\" target=\"_blank\" rel=\"noopener\">Redux官方文档</a></p>\n<h3 id=\"redux-thunk-是什么？\"><a href=\"#redux-thunk-是什么？\" class=\"headerlink\" title=\"redux-thunk 是什么？\"></a>redux-thunk 是什么？</h3><p>redux-thunk是一个提供异步编程能力的中间件，通常改变state的方式：</p>\n<pre class=\" language-js\"><code class=\"language-js\">action <span class=\"token operator\">=</span><span class=\"token operator\">></span> reducer <span class=\"token operator\">=</span><span class=\"token operator\">></span> state</code></pre>\n<p>这一系列的改变过程都是同步进行的，而这远远满足不了我们的实际开发需求，例如我们需要做如下的改变：</p>\n<pre class=\" language-diff\"><code class=\"language-diff\"><span class=\"token deleted\">- action => reducer => state</span>\n<span class=\"token inserted\">+ action => fetch => reducer => state</span></code></pre>\n<p>在<code>action</code>到达<code>reducer</code>这个过程中完成网络请求，然后将请求的数据通过<code>reducer</code>更新<code>state</code>的数据。而<code>redux-thunk</code>就是提供这种异步的能力。</p>\n<h3 id=\"redux-thunk-怎么做到呢？\"><a href=\"#redux-thunk-怎么做到呢？\" class=\"headerlink\" title=\"redux-thunk 怎么做到呢？\"></a>redux-thunk 怎么做到呢？</h3><p>要想弄清楚它的来龙去脉，首先要看一下它的源码</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">createThunkMiddleware</span><span class=\"token punctuation\">(</span>extraArgument<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> dispatch<span class=\"token punctuation\">,</span> getState <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> next <span class=\"token operator\">=</span><span class=\"token operator\">></span> action <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> action <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">action</span><span class=\"token punctuation\">(</span>dispatch<span class=\"token punctuation\">,</span> getState<span class=\"token punctuation\">,</span> extraArgument<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> thunk <span class=\"token operator\">=</span> <span class=\"token function\">createThunkMiddleware</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nthunk<span class=\"token punctuation\">.</span>withExtraArgument <span class=\"token operator\">=</span> createThunkMiddleware<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> thunk<span class=\"token punctuation\">;</span></code></pre>\n<p>源码看上去非常精简,首先<code>createThunkMiddleware(extraArgument)</code>接收一个<code>extraArgument</code>参数，提供给developer自己管理额外的数据。该函数返回一个接收<code>{dispatch,getState}</code>对象的匿名函数，这里我将会在应用该中间件的地方详细解释这些参数是什么和怎么传递的。再看下一步，该匿名函数又返回一个接收参数为<code>next</code>的函数。继续下一步该函数又返回一个接收参数为<code>action</code>的函数，该函数内部判断<code>action</code>的类型为函数的时候，执行该<code>action</code>函数，否则该<code>action</code>作为<code>next</code>的参数执行<code>next</code>函数。</p>\n<p>如上就是核心部分的定义过程，该模块导出的thunk是执行<code>createThunkMiddleware()</code>后的函数，即返回接收<code>{ dispatch, getState }</code>对象的匿名函数，该返回函数对象扩充了一个<code>withExtraArgument</code>属性，并将该函数原型赋值给该属性，developer如果想做额外的数据管理可以通过<code>thunk.withExtraArgument(&#39;你的额外数据&#39;)</code>。以上就是redux-thunk的实现过程。</p>\n<h3 id=\"redux-thunk-如何工作的？\"><a href=\"#redux-thunk-如何工作的？\" class=\"headerlink\" title=\"redux-thunk 如何工作的？\"></a>redux-thunk 如何工作的？</h3><p>要弄清楚redux-thunk的工作过程，我们要结合一下它的使用场景分析，如下</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> thunkMiddleware <span class=\"token keyword\">from</span> <span class=\"token string\">'redux-thunk'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>createStore<span class=\"token punctuation\">,</span>applyMiddleware<span class=\"token punctuation\">,</span>compose<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Immutable <span class=\"token keyword\">from</span> <span class=\"token string\">'immutable'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> rootReducer <span class=\"token keyword\">from</span> <span class=\"token string\">'./../Reducer/rootReducer'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> createStoreWithMiddleware <span class=\"token operator\">=</span> <span class=\"token function\">applyMiddleware</span><span class=\"token punctuation\">(</span>thunkMiddleware<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>createStore<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">store</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> initialState <span class=\"token operator\">=</span> Immutable<span class=\"token punctuation\">.</span><span class=\"token function\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStoreWithMiddleware</span><span class=\"token punctuation\">(</span>rootReducer<span class=\"token punctuation\">,</span> initialState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> store<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>我们看到<code>applyMiddleware</code>处使用了<code>redux-thunk</code>，那么它内部是如何工作的呢？接下来我们需要看一下redux内部的<code>applyMiddleware</code>函数的源码实现：</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">applyMiddleware</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>middlewares<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> createStore <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> dispatch <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">'Dispatching while constructing your middleware is not allowed. '</span> <span class=\"token operator\">+</span>\n          <span class=\"token string\">'Other middleware would not be applied to this dispatch.'</span>\n      <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">const</span> middlewareAPI <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      getState<span class=\"token punctuation\">:</span> store<span class=\"token punctuation\">.</span>getState<span class=\"token punctuation\">,</span>\n      dispatch<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">const</span> chain <span class=\"token operator\">=</span> middlewares<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>middleware <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token function\">middleware</span><span class=\"token punctuation\">(</span>middlewareAPI<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    dispatch <span class=\"token operator\">=</span> <span class=\"token function\">compose</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>chain<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">.</span>dispatch<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">...</span>store<span class=\"token punctuation\">,</span>\n      dispatch\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>接下来我们分析一下它是如何使用redux-thunk中间件的，首先<code>applyMiddleware(...middlewares)</code>接收中间件并返回一个接收<code>createStore</code>的函数，这一步在上面使用场景中有调用<code>applyMiddleware(thunkMiddleware)(createStore)</code>传进来的<code>middlewares</code>就是来自<code>redux-thunk</code>的<code>thunkMiddleware</code>，而<code>createStore</code>即来自<code>redux</code>。继续下一步，该函数又返回接收<code>...args</code>的函数，该部分的调用是在<code>createStoreWithMiddleware(rootReducer, initialState);</code>,该函数内部创建了一个<code>store</code>实例，并将<code>store.getState</code>和<code>dispatch</code>函数保存在<code>middlewareAPI</code>对象中，在<code>middlewares.map(...)</code>这一步，表示遍历所有的中间件并执行该中间件函数，所以我们的redux-thunk就是其中之一，执行部分如下：</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> dispatch<span class=\"token punctuation\">,</span> getState <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> next <span class=\"token operator\">=</span><span class=\"token operator\">></span> action <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> action <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">action</span><span class=\"token punctuation\">(</span>dispatch<span class=\"token punctuation\">,</span> getState<span class=\"token punctuation\">,</span> extraArgument<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>传入的参数<code>{ dispatch, getState }</code>就是middlewareAPI对象。接下来你肯定好奇next是什么了，再看上面的<code>dispatch = compose(...chain)(store.dispatch)</code>，<code>compose</code>函数将所有的中间件聚合后传入<code>store.dispatch</code>参数，所以<code>next</code>就是<code>store.dispatch</code>。最终增强版的<code>dispatch</code>即为如下函数：</p>\n<pre class=\" language-js\"><code class=\"language-js\">dispatch <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> action <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">action</span><span class=\"token punctuation\">(</span>dispatch<span class=\"token punctuation\">,</span> getState<span class=\"token punctuation\">,</span> extraArgument<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>当action为普通的对象类型时：执行<code>next(action)</code>，即<code>store.dispatch</code>。当为函数类型时：将<code>dispatch,getState,extraArgument</code>作为参数传入并执行该函数，回顾一下这些参数的来源。</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> middlewareAPI <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      getState<span class=\"token punctuation\">:</span> store<span class=\"token punctuation\">.</span>getState<span class=\"token punctuation\">,</span>\n      dispatch<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">createThunkMiddleware</span><span class=\"token punctuation\">(</span>extraArgument<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> dispatch<span class=\"token punctuation\">,</span> getState <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> next <span class=\"token operator\">=</span><span class=\"token operator\">></span> action <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> action <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">action</span><span class=\"token punctuation\">(</span>dispatch<span class=\"token punctuation\">,</span> getState<span class=\"token punctuation\">,</span> extraArgument<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>再看一下函数类型的的<code>action</code>使用场景</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> fetchData <span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> dispatch <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    services<span class=\"token punctuation\">.</span><span class=\"token function\">fetchComments</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>res <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>type<span class=\"token punctuation\">:</span><span class=\"token string\">'actionType'</span><span class=\"token punctuation\">,</span>data<span class=\"token punctuation\">:</span>res<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><p>需要注意的是<code>middlewareAPI</code>中<code>dispatch: (...args) =&gt; dispatch(...args)</code>后面被修改了，真正下发到<code>middleware</code>中的<code>dispatch</code>其实是<code>dispatch = compose(...chain)(store.dispatch)</code>处理后的，如下。</p>\n<pre class=\" language-js\"><code class=\"language-js\">dispatch <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> action <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">action</span><span class=\"token punctuation\">(</span>dispatch<span class=\"token punctuation\">,</span> getState<span class=\"token punctuation\">,</span> extraArgument<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>原来<code>redux-thunk</code>所具有的异步能力是对<code>store.dispatch</code>进行了一层包装，将之前仅支持的<code>Plain Object</code>拓展成还可以支持<code>函数类型</code>的，如果是普通的对象则还使用原来的<code>store.dispatch</code>，如果是函数类型则执行该函数，将包装后的<code>dispatch</code>下发到该<code>action</code>的<code>内部作用域</code>。如上就是个人最近针对redux及redux-thunk异步能力的一些理解总结，如有理解不当或书写错误的地方欢迎交流指正。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>写该文档的目的是为了帮助刚接触react的developer快速了解react中的异步机制，通过对redux-thunk的源码分析能够加深你对action =&gt; <code>others</code> =&gt; reducer =&gt; state的理解。阅读此文档前，你需要对redux有一定的了解，可参考：<a href=\"http://cn.redux.js.org/\" target=\"_blank\" rel=\"noopener\">Redux中文文档</a>or<a href=\"https://redux.js.org/introduction/getting-started\" target=\"_blank\" rel=\"noopener\">Redux官方文档</a></p>\n<h3 id=\"redux-thunk-是什么？\"><a href=\"#redux-thunk-是什么？\" class=\"headerlink\" title=\"redux-thunk 是什么？\"></a>redux-thunk 是什么？</h3><p>redux-thunk是一个提供异步编程能力的中间件，通常改变state的方式：</p>\n<pre><code class=\"js\">action =&gt; reducer =&gt; state</code></pre>\n<p>这一系列的改变过程都是同步进行的，而这远远满足不了我们的实际开发需求，例如我们需要做如下的改变：</p>\n<pre><code class=\"diff\">- action =&gt; reducer =&gt; state\n+ action =&gt; fetch =&gt; reducer =&gt; state</code></pre>\n<p>在<code>action</code>到达<code>reducer</code>这个过程中完成网络请求，然后将请求的数据通过<code>reducer</code>更新<code>state</code>的数据。而<code>redux-thunk</code>就是提供这种异步的能力。</p>\n<h3 id=\"redux-thunk-怎么做到呢？\"><a href=\"#redux-thunk-怎么做到呢？\" class=\"headerlink\" title=\"redux-thunk 怎么做到呢？\"></a>redux-thunk 怎么做到呢？</h3><p>要想弄清楚它的来龙去脉，首先要看一下它的源码</p>\n<pre><code class=\"js\">function createThunkMiddleware(extraArgument) {\n  return ({ dispatch, getState }) =&gt; next =&gt; action =&gt; {\n    if (typeof action === &#39;function&#39;) {\n      return action(dispatch, getState, extraArgument);\n    }\n\n    return next(action);\n  };\n}\n\nconst thunk = createThunkMiddleware();\nthunk.withExtraArgument = createThunkMiddleware;\n\nexport default thunk;</code></pre>\n<p>源码看上去非常精简,首先<code>createThunkMiddleware(extraArgument)</code>接收一个<code>extraArgument</code>参数，提供给developer自己管理额外的数据。该函数返回一个接收<code>{dispatch,getState}</code>对象的匿名函数，这里我将会在应用该中间件的地方详细解释这些参数是什么和怎么传递的。再看下一步，该匿名函数又返回一个接收参数为<code>next</code>的函数。继续下一步该函数又返回一个接收参数为<code>action</code>的函数，该函数内部判断<code>action</code>的类型为函数的时候，执行该<code>action</code>函数，否则该<code>action</code>作为<code>next</code>的参数执行<code>next</code>函数。</p>\n<p>如上就是核心部分的定义过程，该模块导出的thunk是执行<code>createThunkMiddleware()</code>后的函数，即返回接收<code>{ dispatch, getState }</code>对象的匿名函数，该返回函数对象扩充了一个<code>withExtraArgument</code>属性，并将该函数原型赋值给该属性，developer如果想做额外的数据管理可以通过<code>thunk.withExtraArgument(&#39;你的额外数据&#39;)</code>。以上就是redux-thunk的实现过程。</p>\n<h3 id=\"redux-thunk-如何工作的？\"><a href=\"#redux-thunk-如何工作的？\" class=\"headerlink\" title=\"redux-thunk 如何工作的？\"></a>redux-thunk 如何工作的？</h3><p>要弄清楚redux-thunk的工作过程，我们要结合一下它的使用场景分析，如下</p>\n<pre><code class=\"js\">import thunkMiddleware from &#39;redux-thunk&#39;;\nimport {createStore,applyMiddleware,compose} from &#39;redux&#39;;\nimport Immutable from &#39;immutable&#39;;\nimport rootReducer from &#39;./../Reducer/rootReducer&#39;;\n\nconst createStoreWithMiddleware = applyMiddleware(thunkMiddleware)(createStore);\nexport default function store() {\n  const initialState = Immutable.Map();\n  const store = createStoreWithMiddleware(rootReducer, initialState);\n  return store;\n}</code></pre>\n<p>我们看到<code>applyMiddleware</code>处使用了<code>redux-thunk</code>，那么它内部是如何工作的呢？接下来我们需要看一下redux内部的<code>applyMiddleware</code>函数的源码实现：</p>\n<pre><code class=\"js\">export default function applyMiddleware(...middlewares) {\n  return createStore =&gt; (...args) =&gt; {\n    const store = createStore(...args)\n    let dispatch = () =&gt; {\n      throw new Error(\n        &#39;Dispatching while constructing your middleware is not allowed. &#39; +\n          &#39;Other middleware would not be applied to this dispatch.&#39;\n      )\n    }\n\n    const middlewareAPI = {\n      getState: store.getState,\n      dispatch: (...args) =&gt; dispatch(...args)\n    }\n    const chain = middlewares.map(middleware =&gt; middleware(middlewareAPI))\n    dispatch = compose(...chain)(store.dispatch)\n\n    return {\n      ...store,\n      dispatch\n    }\n  }\n}</code></pre>\n<p>接下来我们分析一下它是如何使用redux-thunk中间件的，首先<code>applyMiddleware(...middlewares)</code>接收中间件并返回一个接收<code>createStore</code>的函数，这一步在上面使用场景中有调用<code>applyMiddleware(thunkMiddleware)(createStore)</code>传进来的<code>middlewares</code>就是来自<code>redux-thunk</code>的<code>thunkMiddleware</code>，而<code>createStore</code>即来自<code>redux</code>。继续下一步，该函数又返回接收<code>...args</code>的函数，该部分的调用是在<code>createStoreWithMiddleware(rootReducer, initialState);</code>,该函数内部创建了一个<code>store</code>实例，并将<code>store.getState</code>和<code>dispatch</code>函数保存在<code>middlewareAPI</code>对象中，在<code>middlewares.map(...)</code>这一步，表示遍历所有的中间件并执行该中间件函数，所以我们的redux-thunk就是其中之一，执行部分如下：</p>\n<pre><code class=\"js\">return ({ dispatch, getState }) =&gt; next =&gt; action =&gt; {\n    if (typeof action === &#39;function&#39;) {\n      return action(dispatch, getState, extraArgument);\n    }\n\n    return next(action);\n  };</code></pre>\n<p>传入的参数<code>{ dispatch, getState }</code>就是middlewareAPI对象。接下来你肯定好奇next是什么了，再看上面的<code>dispatch = compose(...chain)(store.dispatch)</code>，<code>compose</code>函数将所有的中间件聚合后传入<code>store.dispatch</code>参数，所以<code>next</code>就是<code>store.dispatch</code>。最终增强版的<code>dispatch</code>即为如下函数：</p>\n<pre><code class=\"js\">dispatch = (action) =&gt; {\n    if (typeof action === &#39;function&#39;) {\n      return action(dispatch, getState, extraArgument);\n    }\n    return next(action);\n  };</code></pre>\n<p>当action为普通的对象类型时：执行<code>next(action)</code>，即<code>store.dispatch</code>。当为函数类型时：将<code>dispatch,getState,extraArgument</code>作为参数传入并执行该函数，回顾一下这些参数的来源。</p>\n<pre><code class=\"js\">const middlewareAPI = {\n      getState: store.getState,\n      dispatch: (...args) =&gt; dispatch(...args)\n    }\n\nfunction createThunkMiddleware(extraArgument) {\n  return ({ dispatch, getState }) =&gt; next =&gt; action =&gt; {\n    if (typeof action === &#39;function&#39;) {\n      return action(dispatch, getState, extraArgument);\n    }\n\n    return next(action);\n  };\n}</code></pre>\n<p>再看一下函数类型的的<code>action</code>使用场景</p>\n<pre><code class=\"js\">export function fetchData (params) {\n  return dispatch =&gt; {\n    services.fetchComments(params)\n      .then(res =&gt; {\n        dispatch({type:&#39;actionType&#39;,data:res});\n      });\n  };\n}</code></pre>\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><p>需要注意的是<code>middlewareAPI</code>中<code>dispatch: (...args) =&gt; dispatch(...args)</code>后面被修改了，真正下发到<code>middleware</code>中的<code>dispatch</code>其实是<code>dispatch = compose(...chain)(store.dispatch)</code>处理后的，如下。</p>\n<pre><code class=\"js\">dispatch = (action) =&gt; {\n    if (typeof action === &#39;function&#39;) {\n      return action(dispatch, getState, extraArgument);\n    }\n    return next(action);\n  };</code></pre>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>原来<code>redux-thunk</code>所具有的异步能力是对<code>store.dispatch</code>进行了一层包装，将之前仅支持的<code>Plain Object</code>拓展成还可以支持<code>函数类型</code>的，如果是普通的对象则还使用原来的<code>store.dispatch</code>，如果是函数类型则执行该函数，将包装后的<code>dispatch</code>下发到该<code>action</code>的<code>内部作用域</code>。如上就是个人最近针对redux及redux-thunk异步能力的一些理解总结，如有理解不当或书写错误的地方欢迎交流指正。</p>\n"},{"title":"深入浅出计算机组成原理","author":"Rongo Li","abbrlink":"b285","date":"2019-06-15T02:12:00.000Z","_content":"\n### 第一章 计算机系统概论\n#### 冯诺依曼型计算机特点\n* 1.计算机由运算器，控制器，存储器，输入和输出设备5部分组成\n* 2.采用存储程序的方式，程序和数据放在同一个存储器中，并以二进制表示。\n* 3.指令由操作码和地址码组成\n* 4.指令在存储器中按执行顺序存放，由指令计数器(即程序计数器PC)指明要执行的指令所在的储存单元地址，一般按顺序递增，但可按运算结果或外界条件而改变\n* 5.机器以运算器为中心，输入输出设备与存储器间的数据传送都通过运算器\n\n#### 区别以运算器还是存储器为中心的计算机\n* 看输入设备能否直接与存储器相连，是的话就是以存储器为中心\n\n### 第二章 计算机系统\n#### 组成结构\n* 硬件\n    * 结构\n        * 主机\n            * cpu\n                * ALU运算器\n                * CU控制器\n            * 存储器\n                * 主存\n                * 辅存\n        * I/O\n            * 输入设备\n            * 输出设备\n    * 主要技术指标\n        * 机器字长\n            * CPU一次能处理的数据位数\n        * 存储容量\n            * 存储容量＝存储单元个数×存储字长\n        * 运算速度\n            * 单位时间执行指令的平均条数，MIPS\n* 软件\n    * 系统软件\n        * 用来管理整个计算机系统 \n            * 语言处理程序\n            * 操作系统\n            * 服务性程序\n            * 数据库管理系统\n            * 网络软件\n    * 应用软件\n        * 按任务需要编制成的各种程序\n\n### 第三章 运算方法和运算部件\n#### 数据的表示方法和转换\n* 机器数正0负1\n    * 符号数值化的带符号二进制数，称为机器数。\n* 真值:符号位加绝对值\n* 余三码:在8421码的基础上，把每个编码都加上0011\n    * 当两个余三码想加不产生进位时，应从结果中减去0011;产生进位时，应将进位信号送入高位，本位加0011\n* 格雷码:任何两个相邻编码只有1个二进制位不同，而其余3个二进制位相同\n* 8421码\n    * 权值从高到低为8、4、2、1\n        * 算术运算时，需对运算结果进行修正。方法：如果小于、等于(1001)2，不需要修正；否则加6修正\n\n#### 带符号的二进制数据在计算机中的表示方法及加减法运算\n* 原码\n    * 定义\n        * 最高位为符号位0/1+数值的绝对值形式\n    * 特点\n        * （1）值+0，-0的原码分别为00000、10000，形式不唯一；\n        * （2）正数的原码码值随着真值增长而增长\n            *  负数的原码码值随着真值增长而减少\n        * （3）n+1位原码表示定点整数范围－(2n－1)——2n－1\n            *  n+1位原码表示定点小数范围 －(1－2－n)——1－2－n\n    * 运算\n        * 绝对值相加减，由数值大小决定运算结果符号\n* 补码\n    * 定义，特点和运算\n        * 运算:\n        结果不超过机器所能表示范围时，[X+Y]补=[X]补+[Y]补\n        减法运算:[X–Y]补=[X+(–Y)]补=[X]补+[–Y]补\n        * 结论\n            * 负数的补数＝模＋负数\n            * 互为补数的绝对值相加＝模\n            * 在补数中，减法运算即加法运算\n        * 定义\n            * 定义法，即[X]补=2·符号位+X     （MOD  2）\n            * X为正数，则符号0+X的绝对值；X为负数，则X的绝对值取反+1。\n        * 特点\n            * 数值零的补码表示唯一\n            * 正数补码码值随着真值增大而增大，负数补码码值随着真值增大而增大\n            * n+1位补码所表示定点整数范围－ 2n——2n－1，n+1位补码所表示定点小数范围－1——1－2－n\n    * 加法运算逻辑事例\n        * 过程\n        * 加减法运算的溢出处理\n            * 溢出定义\n                *  当运算结果超出机器数所能表示的范围\n            * 加减中，可能产生溢出的情况\n                * 可能出现溢出\n                    * 同号数相加\n                    * 异号数相减\n                * 不可能出现溢出\n                    * 异号数相加\n                    * 同号数相减\n            * 判断溢出的方法\n                * 法一：当符号相同两数相加，结果符号和加数（或被加数）不相同，则溢出\n                    * fa,fb表示两操作数（A,B）的符号位,fs为结果的符号位\n                * 法二：任意符号相加，如果C=Cf，则结果正确，否则溢出；\n                    * C为数值最高位的进位，Cf为符号位的进位\n                * 法三：采用双符号相加，如果fs1=fs2，则结果正确，否则溢出；\n                    * 运算结果的符号位为fs2；\n                    * 多符号位的补码，叫做变形补码；\n                    * 如果采用双符号位，当数为小数时，模m=4;当数为整数时，模m=2的n+2次方\n* 反码\n    * 定义\n        *  a.定义法，即[X]反=(2-2-n)·符号位+X   (MOD  2-2-n)\n        * b.X是正数，[X]反=[X]原；X是负数，符号+数值取反。\n    * 特点\n        * 数值零的反码表示不唯一\n        * 正数反码码值随着真值增大而增大，负数反码码值随着真值增大而增大\n        * n+1位反码所表示定点整数范围－ (2n－1)——2n－1，n+1位反码所表示定点小数范围－(1－2－n)——1－2－n\n    * 加减运算特点\n        * 在机器数范围内，反码运算满足[X+Y]反=[X]反+[Y]反，[X－Y]反=[X]反+[－Y]反\n    * 反码运算在最高位有进位时，要在最低位+1，此时要多进行一次加法运算，增加了复杂性，又影响了速度，因此很少采用\n    * 由于反码运算是以2-2的-次方为模，所以，当最高位有进位而丢掉进位(即2)时，要在最低位+/-1\n* 移码\n    * 由来及窍门\n        * 为了从码值直接判断对应真值的大小，所以引进移码\n        * [X]补的符号位取反，即得[X]移 \n    * 特点\n        * 最高位是符号位，1表示正，0表示负\n        * 数据0有唯一的编码\n        * 移码码值随着真值增大而增大\n        * n+1位移码所表示定点整数范围－ 2n——2n－1， n+1位移码所表示定点小数范围－1——1－2－n\n        * 计算机中，移码常用于表示阶码，故只执行加、减运算\n        * 计算机中，移码运算公式需要对结果进行修正\n    * 浮点数的阶码运算\n        * 移码定义:[X]移=2的n次方+X\n        * 补码定义:[X]补=2的n+1次方+Y\n        * 阶码求和公式\n            * [X]移+[Y]补=[X+Y]移  mod2的n+1次方\n            * [X]移+[-Y]补=[X-Y]移\n            * 判溢方法\n                * 双符号位参加运算，最高符号位恒置0\n                * 当结果最高符号位=1则溢出\n                    * 低位符号=0，则上溢；低位符号=1，则下溢；\n                *  当结果最高符号位=0则未溢出\n                    * 低位符号=0，负数；低位符号=1，正数\n            * 说明:如果阶码运算的结果溢出，上述条件不成立。此时，使用双符号位的阶码加法器，并规定移码的第二个符号位，即最高符号位恒用0参加加减运算，则溢出条件是结果的最高符号位为1。此时低位符号为0时，表明结果上溢;为1时，表明结果下溢。当最高符号位为0时，表明没有溢出，低位符号位为1，表明结果为正;为0时表明结果为负。\n* 补，反，原，移码的相互转换\n    * 反码-》原码\n        * 方法：符号位不变，正数不变，负数数值部分取反。\n    * 补码-》原码\n        * 方法1：正数不变，负数数值部分求反加1。\n        * 方法2：串行转换\n            * 从最后开始数，遇到第一个“1”，除第一个“1”不变，前面数字分别取反\n    * 移码-》原码\n        * 方法：移码转换为补码，再转换为原码\n* 数据从补码和反码表示形式转换成原码\n    * 自低位开始转换，从低位向高位，在遇到第一个1之前，保存各位的0不变，第一个1也不变，以后得各位按位取反，最后保持符号位不变，经历一遍后，即可得到补码\n* 定点数和浮点数\n    * 定点数\n        * 小数点固定在某个位置上的数据\n            * 32位定点小数、定点整数补码的范围\n                * 32位定点小数-1～1-2-31\n                *  32位定点整数-231～231-1\n    * 浮点数\n        * 根据IEEE754国际标准，常用的浮点数有两种格式\n            * Nmax=Mmax*2的Emax Nmin=Mmin*2的Emax\n            * 单精度(32位)=8位阶码+24位尾数\n                * 单精度浮点数(32位)，阶码8位(含一位符号位)，尾数24(含一位符号位)，取值范围:-2的127次方～(1-2的-23次方)*2的127次方\n            * 双精度(64位)=11位阶码+53位尾数\n                * 双精度浮点数(64位)，阶码11位(含一位符号位)，尾数53位(含一位符号位)，取值范围:-2的1023次方～(1-2的-52次方)*2的1023次方\n        * 为了保证数据精度，尾数通常用规格化形式表示:当R=2，且尾数值不为0时，其绝对值应大于或等于(0.5)10\n            * 左规\n            * 右规\n        * 小数点位置可以浮动的数据。\n        * 表示形式：N = M · RE\n        * 计算机中存储形式\n            * Ms+Es+E(n位)+M(m位)\n                * 阶码E，一般为整数，用补码或者移码表示；\n                * 尾数M，一般为规格化的定点小数，用补码表示；\n\n#### 二进制乘法运算\n* 定点原码一位乘法\n    * 两个原码数相乘，其乘积的符号为相乘两数符号的异或值，数值则为两数绝对值之积\n        * [X·Y]原=[X]原·[Y]原=(X0⊕Y0)|(X1X2..Xn) · (Y1Y2..Yn)\n    * 几点结论\n        * 从低到高根据乘数每位0、1决定相加被乘数还是0；\n        * 相加数每次左移，最后一起求积；\n        * 符号由异或决定\n    * 表达式\n    * 电路框架\n    * 修正\n        * 1.在机器内多个数据一般不能同时相加，一次加法操作只能求出两数之和，因此每每求得一个相加数，就与上次部分积相加\n        * 2.人工计算时，相加数逐次向左偏移一位，由于最后的乘积位数是乘数(或被乘数)的两倍，如按此算法在机器中运算，加法器也需增到两倍。观察计算过程很容易发现，在求本次部分积时，前一次部分积的最低位不再参与运算，因此可将其右移一位，相加数可直送而不必偏移，于是用N位加法器就可实现两个N位数相乘\n        * 部分积右移时，乘数寄存器同时右移一位，这样可以用乘数寄存器的最低位来控制相加数(取被乘数或零)，同时乘数寄存器的最高位可接受部分积右移出来的一位，因此，完成乘法运算后，A寄存器中保存乘积的高位部分，乘数寄存器中保存乘积低位部分\n    * 例题\n    * 控制流程图\n* 定点补码一位乘法\n    * 表达式\n    * [X·Y]补=[X]补·(－Y0+Y1·2-1+….Yn·2-n)\n    * 注意：此处为双符号位，当最后乘积高位为负数时，需要补充加上[-|x|]补的操作\n\n#### 二进制除法\n* 加减交替法\n    * 当余数为正时，商上1，求下一位商的办法是，余数左移一位，再减去除数;当余数为负时，商上0，求下一位商的办法是，余数左移一位，再加上除数。此方法不用恢复余数，所以又叫不恢复余数法。但若最后一次上商为0而又需得到正确余数，则在这最后扔需恢复余数\n\n#### 浮点数的运算方法\n* 浮点数的加减法运算\n    * 1.对阶操作\n        * 求出△E，再对小的进行移位\n    * 2.尾数的加减运算\n    * 3.规格化操作\n        * 规则简化是符号位和数值最高位不同，即00.1xxxx或11.0xxxx\n    * 4.舍入\n        * 超出表示范围的高位为1舍入\n    * 5.检查阶码是否溢出\n* 浮点数的乘除法运算\n    * 1.浮点数阶码运算(移码)\n        * 牢记公式\n            * [X+Y]移=[X]移+[Y]补\n            * [X–Y]移=[X]移+[–Y]补\n    * 2.按照一位乘或加减交替除运算\n        * 先确定符号，在列式子计算\n\n#### 运算部件\n* ABC寄存器作业\n* 定点运算部件\n* 浮点运算部件\n    * 由阶码运算部件和尾数运算部件组成\n\n#### 数据校验码\n* 码距\n    * 任意两个合法码之间不相同的二进制位数的最小值\n        * 要具有差错能力，则码距>1\n        * 合理增大码距，就能提高发现错误的能力\n* 鉴定方法\n    * 有无差错能力\n    * 是否能合理增大码距\n* 奇偶校验码\n    * 能发现数据代码中一位或奇数个位出错情况的编码\n    * 实现原理是使码距由1增加到2\n        * 步骤1：在字节高位补充一位，即校验位\n        * 步骤2：依据图3.10电路形成原始数据D8..D1的校验位值\n        * 步骤3：将9位数据写入主存\n        * 步骤4：读出该数据时，读取数据D8..D1通过图3.10判定合法性\n    * 电路图\n    * 结论\n        * （1）奇偶校验码只能发现一位或奇位错，且不能确定出错位置\n        * （2）奇偶校验码的码距=2\n* 海明校验码\n    * 海明码位号和校验位位号的关系\n        * Pi的位置在2的i-1次方，但是除了最高位\n    * 笔记\n        * 3,5,7||3,6,7||5,6,7\n    * 电路图\n    * 海明码码距为4\n    * 纠一位错，查一位错\n        * 2∧r≥k+r+1\n    * 纠一位错，查两位错\n        * 2∧(r–1)≥k+r\n* 循环冗余校验码(CRC)\n    * CRC码可以发现并纠正信息存储或传送过程中连续出现的多位错误\n    * CRC码一般是指k位信息码之后拼接r位校验码\n    * 模2运算\n        * 模2加减\n        * 模2乘除\n        * 异或逻辑\n    * CRC的译码与纠错\n        * 更换不同的待测码字可以证明:余数与出错位的对应关系是不变，只与码制和生成多项式有关\n        * 图\n\n### 第四章 主存储器\n#### 概述\n* 主存储器处于全机中心低位，辅助存储器或称为外存储器，通常用来存放主存的副本和当前不在运行的程序和数据。\n\n#### 主存储器的类型\n* 随机存储器RAM\n* 非易失性存储器\n\n#### 主存储器的主要技术指标\n* 主存容量\n    * 64×8等等\n    * 计算机可寻址的最小信息单元是一个存储字\n    * 主存储器存储单元的总数\n* 存取速度\n    * 由存储器存取时间和存储周期表示\n* 存储器存取时间\n    * 启动一次存储器操作(读/写)到完成该操作所经历的时间\n* 存储周期\n    * 连续启动两次独立的存储器操作所间隔的最小时间\n\n#### 主存储器的基本操作\n* CPU通过使用AR(地址寄存器)和DR(数据寄存器)和主存进行数据传送\n* 若AR为K位字长，DR为n位字长，则允许主存包含2∧k个可寻址单元\n* CPU与主存采取异步工作方式，以ready信号表示一次访存操作的结束\n\n#### 读/写存储器\n* 随机存储器(RAM)按存储元件在运行中能否长时间保存信息分为静态存储器和动态存储器\n* 静态存储器，利用触发器保存信息，只要不断电，信息就不会丢失\n    * 电路简图\n    * MOS静态存储结构图\n* 动态存储器，利用MOS电容存储电荷来保存信息，需要不断给电容充电才能使信息来保存信息\n    * 电路简图\n    * 16K×1位动态存储器框图\n    * 再生\n        * 集中式\n        * 分散式\n        * 时间小于或等于2ms\n        * 行读出再生\n\n#### 非易失性半导体存储器\n* 只读存储器ROM\n    * 只读不能写\n* 可编程序的只读存储器PROM\n    * 一次性写入\n* 可擦可编程序的只读存储器EPROM\n    * 可多次写入、读出\n* 可电擦可编程序只读存储器E2PROM\n    * 可多次读出但写入次数有限\n* 快擦除读写存储器Flash Memory\n    * 重复写入、读出\n\n#### 存储器的组成与控制\n* 存储器容量扩展\n    * 位扩展:用多个存储器芯片对字长进行扩充\n    * 字扩展:增加存储器中字的数量，提高存储器的寻址范围\n    * 字位扩展，假设一个存储器的容量为M×N位，若使用L×K位存储器芯片，那么，这个存储器共需要(M/L)×(N/K)个存储器芯片\n\n#### 多体交叉存储器\n* 提高访存速度的方式\n    * 采用高速器件\n    * 采用层次结构\n    * 调整主存结构\n* 计算机中大容量的主存可由多个存储体组成，每个存储体都具有自己的读写线路，地址寄存器和数据寄存器，称为\"存储模块\"。这种多模块存储器可以实现重叠与交叉存取\n* 第i个模块M的地址编号应按下式给出:M×j+i\n* 连续地址分布在相邻的不同模块内，而同一模块内的地址都是不连续的\n\n### 第五章:指令系统\n#### 指令系统的发展\n* 20世纪70年代末人们提出了便于VLSI实现的精简指令系统计算机，简称RISC，同时将指令系统越来越复杂的计算机称为复杂指令系统计算机，简称CISC\n\n#### 指令格式\n* 结构(操作码+地址码)\n    * 操作码\n    * 操作数的地址\n    * 操作结果的存储地址\n    * 下一条指令的地址\n* 地址码\n    * 零地址指令\n    * 一地址指令\n        * 寻址范围  224 = 16 M\n            * 2次访存\n    * 二地址指令\n        * 寻址范围  212 = 4 K\n            * 4 次访存\n    * 三地址指令\n        * 寻址范围  28 = 256\n            * 4 次访存\n    * 多地址指令\n        * 寻址范围  26 = 64\n            * 4 次访存\n* 指令字长\n    * 取决因素\n        * 操作码的长度\n        * 操作数地址的长度\n        * 操作数地址的个数\n    * 指令字长 固定\n        * 指令字长 = 存储字长\n    * 指令字长 可变\n        * 按字节的倍数变化\n    * 对准边界存放\n        * 不连续存放数据\n        * 按字节编址\n            * a.半字地址最低位恒为0\n            *  b.字地址最低两位恒为0\n            * c.双字地址的最低三位恒为0\n        * 减少访存次数，浪费存储空间\n    * 不 对 准 边 界 存 放\n        * 连续存放数据\n        * 节约存储器空间，但增加访存次数，对多字节数据存在调整高 低字节位置的问题\n* 寻址方式\n    * 确定本条指令的数据地址\n    * 下一条要执行的指令地址的方法\n* 指令操作码的扩展技术\n    * 指令操作码的长度决定了指令系统中完成不同操作的指令数\n    * 若某机器的操作码长度固定为K位，则它最多只能有2^K条不同指令\n    * 指令操作码两种格式\n        * 固定格式\n            * 优点:对于简化硬件设计，减少指令译码时间非常有利\n            * 缺点:指令少，浪费地址\n        * 可变格式(分散地放在字的不同字段)\n            * 优点:指令多，缩短指令平均长度，减少程序总位数，增加指令字所能表示的操作信息\n            * 缺点:译码复杂，控制器的设计难度增大\n    * 拓展方法的一个重要原则\n        * 使用频度(即指令在程序中出现概率)高的指令应分配短的操作码，使用频度低的指令相应地分配较长的操作码\n* 指令系统的兼容性\n    * 保持系统向上兼容\n\n#### 精简指令系统计算机（RISC）——用于小型机\n#### 复杂指令系统计算机（CISC）——用于大型机\n\n### 第六章：中央处理器\n#### 计算机工作过程\n* 加电——》产生reset信号——》执行程序——》停机——》停电\n* 产生reset信号的任务\n    * 任务一：使计算机处于初始状态\n    * 任务二：从PC中取出指令地址\n* 控制器作用是协调并控制计算机各部件执行程序的指令序列\n\n#### 控制器的组成\n* 控制器的功能\n    * 取指令\n        * 发出指令地址，取出指令的内容\n    * 分析指令\n        * （1）对操作码译码产生操作相应部件的控制信号\n        * （2）根据寻址方式形成操作数地址\n    * 执行指令\n        * （1）根据分析指令后产生控制信号、操作数地址信号序列，通过CPU及输入输出设备的执行实现每条指令的功能\n        * （2）结果回送存储器\n        * （3）形成下条指令的地址\n    * 控制程序和数据的输入和结果输出\n    * 对异常情况和某些请求的处理\n        * 异常情况的处理：例如算术运算的溢出、数据传送奇偶错\n        * 某些请求的处理\n            * “中断请求”信号\n            * DMA请求信号\n* 控制器的组成\n    * 程序计数器（PC）\n        * 即地址寄存器，用来存放当前正在执行的指令地址或即将要执行的下一条指令地址\n    * 指令寄存器（IR）\n        * 用以存放当前正在执行的指令，以便在指令执行过程中控制完成一条指令的全部功能\n    * 指令译码器或操作码译码器\n        * 对指令寄存器中的操作码进行分析解释，产生相应的控制信号\n    * 脉冲源及启停线路\n        * 脉冲源参数一定评率的脉冲作为整个机器的时钟脉冲，是机器周期和工作脉冲的基准信号，在机器刚加电时，还应产生一个总清信号（reset）\n    * 时序控制信号形成部件\n        * 当程序启动后，在CLK时钟作用下，根据当前正在执行的指令的需要，产生相应的时序控制信号，并根据被控制功能部件的反馈信号调整时序控制信号\n            * 控制存储器\n            * 微指令寄存器\n                * 控制字段+下址\n    *  周期概念\n        * 指令周期\n            * 完成一条指令所需的时间，包括取指令、分析指令、执行指令\n        * 机器周期\n            * 也称为CPU周期，是CPU从内存中读取一个指令的时间，通常等于取指周期\n        * 时钟周期\n            * 称为节拍脉冲或T周期，是基准脉冲信号\n    * 三条假设\n        * 程序是存放在主存中的，当执行完一条指令后才从主存中取下一条指令（非流水线）\n        * 指令的长度是固定的，并限制了寻址方式的多样化\n        * 在程序运行前，程序和数据都已存在主存中\n* 指令执行过程（运算器和控制器配合）\n    * 组成控制器的基本电路\n        * 具有记忆功能的触发器以及由它组成的寄存器，计数器和存储单元\n        * 没有记忆功能的门电路及由它组成的加法器，算术逻辑运算单元（ALU）和各种逻辑电路\n    * 举例\n        * 加法\n            * 取指令——》计算操作数地址——》取操作数——》执行结果并运算送结果\n        * 要能看懂时序图\n            * 哪些指令在对应的时间有效\n        * 条件转移指令\n            * 取指令——》计算地址\n    * 控制器的功能就是按每一条指令的要求产生所需的控制信号\n    * 产生控制信号的方法\n        * 微程序控制\n        * 硬布线控制\n\n#### 微程序控制计算机的基本工作原理\n* 基本概念\n    * 微指令\n        * 在微程序控制的计算机中，将由同时发出的控制信号所执行的一组微操作\n    * 微命令\n        * 将指令分为若干条微指令，按次序执行这些微指令。组成微指令的操作即微命令\n    * 微程序\n        * 计算机的程序由指令序列构成，而计算机每条指令的功能均由微指令序列解释完成，这些微指令序列的集合就叫做微程序\n    * 控制存储器\n        * 微程序一般是存放在专门的存储器中的，由于该存储器主要存放控制命令（信号）与下一条执行的微指令地址（简称下址）\n        * 存储单元内容\n            * （1）微指令的控制信号——控制位\n            * （2）下条微指令的地址——下址字段\n        * 存储芯片：ROM\n    * 执行一条指令实际上就是执行一段存放在控制存储器中的微程序\n* 实现微程序控制的基本原理\n    * 控制信号（23条）\n    * 书上P123页为加法的过程\n    * 微指令格式：控制字段+下址字段\n    * 23个控制位，12个下址位——》容量为4K\n    * 取址微指令的操作对所有指令都是相同的，所以是一条公用的微指令，其下址由操作码译码产生\n* 微程序控制器\n* 时序信号及工作脉冲的形成\n* 停机和停电的区别\n    * 停机\n        * 电压：稳定\n            * 存放内容：保持\n                * 重启PC内容：断点指令地址\n    * 停电\n        * 电压：消失\n            * 存放内容：RAM的内容消失\n                * 重启PC内容：第一条指令地址\n\n#### 微程序设计技术\n* 如何缩短微指令字长\n    * 直接控制法（容量太小）\n        * 编译方法：每一位代表一个控制信号，直接送往相应的控制点\n        * 优点：控制简单\n        * 缺点：微指令字长过大\n    * 字段直接编译法\n        * 选出互斥的微指令\n        * 每个字段都要留出一个代码，表示本段不发出任何指令（000）\n        * 优点：节省微指令的字长\n        * 缺点：增加了额外的硬件开销\n    * 字段间接编译法\n        * 指令之间相互联系的情况\n        * 举例：A为0-7，B为0-3，如果是直接编译——3+2=5，如果是间接编译——3+1=4\n        * 编码方法：在字段直接编译法中，译码输出端要兼由另一字段中的某些微命令配合解释\n        * 优点：减少了微指令长度\n        * 缺点：可能削弱微指令的并行控制能力，同时增加硬件开销\n    * 常熟源字段E(了解)\n* 如何减少微指令长度\n    * 现行微指令/微地址\n        * 现行微指令：当前正在执行的指令\n        * 现行微地址：存放现行微指令的控制器存储单元\n    * 后继微指令/微地址\n        * 后继微指令：下一条要执行的微指令\n        * 后继微地址：存放后继微指令的控制器存储单元\n    * 增量与下址字段结合产生后继微指令的方法\n        * 下址字段分成：转移控制字段BCF和转移地址字段BAF\n            * BCF：控制微程序的转移情况\n            * BAF：转移后的微指令所在地址\n        * BAF有两种情况\n            * 与uPC的位数相等——转移灵活，但增加微指令长度\n            * 比uPC短——转移地址收到限制，但可缩短微指令长度\n        * 优点\n            *  微指令的下址字段很短，仅用于选择输入uPC计数器的某条线路有效\n        * 缺点\n            * 微程序转移不灵活，使得微程序在控存中的物理空间分配有困难\n    * 多路转移方式\n        * 一条微指令存在多个转移分支的情况称为多路转移\n    * 微中断\n        * 1.微中断请求信号是由程序中断请求信号引起的\n        * 2.在完成现行指令的微程序后响应该微中断请求\n        * 3.由硬件产生对应微中断处理程序在控存中的入口地址\n* 如何提高微程序的执行速度\n* 微指令格式\n    * 水平型微指令——直接控制，字段编译（直接、间接）\n        * 特点：在一条微指令中定义并并行执行多个微命令\n    * 垂直型微指令\n        * 特点：不强调实现微指令的并行控制功能\n        * 定义：采用微操作码编译法，由操作码规定微指令的功能\n* 微程序控制存储器\n    * 一般采用ROM存储器\n    * 也可采用RAM，为防止断电后内容消失，则必须开机后将外存中存放的微程序调入控存RAM，然后才能执行程序。\n    * 当前为了能不断扩展指令系统，通常采用ROM+RAM\n* 动态微程序设计\n    * 定义：能根据用户要求改变微程序\n    * 优点：是计算机能更灵活、有效的适应于各种不同的应用目标\n* 控制存储器的操作（P136）\n    * 串行方式\n    * 并行方式——比串行多了微指令寄存器\n        * 微周期=max(取微指令时间,执行微指令时间)\n        * 由于取微指令、执行微指令同时进行，故对于某些后继微地址的产生根据处理结果而定的微指令，则延迟一个微周期再取微指令\n\n#### 硬布线控制的计算机（RISC）——特点快\n* 形成操作控制信号的逻辑框图（P141）\n* 操作控制信号的产生\n    * 取值周期cy1所产生的信号对所有指令都是相同的，即与当前执行的指令无关，逻辑式得到最简单的形式\n    * 通常，同一个控制控制信号在若干条指令的某些周期（或再加上一些条件）中都需要，为此需要把它们组合起来\n    * 同种类型的指令所需要的控制信号大部分是相同的，仅有少量区别\n    * 在确定指令的操作码时（即对具体指令赋予二进制操作码），为了便于逻辑表达式的化简以减少逻辑电路数量，往往给予特别关注\n* 设计组合逻辑电路从而产生需要的控制信号的步骤\n    * 1.实际逻辑问题2.真值表3.公式化简4.逻辑电路图\n* 设计目标\n    * 使用最少的电路元件达到最高的操作速度\n\n#### 流水线工作原理\n* 几点结论\n    * 每条指令的执行时间不变\n    * 每条指令处理结果的时间缩短\n    * 流水线处理速率最高时=流水线处于满载的稳定状态\n    * 流水线处理速率最低时=流水线未满载状态\n    * 为了满足在重叠时间段不同指令的机器周期能够完成指定的操作，将时间段=操作完成的最长时间\n    * 为了保证一个周期内流水线的输入信号不变，相邻时间段之间必须设置锁存器或寄存器\n    * 除了指令执行流水线，还有运算操作流水线\n* 相关问题\n    * 流水线阻塞（P163-6.15）\n        * 数据相关产生\n            * 假设第二条指令需要的操作数是第一条指令运算的结果，那么出现了数据相关\n        * 指令执行时间不同产生\n        * 程序转移的影响\n        * 异常情况响应中断\n\n### 第七章：存储系统\n#### 存储系统的层次结构\n* cache->主存->辅存\n\n#### 高速缓冲存储器\n* cache的工作原理\n    * 局部性原理\n    * 主存地址和cache地址（P166 图7.2）\n    * 块长\n        * 块长一般取一个主存周期所能调出的信息长度（一般为16个字）\n    * cache的容量和块的大小是影响cache的效率的重要因素\n    * 命中率\n        * CPU所要访问的信息是否在cache中的比率，而将所要访问的信息不在cache中的比率称为失败率\n    * 一致性策略\n        * 标志交换方式（写回法）\n        * 通过式写入（写通法）\n        * 写操作直接对主存进行，而不写入cache\n    * cache的存取时间\n        * 平均存取时间=h*tc+(1-h)(tc+tm) \n    * 最好替换策略\n        * 按照被替换的字块是下一段时间最少使用的，由替换部件实现\n* cache组织\n    * 地址映像\n        * 直接映像\n            * cache中许多空的位置被浪费\n            * 主存地址：主存字块标记+cache字块地址+字块内地址\n        * 全相联映像\n            * 成本太高而不能采用\n            * 主存地址：主存字块标记+字块内地址\n            * 优点\n                * 方式灵活，缩小了块发生冲突的概率\n            * 缺点\n                * 增加了标识位位数\n                * 增加了寻找主存块在cache中对应块的时间\n        * 组相联映像\n            * 直接映像和全相联映像的折衷\n            * 主存地址：主存字块标记+组地址+块内地址\n\n#### 虚拟存储器\n* 存储管理部件（MMU）\n    * 现代计算机一般都有辅助存储器，但具有辅存的存储系统不一定是虚拟存储系统\n    * 虚拟存储系统的特点\n        * 允许用户程序用比主存大的多的空间来访问主存\n        * 每次访存都要进行虚实地址的转换\n\n### 第八章：辅助存储器\n#### 半导体存储器可随机访问任一单元，而辅助存储器一般为串行访问存储器\n#### 辅助存储器的种类\n* 磁表面存储器\n    * 数字式磁记录\n        * 硬盘、软盘和磁带\n    * 模拟式磁记录\n        * 录音、录像设备\n* 光存储器\n    * 光盘\n\n#### 串行存储器\n* 顺序存取存储器\n* 直接存取存储器\n\n#### 辅助存储器的技术指标\n* 存储密度\n    * 定义：单位长度或单位面积磁层表面磁层所存储的二进制信息量\n    * 道密度\n        * 沿磁盘半径方向单位长度的磁道数称为道密度，单位为道/英寸tpi或道/毫米tpmm\n    * 位密度或线密度\n        * 单位长度磁道所能记录二进制信息的位数叫位密度或线密度，单位为位/英寸bpi或位/毫米bpmm\n    * 每个磁道所存储的信息量是一样的\n* 存储容量\n    * C = n × k × s\n* 寻址时间\n    * 平均寻址时间Ta=平均找道时间Ts+平均等待时间Tw\n    * 辅存的速度\n        * 寻址时间\n        * 磁头读写时间\n* 数据传输率\n    * Dr  = D × V\n* 误码率\n* 价格\n\n#### 硬磁盘存储器的类型\n* (1) 固定磁头和移动磁头\n* (2) 可换盘和固定盘\n\n#### 磁盘存储器\n* 温彻斯特磁盘简称温盘\n* 磁盘存储器由驱动器（HDD），控制器（HDC）和盘片组成\n* 最外面的同心圆叫0磁道，最里面的同心圆假设称为n磁道\n* 驱动器的定位驱动系统实现快速精准的磁头定位\n* 主轴系统的作用是带动盘片按额定转速稳定旋转\n* 数据控制系统的作用是控制数据的写入和读出，包括寻址，磁头旋转，写电流控制，读出放大，数据分离\n* 磁盘控制器有两个方向的接口\n    * 与主机的接口\n    * 与驱动器（设备）的接口\n\n#### 光盘\n* 采用光存储技术\n    * 利用激光写入和读出\n    * 第一代光存储技术\n        * 采用非磁性介质\n            * 不可擦写\n    * 第二代光存储技术\n        * 采用磁性介质\n            * 可擦写\n* 光盘的存储原理\n    * 只读型和只写一次型\n        * 热作用（物理或化学变化）\n    * 可擦写光盘\n        * 热磁效应\n\n### 第九/十章：输出输出（I/O）设备/系统\n#### 设备控制器（I/O）的基本功能\n* 实现主机和外部设备之间的数据传送\n* 实现数据缓冲，以达到主机同外部设备之间的速度匹配\n* 接受主机的命令，提供设备接口的设备，并按照主机的命令控制设备\n\n#### I/O 编址方式\n* (1) 统一编址：用取数、存数指令\n* (2) 不统一编址：有专门的 I/O 指令\n\n#### I/O 与主机的连接方式\n* 辐射式连接\n    * 每台设备都配有一套\n    * 控制线路和一组信号线\n    * 不便于增删设备\n* 总线连接\n    * 便于增删设备\n\n#### I/O设备\n* 人机交互设备\n    * 键盘、鼠标等\n* 计算机信息的驻留设备\n    * 硬盘、光盘等\n* 机——机通信设备\n    * MODEN等\n\n#### 为什么要设置接口？\n* 1. 实现设备的选择\n* 2. 实现数据缓冲达到速度匹配\n* 3. 实现数据串     并格式转换\n* 4. 实现电平转换\n* 5. 传送控制命令\n* 6. 反映设备的状态\n    * （“忙”、“就绪”、“中断请求”）\n\n#### 中断服务程序的流程\n* (1) 保护现场\n    * 程序断点的保护\n    * 寄存器内容的保护\n* (2) 中断服务\n    * 对不同的 I/O 设备具有不同内容的设备服务\n* (3) 恢复现场\n    * 出栈指令\n* (4) 中断返回\n    * 中断返回指令\n\n#### 单重中断和多重中断\n* 单重 中断\n    * 不允许中断 现行的 中断服务程序\n* 多重 中断\n    * 允许级别更高 的中断源\n    * 中断 现行的 中断服务程序\n\n#### DMA 方式\n* 主存和 I/O 之间有一条直接数据通道\n* CPU 和 I/O 并行工作\n* DMA 的三种工作方式\n    * (1) CPU暂停方式\n    * (2) CPU周期窃取方式\n    * (3)直接访问存储器\n* DMA 接口功能\n    * (1) 向 CPU 申请 DMA 传送\n    * (2) 处理总线 控制权的转交\n    * (3) 管理 系统总线、控制 数据传送\n    * (4) 确定 数据传送的 首地址和长度，修正 传送过程中的数据地址和长度\n    * (5) DMA 传送结束时，给出操作完成信号\n* DMA 传送过程\n    * 预处理、数据传送、后处理\n\n#### 外设接口\n* 设备与主机相连时，必须按照规定的物理互连特性、电气特性等进行连接，这些特性的技术规范称为接口标准\n\n### 总结\n* 整体架构图如下\n\n![计算机组成原理思维导图](./../assets/计算机组成.png)\n","source":"_posts/计算机组成原理.md","raw":"---\ntitle: 深入浅出计算机组成原理\nauthor: Rongo Li\ncategories: CS基础\ntags:\n  - 计算机原理\nabbrlink: b285\ndate: 2019-06-15 10:12:00\n---\n\n### 第一章 计算机系统概论\n#### 冯诺依曼型计算机特点\n* 1.计算机由运算器，控制器，存储器，输入和输出设备5部分组成\n* 2.采用存储程序的方式，程序和数据放在同一个存储器中，并以二进制表示。\n* 3.指令由操作码和地址码组成\n* 4.指令在存储器中按执行顺序存放，由指令计数器(即程序计数器PC)指明要执行的指令所在的储存单元地址，一般按顺序递增，但可按运算结果或外界条件而改变\n* 5.机器以运算器为中心，输入输出设备与存储器间的数据传送都通过运算器\n\n#### 区别以运算器还是存储器为中心的计算机\n* 看输入设备能否直接与存储器相连，是的话就是以存储器为中心\n\n### 第二章 计算机系统\n#### 组成结构\n* 硬件\n    * 结构\n        * 主机\n            * cpu\n                * ALU运算器\n                * CU控制器\n            * 存储器\n                * 主存\n                * 辅存\n        * I/O\n            * 输入设备\n            * 输出设备\n    * 主要技术指标\n        * 机器字长\n            * CPU一次能处理的数据位数\n        * 存储容量\n            * 存储容量＝存储单元个数×存储字长\n        * 运算速度\n            * 单位时间执行指令的平均条数，MIPS\n* 软件\n    * 系统软件\n        * 用来管理整个计算机系统 \n            * 语言处理程序\n            * 操作系统\n            * 服务性程序\n            * 数据库管理系统\n            * 网络软件\n    * 应用软件\n        * 按任务需要编制成的各种程序\n\n### 第三章 运算方法和运算部件\n#### 数据的表示方法和转换\n* 机器数正0负1\n    * 符号数值化的带符号二进制数，称为机器数。\n* 真值:符号位加绝对值\n* 余三码:在8421码的基础上，把每个编码都加上0011\n    * 当两个余三码想加不产生进位时，应从结果中减去0011;产生进位时，应将进位信号送入高位，本位加0011\n* 格雷码:任何两个相邻编码只有1个二进制位不同，而其余3个二进制位相同\n* 8421码\n    * 权值从高到低为8、4、2、1\n        * 算术运算时，需对运算结果进行修正。方法：如果小于、等于(1001)2，不需要修正；否则加6修正\n\n#### 带符号的二进制数据在计算机中的表示方法及加减法运算\n* 原码\n    * 定义\n        * 最高位为符号位0/1+数值的绝对值形式\n    * 特点\n        * （1）值+0，-0的原码分别为00000、10000，形式不唯一；\n        * （2）正数的原码码值随着真值增长而增长\n            *  负数的原码码值随着真值增长而减少\n        * （3）n+1位原码表示定点整数范围－(2n－1)——2n－1\n            *  n+1位原码表示定点小数范围 －(1－2－n)——1－2－n\n    * 运算\n        * 绝对值相加减，由数值大小决定运算结果符号\n* 补码\n    * 定义，特点和运算\n        * 运算:\n        结果不超过机器所能表示范围时，[X+Y]补=[X]补+[Y]补\n        减法运算:[X–Y]补=[X+(–Y)]补=[X]补+[–Y]补\n        * 结论\n            * 负数的补数＝模＋负数\n            * 互为补数的绝对值相加＝模\n            * 在补数中，减法运算即加法运算\n        * 定义\n            * 定义法，即[X]补=2·符号位+X     （MOD  2）\n            * X为正数，则符号0+X的绝对值；X为负数，则X的绝对值取反+1。\n        * 特点\n            * 数值零的补码表示唯一\n            * 正数补码码值随着真值增大而增大，负数补码码值随着真值增大而增大\n            * n+1位补码所表示定点整数范围－ 2n——2n－1，n+1位补码所表示定点小数范围－1——1－2－n\n    * 加法运算逻辑事例\n        * 过程\n        * 加减法运算的溢出处理\n            * 溢出定义\n                *  当运算结果超出机器数所能表示的范围\n            * 加减中，可能产生溢出的情况\n                * 可能出现溢出\n                    * 同号数相加\n                    * 异号数相减\n                * 不可能出现溢出\n                    * 异号数相加\n                    * 同号数相减\n            * 判断溢出的方法\n                * 法一：当符号相同两数相加，结果符号和加数（或被加数）不相同，则溢出\n                    * fa,fb表示两操作数（A,B）的符号位,fs为结果的符号位\n                * 法二：任意符号相加，如果C=Cf，则结果正确，否则溢出；\n                    * C为数值最高位的进位，Cf为符号位的进位\n                * 法三：采用双符号相加，如果fs1=fs2，则结果正确，否则溢出；\n                    * 运算结果的符号位为fs2；\n                    * 多符号位的补码，叫做变形补码；\n                    * 如果采用双符号位，当数为小数时，模m=4;当数为整数时，模m=2的n+2次方\n* 反码\n    * 定义\n        *  a.定义法，即[X]反=(2-2-n)·符号位+X   (MOD  2-2-n)\n        * b.X是正数，[X]反=[X]原；X是负数，符号+数值取反。\n    * 特点\n        * 数值零的反码表示不唯一\n        * 正数反码码值随着真值增大而增大，负数反码码值随着真值增大而增大\n        * n+1位反码所表示定点整数范围－ (2n－1)——2n－1，n+1位反码所表示定点小数范围－(1－2－n)——1－2－n\n    * 加减运算特点\n        * 在机器数范围内，反码运算满足[X+Y]反=[X]反+[Y]反，[X－Y]反=[X]反+[－Y]反\n    * 反码运算在最高位有进位时，要在最低位+1，此时要多进行一次加法运算，增加了复杂性，又影响了速度，因此很少采用\n    * 由于反码运算是以2-2的-次方为模，所以，当最高位有进位而丢掉进位(即2)时，要在最低位+/-1\n* 移码\n    * 由来及窍门\n        * 为了从码值直接判断对应真值的大小，所以引进移码\n        * [X]补的符号位取反，即得[X]移 \n    * 特点\n        * 最高位是符号位，1表示正，0表示负\n        * 数据0有唯一的编码\n        * 移码码值随着真值增大而增大\n        * n+1位移码所表示定点整数范围－ 2n——2n－1， n+1位移码所表示定点小数范围－1——1－2－n\n        * 计算机中，移码常用于表示阶码，故只执行加、减运算\n        * 计算机中，移码运算公式需要对结果进行修正\n    * 浮点数的阶码运算\n        * 移码定义:[X]移=2的n次方+X\n        * 补码定义:[X]补=2的n+1次方+Y\n        * 阶码求和公式\n            * [X]移+[Y]补=[X+Y]移  mod2的n+1次方\n            * [X]移+[-Y]补=[X-Y]移\n            * 判溢方法\n                * 双符号位参加运算，最高符号位恒置0\n                * 当结果最高符号位=1则溢出\n                    * 低位符号=0，则上溢；低位符号=1，则下溢；\n                *  当结果最高符号位=0则未溢出\n                    * 低位符号=0，负数；低位符号=1，正数\n            * 说明:如果阶码运算的结果溢出，上述条件不成立。此时，使用双符号位的阶码加法器，并规定移码的第二个符号位，即最高符号位恒用0参加加减运算，则溢出条件是结果的最高符号位为1。此时低位符号为0时，表明结果上溢;为1时，表明结果下溢。当最高符号位为0时，表明没有溢出，低位符号位为1，表明结果为正;为0时表明结果为负。\n* 补，反，原，移码的相互转换\n    * 反码-》原码\n        * 方法：符号位不变，正数不变，负数数值部分取反。\n    * 补码-》原码\n        * 方法1：正数不变，负数数值部分求反加1。\n        * 方法2：串行转换\n            * 从最后开始数，遇到第一个“1”，除第一个“1”不变，前面数字分别取反\n    * 移码-》原码\n        * 方法：移码转换为补码，再转换为原码\n* 数据从补码和反码表示形式转换成原码\n    * 自低位开始转换，从低位向高位，在遇到第一个1之前，保存各位的0不变，第一个1也不变，以后得各位按位取反，最后保持符号位不变，经历一遍后，即可得到补码\n* 定点数和浮点数\n    * 定点数\n        * 小数点固定在某个位置上的数据\n            * 32位定点小数、定点整数补码的范围\n                * 32位定点小数-1～1-2-31\n                *  32位定点整数-231～231-1\n    * 浮点数\n        * 根据IEEE754国际标准，常用的浮点数有两种格式\n            * Nmax=Mmax*2的Emax Nmin=Mmin*2的Emax\n            * 单精度(32位)=8位阶码+24位尾数\n                * 单精度浮点数(32位)，阶码8位(含一位符号位)，尾数24(含一位符号位)，取值范围:-2的127次方～(1-2的-23次方)*2的127次方\n            * 双精度(64位)=11位阶码+53位尾数\n                * 双精度浮点数(64位)，阶码11位(含一位符号位)，尾数53位(含一位符号位)，取值范围:-2的1023次方～(1-2的-52次方)*2的1023次方\n        * 为了保证数据精度，尾数通常用规格化形式表示:当R=2，且尾数值不为0时，其绝对值应大于或等于(0.5)10\n            * 左规\n            * 右规\n        * 小数点位置可以浮动的数据。\n        * 表示形式：N = M · RE\n        * 计算机中存储形式\n            * Ms+Es+E(n位)+M(m位)\n                * 阶码E，一般为整数，用补码或者移码表示；\n                * 尾数M，一般为规格化的定点小数，用补码表示；\n\n#### 二进制乘法运算\n* 定点原码一位乘法\n    * 两个原码数相乘，其乘积的符号为相乘两数符号的异或值，数值则为两数绝对值之积\n        * [X·Y]原=[X]原·[Y]原=(X0⊕Y0)|(X1X2..Xn) · (Y1Y2..Yn)\n    * 几点结论\n        * 从低到高根据乘数每位0、1决定相加被乘数还是0；\n        * 相加数每次左移，最后一起求积；\n        * 符号由异或决定\n    * 表达式\n    * 电路框架\n    * 修正\n        * 1.在机器内多个数据一般不能同时相加，一次加法操作只能求出两数之和，因此每每求得一个相加数，就与上次部分积相加\n        * 2.人工计算时，相加数逐次向左偏移一位，由于最后的乘积位数是乘数(或被乘数)的两倍，如按此算法在机器中运算，加法器也需增到两倍。观察计算过程很容易发现，在求本次部分积时，前一次部分积的最低位不再参与运算，因此可将其右移一位，相加数可直送而不必偏移，于是用N位加法器就可实现两个N位数相乘\n        * 部分积右移时，乘数寄存器同时右移一位，这样可以用乘数寄存器的最低位来控制相加数(取被乘数或零)，同时乘数寄存器的最高位可接受部分积右移出来的一位，因此，完成乘法运算后，A寄存器中保存乘积的高位部分，乘数寄存器中保存乘积低位部分\n    * 例题\n    * 控制流程图\n* 定点补码一位乘法\n    * 表达式\n    * [X·Y]补=[X]补·(－Y0+Y1·2-1+….Yn·2-n)\n    * 注意：此处为双符号位，当最后乘积高位为负数时，需要补充加上[-|x|]补的操作\n\n#### 二进制除法\n* 加减交替法\n    * 当余数为正时，商上1，求下一位商的办法是，余数左移一位，再减去除数;当余数为负时，商上0，求下一位商的办法是，余数左移一位，再加上除数。此方法不用恢复余数，所以又叫不恢复余数法。但若最后一次上商为0而又需得到正确余数，则在这最后扔需恢复余数\n\n#### 浮点数的运算方法\n* 浮点数的加减法运算\n    * 1.对阶操作\n        * 求出△E，再对小的进行移位\n    * 2.尾数的加减运算\n    * 3.规格化操作\n        * 规则简化是符号位和数值最高位不同，即00.1xxxx或11.0xxxx\n    * 4.舍入\n        * 超出表示范围的高位为1舍入\n    * 5.检查阶码是否溢出\n* 浮点数的乘除法运算\n    * 1.浮点数阶码运算(移码)\n        * 牢记公式\n            * [X+Y]移=[X]移+[Y]补\n            * [X–Y]移=[X]移+[–Y]补\n    * 2.按照一位乘或加减交替除运算\n        * 先确定符号，在列式子计算\n\n#### 运算部件\n* ABC寄存器作业\n* 定点运算部件\n* 浮点运算部件\n    * 由阶码运算部件和尾数运算部件组成\n\n#### 数据校验码\n* 码距\n    * 任意两个合法码之间不相同的二进制位数的最小值\n        * 要具有差错能力，则码距>1\n        * 合理增大码距，就能提高发现错误的能力\n* 鉴定方法\n    * 有无差错能力\n    * 是否能合理增大码距\n* 奇偶校验码\n    * 能发现数据代码中一位或奇数个位出错情况的编码\n    * 实现原理是使码距由1增加到2\n        * 步骤1：在字节高位补充一位，即校验位\n        * 步骤2：依据图3.10电路形成原始数据D8..D1的校验位值\n        * 步骤3：将9位数据写入主存\n        * 步骤4：读出该数据时，读取数据D8..D1通过图3.10判定合法性\n    * 电路图\n    * 结论\n        * （1）奇偶校验码只能发现一位或奇位错，且不能确定出错位置\n        * （2）奇偶校验码的码距=2\n* 海明校验码\n    * 海明码位号和校验位位号的关系\n        * Pi的位置在2的i-1次方，但是除了最高位\n    * 笔记\n        * 3,5,7||3,6,7||5,6,7\n    * 电路图\n    * 海明码码距为4\n    * 纠一位错，查一位错\n        * 2∧r≥k+r+1\n    * 纠一位错，查两位错\n        * 2∧(r–1)≥k+r\n* 循环冗余校验码(CRC)\n    * CRC码可以发现并纠正信息存储或传送过程中连续出现的多位错误\n    * CRC码一般是指k位信息码之后拼接r位校验码\n    * 模2运算\n        * 模2加减\n        * 模2乘除\n        * 异或逻辑\n    * CRC的译码与纠错\n        * 更换不同的待测码字可以证明:余数与出错位的对应关系是不变，只与码制和生成多项式有关\n        * 图\n\n### 第四章 主存储器\n#### 概述\n* 主存储器处于全机中心低位，辅助存储器或称为外存储器，通常用来存放主存的副本和当前不在运行的程序和数据。\n\n#### 主存储器的类型\n* 随机存储器RAM\n* 非易失性存储器\n\n#### 主存储器的主要技术指标\n* 主存容量\n    * 64×8等等\n    * 计算机可寻址的最小信息单元是一个存储字\n    * 主存储器存储单元的总数\n* 存取速度\n    * 由存储器存取时间和存储周期表示\n* 存储器存取时间\n    * 启动一次存储器操作(读/写)到完成该操作所经历的时间\n* 存储周期\n    * 连续启动两次独立的存储器操作所间隔的最小时间\n\n#### 主存储器的基本操作\n* CPU通过使用AR(地址寄存器)和DR(数据寄存器)和主存进行数据传送\n* 若AR为K位字长，DR为n位字长，则允许主存包含2∧k个可寻址单元\n* CPU与主存采取异步工作方式，以ready信号表示一次访存操作的结束\n\n#### 读/写存储器\n* 随机存储器(RAM)按存储元件在运行中能否长时间保存信息分为静态存储器和动态存储器\n* 静态存储器，利用触发器保存信息，只要不断电，信息就不会丢失\n    * 电路简图\n    * MOS静态存储结构图\n* 动态存储器，利用MOS电容存储电荷来保存信息，需要不断给电容充电才能使信息来保存信息\n    * 电路简图\n    * 16K×1位动态存储器框图\n    * 再生\n        * 集中式\n        * 分散式\n        * 时间小于或等于2ms\n        * 行读出再生\n\n#### 非易失性半导体存储器\n* 只读存储器ROM\n    * 只读不能写\n* 可编程序的只读存储器PROM\n    * 一次性写入\n* 可擦可编程序的只读存储器EPROM\n    * 可多次写入、读出\n* 可电擦可编程序只读存储器E2PROM\n    * 可多次读出但写入次数有限\n* 快擦除读写存储器Flash Memory\n    * 重复写入、读出\n\n#### 存储器的组成与控制\n* 存储器容量扩展\n    * 位扩展:用多个存储器芯片对字长进行扩充\n    * 字扩展:增加存储器中字的数量，提高存储器的寻址范围\n    * 字位扩展，假设一个存储器的容量为M×N位，若使用L×K位存储器芯片，那么，这个存储器共需要(M/L)×(N/K)个存储器芯片\n\n#### 多体交叉存储器\n* 提高访存速度的方式\n    * 采用高速器件\n    * 采用层次结构\n    * 调整主存结构\n* 计算机中大容量的主存可由多个存储体组成，每个存储体都具有自己的读写线路，地址寄存器和数据寄存器，称为\"存储模块\"。这种多模块存储器可以实现重叠与交叉存取\n* 第i个模块M的地址编号应按下式给出:M×j+i\n* 连续地址分布在相邻的不同模块内，而同一模块内的地址都是不连续的\n\n### 第五章:指令系统\n#### 指令系统的发展\n* 20世纪70年代末人们提出了便于VLSI实现的精简指令系统计算机，简称RISC，同时将指令系统越来越复杂的计算机称为复杂指令系统计算机，简称CISC\n\n#### 指令格式\n* 结构(操作码+地址码)\n    * 操作码\n    * 操作数的地址\n    * 操作结果的存储地址\n    * 下一条指令的地址\n* 地址码\n    * 零地址指令\n    * 一地址指令\n        * 寻址范围  224 = 16 M\n            * 2次访存\n    * 二地址指令\n        * 寻址范围  212 = 4 K\n            * 4 次访存\n    * 三地址指令\n        * 寻址范围  28 = 256\n            * 4 次访存\n    * 多地址指令\n        * 寻址范围  26 = 64\n            * 4 次访存\n* 指令字长\n    * 取决因素\n        * 操作码的长度\n        * 操作数地址的长度\n        * 操作数地址的个数\n    * 指令字长 固定\n        * 指令字长 = 存储字长\n    * 指令字长 可变\n        * 按字节的倍数变化\n    * 对准边界存放\n        * 不连续存放数据\n        * 按字节编址\n            * a.半字地址最低位恒为0\n            *  b.字地址最低两位恒为0\n            * c.双字地址的最低三位恒为0\n        * 减少访存次数，浪费存储空间\n    * 不 对 准 边 界 存 放\n        * 连续存放数据\n        * 节约存储器空间，但增加访存次数，对多字节数据存在调整高 低字节位置的问题\n* 寻址方式\n    * 确定本条指令的数据地址\n    * 下一条要执行的指令地址的方法\n* 指令操作码的扩展技术\n    * 指令操作码的长度决定了指令系统中完成不同操作的指令数\n    * 若某机器的操作码长度固定为K位，则它最多只能有2^K条不同指令\n    * 指令操作码两种格式\n        * 固定格式\n            * 优点:对于简化硬件设计，减少指令译码时间非常有利\n            * 缺点:指令少，浪费地址\n        * 可变格式(分散地放在字的不同字段)\n            * 优点:指令多，缩短指令平均长度，减少程序总位数，增加指令字所能表示的操作信息\n            * 缺点:译码复杂，控制器的设计难度增大\n    * 拓展方法的一个重要原则\n        * 使用频度(即指令在程序中出现概率)高的指令应分配短的操作码，使用频度低的指令相应地分配较长的操作码\n* 指令系统的兼容性\n    * 保持系统向上兼容\n\n#### 精简指令系统计算机（RISC）——用于小型机\n#### 复杂指令系统计算机（CISC）——用于大型机\n\n### 第六章：中央处理器\n#### 计算机工作过程\n* 加电——》产生reset信号——》执行程序——》停机——》停电\n* 产生reset信号的任务\n    * 任务一：使计算机处于初始状态\n    * 任务二：从PC中取出指令地址\n* 控制器作用是协调并控制计算机各部件执行程序的指令序列\n\n#### 控制器的组成\n* 控制器的功能\n    * 取指令\n        * 发出指令地址，取出指令的内容\n    * 分析指令\n        * （1）对操作码译码产生操作相应部件的控制信号\n        * （2）根据寻址方式形成操作数地址\n    * 执行指令\n        * （1）根据分析指令后产生控制信号、操作数地址信号序列，通过CPU及输入输出设备的执行实现每条指令的功能\n        * （2）结果回送存储器\n        * （3）形成下条指令的地址\n    * 控制程序和数据的输入和结果输出\n    * 对异常情况和某些请求的处理\n        * 异常情况的处理：例如算术运算的溢出、数据传送奇偶错\n        * 某些请求的处理\n            * “中断请求”信号\n            * DMA请求信号\n* 控制器的组成\n    * 程序计数器（PC）\n        * 即地址寄存器，用来存放当前正在执行的指令地址或即将要执行的下一条指令地址\n    * 指令寄存器（IR）\n        * 用以存放当前正在执行的指令，以便在指令执行过程中控制完成一条指令的全部功能\n    * 指令译码器或操作码译码器\n        * 对指令寄存器中的操作码进行分析解释，产生相应的控制信号\n    * 脉冲源及启停线路\n        * 脉冲源参数一定评率的脉冲作为整个机器的时钟脉冲，是机器周期和工作脉冲的基准信号，在机器刚加电时，还应产生一个总清信号（reset）\n    * 时序控制信号形成部件\n        * 当程序启动后，在CLK时钟作用下，根据当前正在执行的指令的需要，产生相应的时序控制信号，并根据被控制功能部件的反馈信号调整时序控制信号\n            * 控制存储器\n            * 微指令寄存器\n                * 控制字段+下址\n    *  周期概念\n        * 指令周期\n            * 完成一条指令所需的时间，包括取指令、分析指令、执行指令\n        * 机器周期\n            * 也称为CPU周期，是CPU从内存中读取一个指令的时间，通常等于取指周期\n        * 时钟周期\n            * 称为节拍脉冲或T周期，是基准脉冲信号\n    * 三条假设\n        * 程序是存放在主存中的，当执行完一条指令后才从主存中取下一条指令（非流水线）\n        * 指令的长度是固定的，并限制了寻址方式的多样化\n        * 在程序运行前，程序和数据都已存在主存中\n* 指令执行过程（运算器和控制器配合）\n    * 组成控制器的基本电路\n        * 具有记忆功能的触发器以及由它组成的寄存器，计数器和存储单元\n        * 没有记忆功能的门电路及由它组成的加法器，算术逻辑运算单元（ALU）和各种逻辑电路\n    * 举例\n        * 加法\n            * 取指令——》计算操作数地址——》取操作数——》执行结果并运算送结果\n        * 要能看懂时序图\n            * 哪些指令在对应的时间有效\n        * 条件转移指令\n            * 取指令——》计算地址\n    * 控制器的功能就是按每一条指令的要求产生所需的控制信号\n    * 产生控制信号的方法\n        * 微程序控制\n        * 硬布线控制\n\n#### 微程序控制计算机的基本工作原理\n* 基本概念\n    * 微指令\n        * 在微程序控制的计算机中，将由同时发出的控制信号所执行的一组微操作\n    * 微命令\n        * 将指令分为若干条微指令，按次序执行这些微指令。组成微指令的操作即微命令\n    * 微程序\n        * 计算机的程序由指令序列构成，而计算机每条指令的功能均由微指令序列解释完成，这些微指令序列的集合就叫做微程序\n    * 控制存储器\n        * 微程序一般是存放在专门的存储器中的，由于该存储器主要存放控制命令（信号）与下一条执行的微指令地址（简称下址）\n        * 存储单元内容\n            * （1）微指令的控制信号——控制位\n            * （2）下条微指令的地址——下址字段\n        * 存储芯片：ROM\n    * 执行一条指令实际上就是执行一段存放在控制存储器中的微程序\n* 实现微程序控制的基本原理\n    * 控制信号（23条）\n    * 书上P123页为加法的过程\n    * 微指令格式：控制字段+下址字段\n    * 23个控制位，12个下址位——》容量为4K\n    * 取址微指令的操作对所有指令都是相同的，所以是一条公用的微指令，其下址由操作码译码产生\n* 微程序控制器\n* 时序信号及工作脉冲的形成\n* 停机和停电的区别\n    * 停机\n        * 电压：稳定\n            * 存放内容：保持\n                * 重启PC内容：断点指令地址\n    * 停电\n        * 电压：消失\n            * 存放内容：RAM的内容消失\n                * 重启PC内容：第一条指令地址\n\n#### 微程序设计技术\n* 如何缩短微指令字长\n    * 直接控制法（容量太小）\n        * 编译方法：每一位代表一个控制信号，直接送往相应的控制点\n        * 优点：控制简单\n        * 缺点：微指令字长过大\n    * 字段直接编译法\n        * 选出互斥的微指令\n        * 每个字段都要留出一个代码，表示本段不发出任何指令（000）\n        * 优点：节省微指令的字长\n        * 缺点：增加了额外的硬件开销\n    * 字段间接编译法\n        * 指令之间相互联系的情况\n        * 举例：A为0-7，B为0-3，如果是直接编译——3+2=5，如果是间接编译——3+1=4\n        * 编码方法：在字段直接编译法中，译码输出端要兼由另一字段中的某些微命令配合解释\n        * 优点：减少了微指令长度\n        * 缺点：可能削弱微指令的并行控制能力，同时增加硬件开销\n    * 常熟源字段E(了解)\n* 如何减少微指令长度\n    * 现行微指令/微地址\n        * 现行微指令：当前正在执行的指令\n        * 现行微地址：存放现行微指令的控制器存储单元\n    * 后继微指令/微地址\n        * 后继微指令：下一条要执行的微指令\n        * 后继微地址：存放后继微指令的控制器存储单元\n    * 增量与下址字段结合产生后继微指令的方法\n        * 下址字段分成：转移控制字段BCF和转移地址字段BAF\n            * BCF：控制微程序的转移情况\n            * BAF：转移后的微指令所在地址\n        * BAF有两种情况\n            * 与uPC的位数相等——转移灵活，但增加微指令长度\n            * 比uPC短——转移地址收到限制，但可缩短微指令长度\n        * 优点\n            *  微指令的下址字段很短，仅用于选择输入uPC计数器的某条线路有效\n        * 缺点\n            * 微程序转移不灵活，使得微程序在控存中的物理空间分配有困难\n    * 多路转移方式\n        * 一条微指令存在多个转移分支的情况称为多路转移\n    * 微中断\n        * 1.微中断请求信号是由程序中断请求信号引起的\n        * 2.在完成现行指令的微程序后响应该微中断请求\n        * 3.由硬件产生对应微中断处理程序在控存中的入口地址\n* 如何提高微程序的执行速度\n* 微指令格式\n    * 水平型微指令——直接控制，字段编译（直接、间接）\n        * 特点：在一条微指令中定义并并行执行多个微命令\n    * 垂直型微指令\n        * 特点：不强调实现微指令的并行控制功能\n        * 定义：采用微操作码编译法，由操作码规定微指令的功能\n* 微程序控制存储器\n    * 一般采用ROM存储器\n    * 也可采用RAM，为防止断电后内容消失，则必须开机后将外存中存放的微程序调入控存RAM，然后才能执行程序。\n    * 当前为了能不断扩展指令系统，通常采用ROM+RAM\n* 动态微程序设计\n    * 定义：能根据用户要求改变微程序\n    * 优点：是计算机能更灵活、有效的适应于各种不同的应用目标\n* 控制存储器的操作（P136）\n    * 串行方式\n    * 并行方式——比串行多了微指令寄存器\n        * 微周期=max(取微指令时间,执行微指令时间)\n        * 由于取微指令、执行微指令同时进行，故对于某些后继微地址的产生根据处理结果而定的微指令，则延迟一个微周期再取微指令\n\n#### 硬布线控制的计算机（RISC）——特点快\n* 形成操作控制信号的逻辑框图（P141）\n* 操作控制信号的产生\n    * 取值周期cy1所产生的信号对所有指令都是相同的，即与当前执行的指令无关，逻辑式得到最简单的形式\n    * 通常，同一个控制控制信号在若干条指令的某些周期（或再加上一些条件）中都需要，为此需要把它们组合起来\n    * 同种类型的指令所需要的控制信号大部分是相同的，仅有少量区别\n    * 在确定指令的操作码时（即对具体指令赋予二进制操作码），为了便于逻辑表达式的化简以减少逻辑电路数量，往往给予特别关注\n* 设计组合逻辑电路从而产生需要的控制信号的步骤\n    * 1.实际逻辑问题2.真值表3.公式化简4.逻辑电路图\n* 设计目标\n    * 使用最少的电路元件达到最高的操作速度\n\n#### 流水线工作原理\n* 几点结论\n    * 每条指令的执行时间不变\n    * 每条指令处理结果的时间缩短\n    * 流水线处理速率最高时=流水线处于满载的稳定状态\n    * 流水线处理速率最低时=流水线未满载状态\n    * 为了满足在重叠时间段不同指令的机器周期能够完成指定的操作，将时间段=操作完成的最长时间\n    * 为了保证一个周期内流水线的输入信号不变，相邻时间段之间必须设置锁存器或寄存器\n    * 除了指令执行流水线，还有运算操作流水线\n* 相关问题\n    * 流水线阻塞（P163-6.15）\n        * 数据相关产生\n            * 假设第二条指令需要的操作数是第一条指令运算的结果，那么出现了数据相关\n        * 指令执行时间不同产生\n        * 程序转移的影响\n        * 异常情况响应中断\n\n### 第七章：存储系统\n#### 存储系统的层次结构\n* cache->主存->辅存\n\n#### 高速缓冲存储器\n* cache的工作原理\n    * 局部性原理\n    * 主存地址和cache地址（P166 图7.2）\n    * 块长\n        * 块长一般取一个主存周期所能调出的信息长度（一般为16个字）\n    * cache的容量和块的大小是影响cache的效率的重要因素\n    * 命中率\n        * CPU所要访问的信息是否在cache中的比率，而将所要访问的信息不在cache中的比率称为失败率\n    * 一致性策略\n        * 标志交换方式（写回法）\n        * 通过式写入（写通法）\n        * 写操作直接对主存进行，而不写入cache\n    * cache的存取时间\n        * 平均存取时间=h*tc+(1-h)(tc+tm) \n    * 最好替换策略\n        * 按照被替换的字块是下一段时间最少使用的，由替换部件实现\n* cache组织\n    * 地址映像\n        * 直接映像\n            * cache中许多空的位置被浪费\n            * 主存地址：主存字块标记+cache字块地址+字块内地址\n        * 全相联映像\n            * 成本太高而不能采用\n            * 主存地址：主存字块标记+字块内地址\n            * 优点\n                * 方式灵活，缩小了块发生冲突的概率\n            * 缺点\n                * 增加了标识位位数\n                * 增加了寻找主存块在cache中对应块的时间\n        * 组相联映像\n            * 直接映像和全相联映像的折衷\n            * 主存地址：主存字块标记+组地址+块内地址\n\n#### 虚拟存储器\n* 存储管理部件（MMU）\n    * 现代计算机一般都有辅助存储器，但具有辅存的存储系统不一定是虚拟存储系统\n    * 虚拟存储系统的特点\n        * 允许用户程序用比主存大的多的空间来访问主存\n        * 每次访存都要进行虚实地址的转换\n\n### 第八章：辅助存储器\n#### 半导体存储器可随机访问任一单元，而辅助存储器一般为串行访问存储器\n#### 辅助存储器的种类\n* 磁表面存储器\n    * 数字式磁记录\n        * 硬盘、软盘和磁带\n    * 模拟式磁记录\n        * 录音、录像设备\n* 光存储器\n    * 光盘\n\n#### 串行存储器\n* 顺序存取存储器\n* 直接存取存储器\n\n#### 辅助存储器的技术指标\n* 存储密度\n    * 定义：单位长度或单位面积磁层表面磁层所存储的二进制信息量\n    * 道密度\n        * 沿磁盘半径方向单位长度的磁道数称为道密度，单位为道/英寸tpi或道/毫米tpmm\n    * 位密度或线密度\n        * 单位长度磁道所能记录二进制信息的位数叫位密度或线密度，单位为位/英寸bpi或位/毫米bpmm\n    * 每个磁道所存储的信息量是一样的\n* 存储容量\n    * C = n × k × s\n* 寻址时间\n    * 平均寻址时间Ta=平均找道时间Ts+平均等待时间Tw\n    * 辅存的速度\n        * 寻址时间\n        * 磁头读写时间\n* 数据传输率\n    * Dr  = D × V\n* 误码率\n* 价格\n\n#### 硬磁盘存储器的类型\n* (1) 固定磁头和移动磁头\n* (2) 可换盘和固定盘\n\n#### 磁盘存储器\n* 温彻斯特磁盘简称温盘\n* 磁盘存储器由驱动器（HDD），控制器（HDC）和盘片组成\n* 最外面的同心圆叫0磁道，最里面的同心圆假设称为n磁道\n* 驱动器的定位驱动系统实现快速精准的磁头定位\n* 主轴系统的作用是带动盘片按额定转速稳定旋转\n* 数据控制系统的作用是控制数据的写入和读出，包括寻址，磁头旋转，写电流控制，读出放大，数据分离\n* 磁盘控制器有两个方向的接口\n    * 与主机的接口\n    * 与驱动器（设备）的接口\n\n#### 光盘\n* 采用光存储技术\n    * 利用激光写入和读出\n    * 第一代光存储技术\n        * 采用非磁性介质\n            * 不可擦写\n    * 第二代光存储技术\n        * 采用磁性介质\n            * 可擦写\n* 光盘的存储原理\n    * 只读型和只写一次型\n        * 热作用（物理或化学变化）\n    * 可擦写光盘\n        * 热磁效应\n\n### 第九/十章：输出输出（I/O）设备/系统\n#### 设备控制器（I/O）的基本功能\n* 实现主机和外部设备之间的数据传送\n* 实现数据缓冲，以达到主机同外部设备之间的速度匹配\n* 接受主机的命令，提供设备接口的设备，并按照主机的命令控制设备\n\n#### I/O 编址方式\n* (1) 统一编址：用取数、存数指令\n* (2) 不统一编址：有专门的 I/O 指令\n\n#### I/O 与主机的连接方式\n* 辐射式连接\n    * 每台设备都配有一套\n    * 控制线路和一组信号线\n    * 不便于增删设备\n* 总线连接\n    * 便于增删设备\n\n#### I/O设备\n* 人机交互设备\n    * 键盘、鼠标等\n* 计算机信息的驻留设备\n    * 硬盘、光盘等\n* 机——机通信设备\n    * MODEN等\n\n#### 为什么要设置接口？\n* 1. 实现设备的选择\n* 2. 实现数据缓冲达到速度匹配\n* 3. 实现数据串     并格式转换\n* 4. 实现电平转换\n* 5. 传送控制命令\n* 6. 反映设备的状态\n    * （“忙”、“就绪”、“中断请求”）\n\n#### 中断服务程序的流程\n* (1) 保护现场\n    * 程序断点的保护\n    * 寄存器内容的保护\n* (2) 中断服务\n    * 对不同的 I/O 设备具有不同内容的设备服务\n* (3) 恢复现场\n    * 出栈指令\n* (4) 中断返回\n    * 中断返回指令\n\n#### 单重中断和多重中断\n* 单重 中断\n    * 不允许中断 现行的 中断服务程序\n* 多重 中断\n    * 允许级别更高 的中断源\n    * 中断 现行的 中断服务程序\n\n#### DMA 方式\n* 主存和 I/O 之间有一条直接数据通道\n* CPU 和 I/O 并行工作\n* DMA 的三种工作方式\n    * (1) CPU暂停方式\n    * (2) CPU周期窃取方式\n    * (3)直接访问存储器\n* DMA 接口功能\n    * (1) 向 CPU 申请 DMA 传送\n    * (2) 处理总线 控制权的转交\n    * (3) 管理 系统总线、控制 数据传送\n    * (4) 确定 数据传送的 首地址和长度，修正 传送过程中的数据地址和长度\n    * (5) DMA 传送结束时，给出操作完成信号\n* DMA 传送过程\n    * 预处理、数据传送、后处理\n\n#### 外设接口\n* 设备与主机相连时，必须按照规定的物理互连特性、电气特性等进行连接，这些特性的技术规范称为接口标准\n\n### 总结\n* 整体架构图如下\n\n![计算机组成原理思维导图](./../assets/计算机组成.png)\n","slug":"计算机组成原理","published":1,"updated":"2020-03-27T03:53:19.188Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck89wn30t0002i7rh0o9haua1","content":"<h3 id=\"第一章-计算机系统概论\"><a href=\"#第一章-计算机系统概论\" class=\"headerlink\" title=\"第一章 计算机系统概论\"></a>第一章 计算机系统概论</h3><h4 id=\"冯诺依曼型计算机特点\"><a href=\"#冯诺依曼型计算机特点\" class=\"headerlink\" title=\"冯诺依曼型计算机特点\"></a>冯诺依曼型计算机特点</h4><ul>\n<li>1.计算机由运算器，控制器，存储器，输入和输出设备5部分组成</li>\n<li>2.采用存储程序的方式，程序和数据放在同一个存储器中，并以二进制表示。</li>\n<li>3.指令由操作码和地址码组成</li>\n<li>4.指令在存储器中按执行顺序存放，由指令计数器(即程序计数器PC)指明要执行的指令所在的储存单元地址，一般按顺序递增，但可按运算结果或外界条件而改变</li>\n<li>5.机器以运算器为中心，输入输出设备与存储器间的数据传送都通过运算器</li>\n</ul>\n<h4 id=\"区别以运算器还是存储器为中心的计算机\"><a href=\"#区别以运算器还是存储器为中心的计算机\" class=\"headerlink\" title=\"区别以运算器还是存储器为中心的计算机\"></a>区别以运算器还是存储器为中心的计算机</h4><ul>\n<li>看输入设备能否直接与存储器相连，是的话就是以存储器为中心</li>\n</ul>\n<h3 id=\"第二章-计算机系统\"><a href=\"#第二章-计算机系统\" class=\"headerlink\" title=\"第二章 计算机系统\"></a>第二章 计算机系统</h3><h4 id=\"组成结构\"><a href=\"#组成结构\" class=\"headerlink\" title=\"组成结构\"></a>组成结构</h4><ul>\n<li>硬件<ul>\n<li>结构<ul>\n<li>主机<ul>\n<li>cpu<ul>\n<li>ALU运算器</li>\n<li>CU控制器</li>\n</ul>\n</li>\n<li>存储器<ul>\n<li>主存</li>\n<li>辅存</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>I/O<ul>\n<li>输入设备</li>\n<li>输出设备</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>主要技术指标<ul>\n<li>机器字长<ul>\n<li>CPU一次能处理的数据位数</li>\n</ul>\n</li>\n<li>存储容量<ul>\n<li>存储容量＝存储单元个数×存储字长</li>\n</ul>\n</li>\n<li>运算速度<ul>\n<li>单位时间执行指令的平均条数，MIPS</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>软件<ul>\n<li>系统软件<ul>\n<li>用来管理整个计算机系统 <ul>\n<li>语言处理程序</li>\n<li>操作系统</li>\n<li>服务性程序</li>\n<li>数据库管理系统</li>\n<li>网络软件</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>应用软件<ul>\n<li>按任务需要编制成的各种程序</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"第三章-运算方法和运算部件\"><a href=\"#第三章-运算方法和运算部件\" class=\"headerlink\" title=\"第三章 运算方法和运算部件\"></a>第三章 运算方法和运算部件</h3><h4 id=\"数据的表示方法和转换\"><a href=\"#数据的表示方法和转换\" class=\"headerlink\" title=\"数据的表示方法和转换\"></a>数据的表示方法和转换</h4><ul>\n<li>机器数正0负1<ul>\n<li>符号数值化的带符号二进制数，称为机器数。</li>\n</ul>\n</li>\n<li>真值:符号位加绝对值</li>\n<li>余三码:在8421码的基础上，把每个编码都加上0011<ul>\n<li>当两个余三码想加不产生进位时，应从结果中减去0011;产生进位时，应将进位信号送入高位，本位加0011</li>\n</ul>\n</li>\n<li>格雷码:任何两个相邻编码只有1个二进制位不同，而其余3个二进制位相同</li>\n<li>8421码<ul>\n<li>权值从高到低为8、4、2、1<ul>\n<li>算术运算时，需对运算结果进行修正。方法：如果小于、等于(1001)2，不需要修正；否则加6修正</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"带符号的二进制数据在计算机中的表示方法及加减法运算\"><a href=\"#带符号的二进制数据在计算机中的表示方法及加减法运算\" class=\"headerlink\" title=\"带符号的二进制数据在计算机中的表示方法及加减法运算\"></a>带符号的二进制数据在计算机中的表示方法及加减法运算</h4><ul>\n<li>原码<ul>\n<li>定义<ul>\n<li>最高位为符号位0/1+数值的绝对值形式</li>\n</ul>\n</li>\n<li>特点<ul>\n<li>（1）值+0，-0的原码分别为00000、10000，形式不唯一；</li>\n<li>（2）正数的原码码值随着真值增长而增长<ul>\n<li>负数的原码码值随着真值增长而减少</li>\n</ul>\n</li>\n<li>（3）n+1位原码表示定点整数范围－(2n－1)——2n－1<ul>\n<li>n+1位原码表示定点小数范围 －(1－2－n)——1－2－n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>运算<ul>\n<li>绝对值相加减，由数值大小决定运算结果符号</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>补码<ul>\n<li>定义，特点和运算<ul>\n<li>运算:<br>结果不超过机器所能表示范围时，[X+Y]补=[X]补+[Y]补<br>减法运算:[X–Y]补=[X+(–Y)]补=[X]补+[–Y]补</li>\n<li>结论<ul>\n<li>负数的补数＝模＋负数</li>\n<li>互为补数的绝对值相加＝模</li>\n<li>在补数中，减法运算即加法运算</li>\n</ul>\n</li>\n<li>定义<ul>\n<li>定义法，即[X]补=2·符号位+X     （MOD  2）</li>\n<li>X为正数，则符号0+X的绝对值；X为负数，则X的绝对值取反+1。</li>\n</ul>\n</li>\n<li>特点<ul>\n<li>数值零的补码表示唯一</li>\n<li>正数补码码值随着真值增大而增大，负数补码码值随着真值增大而增大</li>\n<li>n+1位补码所表示定点整数范围－ 2n——2n－1，n+1位补码所表示定点小数范围－1——1－2－n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>加法运算逻辑事例<ul>\n<li>过程</li>\n<li>加减法运算的溢出处理<ul>\n<li>溢出定义<ul>\n<li>当运算结果超出机器数所能表示的范围</li>\n</ul>\n</li>\n<li>加减中，可能产生溢出的情况<ul>\n<li>可能出现溢出<ul>\n<li>同号数相加</li>\n<li>异号数相减</li>\n</ul>\n</li>\n<li>不可能出现溢出<ul>\n<li>异号数相加</li>\n<li>同号数相减</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>判断溢出的方法<ul>\n<li>法一：当符号相同两数相加，结果符号和加数（或被加数）不相同，则溢出<ul>\n<li>fa,fb表示两操作数（A,B）的符号位,fs为结果的符号位</li>\n</ul>\n</li>\n<li>法二：任意符号相加，如果C=Cf，则结果正确，否则溢出；<ul>\n<li>C为数值最高位的进位，Cf为符号位的进位</li>\n</ul>\n</li>\n<li>法三：采用双符号相加，如果fs1=fs2，则结果正确，否则溢出；<ul>\n<li>运算结果的符号位为fs2；</li>\n<li>多符号位的补码，叫做变形补码；</li>\n<li>如果采用双符号位，当数为小数时，模m=4;当数为整数时，模m=2的n+2次方</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>反码<ul>\n<li>定义<ul>\n<li>a.定义法，即[X]反=(2-2-n)·符号位+X   (MOD  2-2-n)</li>\n<li>b.X是正数，[X]反=[X]原；X是负数，符号+数值取反。</li>\n</ul>\n</li>\n<li>特点<ul>\n<li>数值零的反码表示不唯一</li>\n<li>正数反码码值随着真值增大而增大，负数反码码值随着真值增大而增大</li>\n<li>n+1位反码所表示定点整数范围－ (2n－1)——2n－1，n+1位反码所表示定点小数范围－(1－2－n)——1－2－n</li>\n</ul>\n</li>\n<li>加减运算特点<ul>\n<li>在机器数范围内，反码运算满足[X+Y]反=[X]反+[Y]反，[X－Y]反=[X]反+[－Y]反</li>\n</ul>\n</li>\n<li>反码运算在最高位有进位时，要在最低位+1，此时要多进行一次加法运算，增加了复杂性，又影响了速度，因此很少采用</li>\n<li>由于反码运算是以2-2的-次方为模，所以，当最高位有进位而丢掉进位(即2)时，要在最低位+/-1</li>\n</ul>\n</li>\n<li>移码<ul>\n<li>由来及窍门<ul>\n<li>为了从码值直接判断对应真值的大小，所以引进移码</li>\n<li>[X]补的符号位取反，即得[X]移 </li>\n</ul>\n</li>\n<li>特点<ul>\n<li>最高位是符号位，1表示正，0表示负</li>\n<li>数据0有唯一的编码</li>\n<li>移码码值随着真值增大而增大</li>\n<li>n+1位移码所表示定点整数范围－ 2n——2n－1， n+1位移码所表示定点小数范围－1——1－2－n</li>\n<li>计算机中，移码常用于表示阶码，故只执行加、减运算</li>\n<li>计算机中，移码运算公式需要对结果进行修正</li>\n</ul>\n</li>\n<li>浮点数的阶码运算<ul>\n<li>移码定义:[X]移=2的n次方+X</li>\n<li>补码定义:[X]补=2的n+1次方+Y</li>\n<li>阶码求和公式<ul>\n<li>[X]移+[Y]补=[X+Y]移  mod2的n+1次方</li>\n<li>[X]移+[-Y]补=[X-Y]移</li>\n<li>判溢方法<ul>\n<li>双符号位参加运算，最高符号位恒置0</li>\n<li>当结果最高符号位=1则溢出<ul>\n<li>低位符号=0，则上溢；低位符号=1，则下溢；</li>\n</ul>\n</li>\n<li>当结果最高符号位=0则未溢出<ul>\n<li>低位符号=0，负数；低位符号=1，正数</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>说明:如果阶码运算的结果溢出，上述条件不成立。此时，使用双符号位的阶码加法器，并规定移码的第二个符号位，即最高符号位恒用0参加加减运算，则溢出条件是结果的最高符号位为1。此时低位符号为0时，表明结果上溢;为1时，表明结果下溢。当最高符号位为0时，表明没有溢出，低位符号位为1，表明结果为正;为0时表明结果为负。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>补，反，原，移码的相互转换<ul>\n<li>反码-》原码<ul>\n<li>方法：符号位不变，正数不变，负数数值部分取反。</li>\n</ul>\n</li>\n<li>补码-》原码<ul>\n<li>方法1：正数不变，负数数值部分求反加1。</li>\n<li>方法2：串行转换<ul>\n<li>从最后开始数，遇到第一个“1”，除第一个“1”不变，前面数字分别取反</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>移码-》原码<ul>\n<li>方法：移码转换为补码，再转换为原码</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>数据从补码和反码表示形式转换成原码<ul>\n<li>自低位开始转换，从低位向高位，在遇到第一个1之前，保存各位的0不变，第一个1也不变，以后得各位按位取反，最后保持符号位不变，经历一遍后，即可得到补码</li>\n</ul>\n</li>\n<li>定点数和浮点数<ul>\n<li>定点数<ul>\n<li>小数点固定在某个位置上的数据<ul>\n<li>32位定点小数、定点整数补码的范围<ul>\n<li>32位定点小数-1～1-2-31</li>\n<li>32位定点整数-231～231-1</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>浮点数<ul>\n<li>根据IEEE754国际标准，常用的浮点数有两种格式<ul>\n<li>Nmax=Mmax<em>2的Emax Nmin=Mmin</em>2的Emax</li>\n<li>单精度(32位)=8位阶码+24位尾数<ul>\n<li>单精度浮点数(32位)，阶码8位(含一位符号位)，尾数24(含一位符号位)，取值范围:-2的127次方～(1-2的-23次方)*2的127次方</li>\n</ul>\n</li>\n<li>双精度(64位)=11位阶码+53位尾数<ul>\n<li>双精度浮点数(64位)，阶码11位(含一位符号位)，尾数53位(含一位符号位)，取值范围:-2的1023次方～(1-2的-52次方)*2的1023次方</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>为了保证数据精度，尾数通常用规格化形式表示:当R=2，且尾数值不为0时，其绝对值应大于或等于(0.5)10<ul>\n<li>左规</li>\n<li>右规</li>\n</ul>\n</li>\n<li>小数点位置可以浮动的数据。</li>\n<li>表示形式：N = M · RE</li>\n<li>计算机中存储形式<ul>\n<li>Ms+Es+E(n位)+M(m位)<ul>\n<li>阶码E，一般为整数，用补码或者移码表示；</li>\n<li>尾数M，一般为规格化的定点小数，用补码表示；</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"二进制乘法运算\"><a href=\"#二进制乘法运算\" class=\"headerlink\" title=\"二进制乘法运算\"></a>二进制乘法运算</h4><ul>\n<li>定点原码一位乘法<ul>\n<li>两个原码数相乘，其乘积的符号为相乘两数符号的异或值，数值则为两数绝对值之积<ul>\n<li>[X·Y]原=[X]原·[Y]原=(X0⊕Y0)|(X1X2..Xn) · (Y1Y2..Yn)</li>\n</ul>\n</li>\n<li>几点结论<ul>\n<li>从低到高根据乘数每位0、1决定相加被乘数还是0；</li>\n<li>相加数每次左移，最后一起求积；</li>\n<li>符号由异或决定</li>\n</ul>\n</li>\n<li>表达式</li>\n<li>电路框架</li>\n<li>修正<ul>\n<li>1.在机器内多个数据一般不能同时相加，一次加法操作只能求出两数之和，因此每每求得一个相加数，就与上次部分积相加</li>\n<li>2.人工计算时，相加数逐次向左偏移一位，由于最后的乘积位数是乘数(或被乘数)的两倍，如按此算法在机器中运算，加法器也需增到两倍。观察计算过程很容易发现，在求本次部分积时，前一次部分积的最低位不再参与运算，因此可将其右移一位，相加数可直送而不必偏移，于是用N位加法器就可实现两个N位数相乘</li>\n<li>部分积右移时，乘数寄存器同时右移一位，这样可以用乘数寄存器的最低位来控制相加数(取被乘数或零)，同时乘数寄存器的最高位可接受部分积右移出来的一位，因此，完成乘法运算后，A寄存器中保存乘积的高位部分，乘数寄存器中保存乘积低位部分</li>\n</ul>\n</li>\n<li>例题</li>\n<li>控制流程图</li>\n</ul>\n</li>\n<li>定点补码一位乘法<ul>\n<li>表达式</li>\n<li>[X·Y]补=[X]补·(－Y0+Y1·2-1+….Yn·2-n)</li>\n<li>注意：此处为双符号位，当最后乘积高位为负数时，需要补充加上[-|x|]补的操作</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"二进制除法\"><a href=\"#二进制除法\" class=\"headerlink\" title=\"二进制除法\"></a>二进制除法</h4><ul>\n<li>加减交替法<ul>\n<li>当余数为正时，商上1，求下一位商的办法是，余数左移一位，再减去除数;当余数为负时，商上0，求下一位商的办法是，余数左移一位，再加上除数。此方法不用恢复余数，所以又叫不恢复余数法。但若最后一次上商为0而又需得到正确余数，则在这最后扔需恢复余数</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"浮点数的运算方法\"><a href=\"#浮点数的运算方法\" class=\"headerlink\" title=\"浮点数的运算方法\"></a>浮点数的运算方法</h4><ul>\n<li>浮点数的加减法运算<ul>\n<li>1.对阶操作<ul>\n<li>求出△E，再对小的进行移位</li>\n</ul>\n</li>\n<li>2.尾数的加减运算</li>\n<li>3.规格化操作<ul>\n<li>规则简化是符号位和数值最高位不同，即00.1xxxx或11.0xxxx</li>\n</ul>\n</li>\n<li>4.舍入<ul>\n<li>超出表示范围的高位为1舍入</li>\n</ul>\n</li>\n<li>5.检查阶码是否溢出</li>\n</ul>\n</li>\n<li>浮点数的乘除法运算<ul>\n<li>1.浮点数阶码运算(移码)<ul>\n<li>牢记公式<ul>\n<li>[X+Y]移=[X]移+[Y]补</li>\n<li>[X–Y]移=[X]移+[–Y]补</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>2.按照一位乘或加减交替除运算<ul>\n<li>先确定符号，在列式子计算</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"运算部件\"><a href=\"#运算部件\" class=\"headerlink\" title=\"运算部件\"></a>运算部件</h4><ul>\n<li>ABC寄存器作业</li>\n<li>定点运算部件</li>\n<li>浮点运算部件<ul>\n<li>由阶码运算部件和尾数运算部件组成</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"数据校验码\"><a href=\"#数据校验码\" class=\"headerlink\" title=\"数据校验码\"></a>数据校验码</h4><ul>\n<li>码距<ul>\n<li>任意两个合法码之间不相同的二进制位数的最小值<ul>\n<li>要具有差错能力，则码距&gt;1</li>\n<li>合理增大码距，就能提高发现错误的能力</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>鉴定方法<ul>\n<li>有无差错能力</li>\n<li>是否能合理增大码距</li>\n</ul>\n</li>\n<li>奇偶校验码<ul>\n<li>能发现数据代码中一位或奇数个位出错情况的编码</li>\n<li>实现原理是使码距由1增加到2<ul>\n<li>步骤1：在字节高位补充一位，即校验位</li>\n<li>步骤2：依据图3.10电路形成原始数据D8..D1的校验位值</li>\n<li>步骤3：将9位数据写入主存</li>\n<li>步骤4：读出该数据时，读取数据D8..D1通过图3.10判定合法性</li>\n</ul>\n</li>\n<li>电路图</li>\n<li>结论<ul>\n<li>（1）奇偶校验码只能发现一位或奇位错，且不能确定出错位置</li>\n<li>（2）奇偶校验码的码距=2</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>海明校验码<ul>\n<li>海明码位号和校验位位号的关系<ul>\n<li>Pi的位置在2的i-1次方，但是除了最高位</li>\n</ul>\n</li>\n<li>笔记<ul>\n<li>3,5,7||3,6,7||5,6,7</li>\n</ul>\n</li>\n<li>电路图</li>\n<li>海明码码距为4</li>\n<li>纠一位错，查一位错<ul>\n<li>2∧r≥k+r+1</li>\n</ul>\n</li>\n<li>纠一位错，查两位错<ul>\n<li>2∧(r–1)≥k+r</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>循环冗余校验码(CRC)<ul>\n<li>CRC码可以发现并纠正信息存储或传送过程中连续出现的多位错误</li>\n<li>CRC码一般是指k位信息码之后拼接r位校验码</li>\n<li>模2运算<ul>\n<li>模2加减</li>\n<li>模2乘除</li>\n<li>异或逻辑</li>\n</ul>\n</li>\n<li>CRC的译码与纠错<ul>\n<li>更换不同的待测码字可以证明:余数与出错位的对应关系是不变，只与码制和生成多项式有关</li>\n<li>图</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"第四章-主存储器\"><a href=\"#第四章-主存储器\" class=\"headerlink\" title=\"第四章 主存储器\"></a>第四章 主存储器</h3><h4 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h4><ul>\n<li>主存储器处于全机中心低位，辅助存储器或称为外存储器，通常用来存放主存的副本和当前不在运行的程序和数据。</li>\n</ul>\n<h4 id=\"主存储器的类型\"><a href=\"#主存储器的类型\" class=\"headerlink\" title=\"主存储器的类型\"></a>主存储器的类型</h4><ul>\n<li>随机存储器RAM</li>\n<li>非易失性存储器</li>\n</ul>\n<h4 id=\"主存储器的主要技术指标\"><a href=\"#主存储器的主要技术指标\" class=\"headerlink\" title=\"主存储器的主要技术指标\"></a>主存储器的主要技术指标</h4><ul>\n<li>主存容量<ul>\n<li>64×8等等</li>\n<li>计算机可寻址的最小信息单元是一个存储字</li>\n<li>主存储器存储单元的总数</li>\n</ul>\n</li>\n<li>存取速度<ul>\n<li>由存储器存取时间和存储周期表示</li>\n</ul>\n</li>\n<li>存储器存取时间<ul>\n<li>启动一次存储器操作(读/写)到完成该操作所经历的时间</li>\n</ul>\n</li>\n<li>存储周期<ul>\n<li>连续启动两次独立的存储器操作所间隔的最小时间</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"主存储器的基本操作\"><a href=\"#主存储器的基本操作\" class=\"headerlink\" title=\"主存储器的基本操作\"></a>主存储器的基本操作</h4><ul>\n<li>CPU通过使用AR(地址寄存器)和DR(数据寄存器)和主存进行数据传送</li>\n<li>若AR为K位字长，DR为n位字长，则允许主存包含2∧k个可寻址单元</li>\n<li>CPU与主存采取异步工作方式，以ready信号表示一次访存操作的结束</li>\n</ul>\n<h4 id=\"读-写存储器\"><a href=\"#读-写存储器\" class=\"headerlink\" title=\"读/写存储器\"></a>读/写存储器</h4><ul>\n<li>随机存储器(RAM)按存储元件在运行中能否长时间保存信息分为静态存储器和动态存储器</li>\n<li>静态存储器，利用触发器保存信息，只要不断电，信息就不会丢失<ul>\n<li>电路简图</li>\n<li>MOS静态存储结构图</li>\n</ul>\n</li>\n<li>动态存储器，利用MOS电容存储电荷来保存信息，需要不断给电容充电才能使信息来保存信息<ul>\n<li>电路简图</li>\n<li>16K×1位动态存储器框图</li>\n<li>再生<ul>\n<li>集中式</li>\n<li>分散式</li>\n<li>时间小于或等于2ms</li>\n<li>行读出再生</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"非易失性半导体存储器\"><a href=\"#非易失性半导体存储器\" class=\"headerlink\" title=\"非易失性半导体存储器\"></a>非易失性半导体存储器</h4><ul>\n<li>只读存储器ROM<ul>\n<li>只读不能写</li>\n</ul>\n</li>\n<li>可编程序的只读存储器PROM<ul>\n<li>一次性写入</li>\n</ul>\n</li>\n<li>可擦可编程序的只读存储器EPROM<ul>\n<li>可多次写入、读出</li>\n</ul>\n</li>\n<li>可电擦可编程序只读存储器E2PROM<ul>\n<li>可多次读出但写入次数有限</li>\n</ul>\n</li>\n<li>快擦除读写存储器Flash Memory<ul>\n<li>重复写入、读出</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"存储器的组成与控制\"><a href=\"#存储器的组成与控制\" class=\"headerlink\" title=\"存储器的组成与控制\"></a>存储器的组成与控制</h4><ul>\n<li>存储器容量扩展<ul>\n<li>位扩展:用多个存储器芯片对字长进行扩充</li>\n<li>字扩展:增加存储器中字的数量，提高存储器的寻址范围</li>\n<li>字位扩展，假设一个存储器的容量为M×N位，若使用L×K位存储器芯片，那么，这个存储器共需要(M/L)×(N/K)个存储器芯片</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"多体交叉存储器\"><a href=\"#多体交叉存储器\" class=\"headerlink\" title=\"多体交叉存储器\"></a>多体交叉存储器</h4><ul>\n<li>提高访存速度的方式<ul>\n<li>采用高速器件</li>\n<li>采用层次结构</li>\n<li>调整主存结构</li>\n</ul>\n</li>\n<li>计算机中大容量的主存可由多个存储体组成，每个存储体都具有自己的读写线路，地址寄存器和数据寄存器，称为”存储模块”。这种多模块存储器可以实现重叠与交叉存取</li>\n<li>第i个模块M的地址编号应按下式给出:M×j+i</li>\n<li>连续地址分布在相邻的不同模块内，而同一模块内的地址都是不连续的</li>\n</ul>\n<h3 id=\"第五章-指令系统\"><a href=\"#第五章-指令系统\" class=\"headerlink\" title=\"第五章:指令系统\"></a>第五章:指令系统</h3><h4 id=\"指令系统的发展\"><a href=\"#指令系统的发展\" class=\"headerlink\" title=\"指令系统的发展\"></a>指令系统的发展</h4><ul>\n<li>20世纪70年代末人们提出了便于VLSI实现的精简指令系统计算机，简称RISC，同时将指令系统越来越复杂的计算机称为复杂指令系统计算机，简称CISC</li>\n</ul>\n<h4 id=\"指令格式\"><a href=\"#指令格式\" class=\"headerlink\" title=\"指令格式\"></a>指令格式</h4><ul>\n<li>结构(操作码+地址码)<ul>\n<li>操作码</li>\n<li>操作数的地址</li>\n<li>操作结果的存储地址</li>\n<li>下一条指令的地址</li>\n</ul>\n</li>\n<li>地址码<ul>\n<li>零地址指令</li>\n<li>一地址指令<ul>\n<li>寻址范围  224 = 16 M<ul>\n<li>2次访存</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>二地址指令<ul>\n<li>寻址范围  212 = 4 K<ul>\n<li>4 次访存</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>三地址指令<ul>\n<li>寻址范围  28 = 256<ul>\n<li>4 次访存</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>多地址指令<ul>\n<li>寻址范围  26 = 64<ul>\n<li>4 次访存</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>指令字长<ul>\n<li>取决因素<ul>\n<li>操作码的长度</li>\n<li>操作数地址的长度</li>\n<li>操作数地址的个数</li>\n</ul>\n</li>\n<li>指令字长 固定<ul>\n<li>指令字长 = 存储字长</li>\n</ul>\n</li>\n<li>指令字长 可变<ul>\n<li>按字节的倍数变化</li>\n</ul>\n</li>\n<li>对准边界存放<ul>\n<li>不连续存放数据</li>\n<li>按字节编址<ul>\n<li>a.半字地址最低位恒为0</li>\n<li>b.字地址最低两位恒为0</li>\n<li>c.双字地址的最低三位恒为0</li>\n</ul>\n</li>\n<li>减少访存次数，浪费存储空间</li>\n</ul>\n</li>\n<li>不 对 准 边 界 存 放<ul>\n<li>连续存放数据</li>\n<li>节约存储器空间，但增加访存次数，对多字节数据存在调整高 低字节位置的问题</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>寻址方式<ul>\n<li>确定本条指令的数据地址</li>\n<li>下一条要执行的指令地址的方法</li>\n</ul>\n</li>\n<li>指令操作码的扩展技术<ul>\n<li>指令操作码的长度决定了指令系统中完成不同操作的指令数</li>\n<li>若某机器的操作码长度固定为K位，则它最多只能有2^K条不同指令</li>\n<li>指令操作码两种格式<ul>\n<li>固定格式<ul>\n<li>优点:对于简化硬件设计，减少指令译码时间非常有利</li>\n<li>缺点:指令少，浪费地址</li>\n</ul>\n</li>\n<li>可变格式(分散地放在字的不同字段)<ul>\n<li>优点:指令多，缩短指令平均长度，减少程序总位数，增加指令字所能表示的操作信息</li>\n<li>缺点:译码复杂，控制器的设计难度增大</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>拓展方法的一个重要原则<ul>\n<li>使用频度(即指令在程序中出现概率)高的指令应分配短的操作码，使用频度低的指令相应地分配较长的操作码</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>指令系统的兼容性<ul>\n<li>保持系统向上兼容</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"精简指令系统计算机（RISC）——用于小型机\"><a href=\"#精简指令系统计算机（RISC）——用于小型机\" class=\"headerlink\" title=\"精简指令系统计算机（RISC）——用于小型机\"></a>精简指令系统计算机（RISC）——用于小型机</h4><h4 id=\"复杂指令系统计算机（CISC）——用于大型机\"><a href=\"#复杂指令系统计算机（CISC）——用于大型机\" class=\"headerlink\" title=\"复杂指令系统计算机（CISC）——用于大型机\"></a>复杂指令系统计算机（CISC）——用于大型机</h4><h3 id=\"第六章：中央处理器\"><a href=\"#第六章：中央处理器\" class=\"headerlink\" title=\"第六章：中央处理器\"></a>第六章：中央处理器</h3><h4 id=\"计算机工作过程\"><a href=\"#计算机工作过程\" class=\"headerlink\" title=\"计算机工作过程\"></a>计算机工作过程</h4><ul>\n<li>加电——》产生reset信号——》执行程序——》停机——》停电</li>\n<li>产生reset信号的任务<ul>\n<li>任务一：使计算机处于初始状态</li>\n<li>任务二：从PC中取出指令地址</li>\n</ul>\n</li>\n<li>控制器作用是协调并控制计算机各部件执行程序的指令序列</li>\n</ul>\n<h4 id=\"控制器的组成\"><a href=\"#控制器的组成\" class=\"headerlink\" title=\"控制器的组成\"></a>控制器的组成</h4><ul>\n<li>控制器的功能<ul>\n<li>取指令<ul>\n<li>发出指令地址，取出指令的内容</li>\n</ul>\n</li>\n<li>分析指令<ul>\n<li>（1）对操作码译码产生操作相应部件的控制信号</li>\n<li>（2）根据寻址方式形成操作数地址</li>\n</ul>\n</li>\n<li>执行指令<ul>\n<li>（1）根据分析指令后产生控制信号、操作数地址信号序列，通过CPU及输入输出设备的执行实现每条指令的功能</li>\n<li>（2）结果回送存储器</li>\n<li>（3）形成下条指令的地址</li>\n</ul>\n</li>\n<li>控制程序和数据的输入和结果输出</li>\n<li>对异常情况和某些请求的处理<ul>\n<li>异常情况的处理：例如算术运算的溢出、数据传送奇偶错</li>\n<li>某些请求的处理<ul>\n<li>“中断请求”信号</li>\n<li>DMA请求信号</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>控制器的组成<ul>\n<li>程序计数器（PC）<ul>\n<li>即地址寄存器，用来存放当前正在执行的指令地址或即将要执行的下一条指令地址</li>\n</ul>\n</li>\n<li>指令寄存器（IR）<ul>\n<li>用以存放当前正在执行的指令，以便在指令执行过程中控制完成一条指令的全部功能</li>\n</ul>\n</li>\n<li>指令译码器或操作码译码器<ul>\n<li>对指令寄存器中的操作码进行分析解释，产生相应的控制信号</li>\n</ul>\n</li>\n<li>脉冲源及启停线路<ul>\n<li>脉冲源参数一定评率的脉冲作为整个机器的时钟脉冲，是机器周期和工作脉冲的基准信号，在机器刚加电时，还应产生一个总清信号（reset）</li>\n</ul>\n</li>\n<li>时序控制信号形成部件<ul>\n<li>当程序启动后，在CLK时钟作用下，根据当前正在执行的指令的需要，产生相应的时序控制信号，并根据被控制功能部件的反馈信号调整时序控制信号<ul>\n<li>控制存储器</li>\n<li>微指令寄存器<ul>\n<li>控制字段+下址</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>周期概念<ul>\n<li>指令周期<ul>\n<li>完成一条指令所需的时间，包括取指令、分析指令、执行指令</li>\n</ul>\n</li>\n<li>机器周期<ul>\n<li>也称为CPU周期，是CPU从内存中读取一个指令的时间，通常等于取指周期</li>\n</ul>\n</li>\n<li>时钟周期<ul>\n<li>称为节拍脉冲或T周期，是基准脉冲信号</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>三条假设<ul>\n<li>程序是存放在主存中的，当执行完一条指令后才从主存中取下一条指令（非流水线）</li>\n<li>指令的长度是固定的，并限制了寻址方式的多样化</li>\n<li>在程序运行前，程序和数据都已存在主存中</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>指令执行过程（运算器和控制器配合）<ul>\n<li>组成控制器的基本电路<ul>\n<li>具有记忆功能的触发器以及由它组成的寄存器，计数器和存储单元</li>\n<li>没有记忆功能的门电路及由它组成的加法器，算术逻辑运算单元（ALU）和各种逻辑电路</li>\n</ul>\n</li>\n<li>举例<ul>\n<li>加法<ul>\n<li>取指令——》计算操作数地址——》取操作数——》执行结果并运算送结果</li>\n</ul>\n</li>\n<li>要能看懂时序图<ul>\n<li>哪些指令在对应的时间有效</li>\n</ul>\n</li>\n<li>条件转移指令<ul>\n<li>取指令——》计算地址</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>控制器的功能就是按每一条指令的要求产生所需的控制信号</li>\n<li>产生控制信号的方法<ul>\n<li>微程序控制</li>\n<li>硬布线控制</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"微程序控制计算机的基本工作原理\"><a href=\"#微程序控制计算机的基本工作原理\" class=\"headerlink\" title=\"微程序控制计算机的基本工作原理\"></a>微程序控制计算机的基本工作原理</h4><ul>\n<li>基本概念<ul>\n<li>微指令<ul>\n<li>在微程序控制的计算机中，将由同时发出的控制信号所执行的一组微操作</li>\n</ul>\n</li>\n<li>微命令<ul>\n<li>将指令分为若干条微指令，按次序执行这些微指令。组成微指令的操作即微命令</li>\n</ul>\n</li>\n<li>微程序<ul>\n<li>计算机的程序由指令序列构成，而计算机每条指令的功能均由微指令序列解释完成，这些微指令序列的集合就叫做微程序</li>\n</ul>\n</li>\n<li>控制存储器<ul>\n<li>微程序一般是存放在专门的存储器中的，由于该存储器主要存放控制命令（信号）与下一条执行的微指令地址（简称下址）</li>\n<li>存储单元内容<ul>\n<li>（1）微指令的控制信号——控制位</li>\n<li>（2）下条微指令的地址——下址字段</li>\n</ul>\n</li>\n<li>存储芯片：ROM</li>\n</ul>\n</li>\n<li>执行一条指令实际上就是执行一段存放在控制存储器中的微程序</li>\n</ul>\n</li>\n<li>实现微程序控制的基本原理<ul>\n<li>控制信号（23条）</li>\n<li>书上P123页为加法的过程</li>\n<li>微指令格式：控制字段+下址字段</li>\n<li>23个控制位，12个下址位——》容量为4K</li>\n<li>取址微指令的操作对所有指令都是相同的，所以是一条公用的微指令，其下址由操作码译码产生</li>\n</ul>\n</li>\n<li>微程序控制器</li>\n<li>时序信号及工作脉冲的形成</li>\n<li>停机和停电的区别<ul>\n<li>停机<ul>\n<li>电压：稳定<ul>\n<li>存放内容：保持<ul>\n<li>重启PC内容：断点指令地址</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>停电<ul>\n<li>电压：消失<ul>\n<li>存放内容：RAM的内容消失<ul>\n<li>重启PC内容：第一条指令地址</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"微程序设计技术\"><a href=\"#微程序设计技术\" class=\"headerlink\" title=\"微程序设计技术\"></a>微程序设计技术</h4><ul>\n<li>如何缩短微指令字长<ul>\n<li>直接控制法（容量太小）<ul>\n<li>编译方法：每一位代表一个控制信号，直接送往相应的控制点</li>\n<li>优点：控制简单</li>\n<li>缺点：微指令字长过大</li>\n</ul>\n</li>\n<li>字段直接编译法<ul>\n<li>选出互斥的微指令</li>\n<li>每个字段都要留出一个代码，表示本段不发出任何指令（000）</li>\n<li>优点：节省微指令的字长</li>\n<li>缺点：增加了额外的硬件开销</li>\n</ul>\n</li>\n<li>字段间接编译法<ul>\n<li>指令之间相互联系的情况</li>\n<li>举例：A为0-7，B为0-3，如果是直接编译——3+2=5，如果是间接编译——3+1=4</li>\n<li>编码方法：在字段直接编译法中，译码输出端要兼由另一字段中的某些微命令配合解释</li>\n<li>优点：减少了微指令长度</li>\n<li>缺点：可能削弱微指令的并行控制能力，同时增加硬件开销</li>\n</ul>\n</li>\n<li>常熟源字段E(了解)</li>\n</ul>\n</li>\n<li>如何减少微指令长度<ul>\n<li>现行微指令/微地址<ul>\n<li>现行微指令：当前正在执行的指令</li>\n<li>现行微地址：存放现行微指令的控制器存储单元</li>\n</ul>\n</li>\n<li>后继微指令/微地址<ul>\n<li>后继微指令：下一条要执行的微指令</li>\n<li>后继微地址：存放后继微指令的控制器存储单元</li>\n</ul>\n</li>\n<li>增量与下址字段结合产生后继微指令的方法<ul>\n<li>下址字段分成：转移控制字段BCF和转移地址字段BAF<ul>\n<li>BCF：控制微程序的转移情况</li>\n<li>BAF：转移后的微指令所在地址</li>\n</ul>\n</li>\n<li>BAF有两种情况<ul>\n<li>与uPC的位数相等——转移灵活，但增加微指令长度</li>\n<li>比uPC短——转移地址收到限制，但可缩短微指令长度</li>\n</ul>\n</li>\n<li>优点<ul>\n<li>微指令的下址字段很短，仅用于选择输入uPC计数器的某条线路有效</li>\n</ul>\n</li>\n<li>缺点<ul>\n<li>微程序转移不灵活，使得微程序在控存中的物理空间分配有困难</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>多路转移方式<ul>\n<li>一条微指令存在多个转移分支的情况称为多路转移</li>\n</ul>\n</li>\n<li>微中断<ul>\n<li>1.微中断请求信号是由程序中断请求信号引起的</li>\n<li>2.在完成现行指令的微程序后响应该微中断请求</li>\n<li>3.由硬件产生对应微中断处理程序在控存中的入口地址</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>如何提高微程序的执行速度</li>\n<li>微指令格式<ul>\n<li>水平型微指令——直接控制，字段编译（直接、间接）<ul>\n<li>特点：在一条微指令中定义并并行执行多个微命令</li>\n</ul>\n</li>\n<li>垂直型微指令<ul>\n<li>特点：不强调实现微指令的并行控制功能</li>\n<li>定义：采用微操作码编译法，由操作码规定微指令的功能</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>微程序控制存储器<ul>\n<li>一般采用ROM存储器</li>\n<li>也可采用RAM，为防止断电后内容消失，则必须开机后将外存中存放的微程序调入控存RAM，然后才能执行程序。</li>\n<li>当前为了能不断扩展指令系统，通常采用ROM+RAM</li>\n</ul>\n</li>\n<li>动态微程序设计<ul>\n<li>定义：能根据用户要求改变微程序</li>\n<li>优点：是计算机能更灵活、有效的适应于各种不同的应用目标</li>\n</ul>\n</li>\n<li>控制存储器的操作（P136）<ul>\n<li>串行方式</li>\n<li>并行方式——比串行多了微指令寄存器<ul>\n<li>微周期=max(取微指令时间,执行微指令时间)</li>\n<li>由于取微指令、执行微指令同时进行，故对于某些后继微地址的产生根据处理结果而定的微指令，则延迟一个微周期再取微指令</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"硬布线控制的计算机（RISC）——特点快\"><a href=\"#硬布线控制的计算机（RISC）——特点快\" class=\"headerlink\" title=\"硬布线控制的计算机（RISC）——特点快\"></a>硬布线控制的计算机（RISC）——特点快</h4><ul>\n<li>形成操作控制信号的逻辑框图（P141）</li>\n<li>操作控制信号的产生<ul>\n<li>取值周期cy1所产生的信号对所有指令都是相同的，即与当前执行的指令无关，逻辑式得到最简单的形式</li>\n<li>通常，同一个控制控制信号在若干条指令的某些周期（或再加上一些条件）中都需要，为此需要把它们组合起来</li>\n<li>同种类型的指令所需要的控制信号大部分是相同的，仅有少量区别</li>\n<li>在确定指令的操作码时（即对具体指令赋予二进制操作码），为了便于逻辑表达式的化简以减少逻辑电路数量，往往给予特别关注</li>\n</ul>\n</li>\n<li>设计组合逻辑电路从而产生需要的控制信号的步骤<ul>\n<li>1.实际逻辑问题2.真值表3.公式化简4.逻辑电路图</li>\n</ul>\n</li>\n<li>设计目标<ul>\n<li>使用最少的电路元件达到最高的操作速度</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"流水线工作原理\"><a href=\"#流水线工作原理\" class=\"headerlink\" title=\"流水线工作原理\"></a>流水线工作原理</h4><ul>\n<li>几点结论<ul>\n<li>每条指令的执行时间不变</li>\n<li>每条指令处理结果的时间缩短</li>\n<li>流水线处理速率最高时=流水线处于满载的稳定状态</li>\n<li>流水线处理速率最低时=流水线未满载状态</li>\n<li>为了满足在重叠时间段不同指令的机器周期能够完成指定的操作，将时间段=操作完成的最长时间</li>\n<li>为了保证一个周期内流水线的输入信号不变，相邻时间段之间必须设置锁存器或寄存器</li>\n<li>除了指令执行流水线，还有运算操作流水线</li>\n</ul>\n</li>\n<li>相关问题<ul>\n<li>流水线阻塞（P163-6.15）<ul>\n<li>数据相关产生<ul>\n<li>假设第二条指令需要的操作数是第一条指令运算的结果，那么出现了数据相关</li>\n</ul>\n</li>\n<li>指令执行时间不同产生</li>\n<li>程序转移的影响</li>\n<li>异常情况响应中断</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"第七章：存储系统\"><a href=\"#第七章：存储系统\" class=\"headerlink\" title=\"第七章：存储系统\"></a>第七章：存储系统</h3><h4 id=\"存储系统的层次结构\"><a href=\"#存储系统的层次结构\" class=\"headerlink\" title=\"存储系统的层次结构\"></a>存储系统的层次结构</h4><ul>\n<li>cache-&gt;主存-&gt;辅存</li>\n</ul>\n<h4 id=\"高速缓冲存储器\"><a href=\"#高速缓冲存储器\" class=\"headerlink\" title=\"高速缓冲存储器\"></a>高速缓冲存储器</h4><ul>\n<li>cache的工作原理<ul>\n<li>局部性原理</li>\n<li>主存地址和cache地址（P166 图7.2）</li>\n<li>块长<ul>\n<li>块长一般取一个主存周期所能调出的信息长度（一般为16个字）</li>\n</ul>\n</li>\n<li>cache的容量和块的大小是影响cache的效率的重要因素</li>\n<li>命中率<ul>\n<li>CPU所要访问的信息是否在cache中的比率，而将所要访问的信息不在cache中的比率称为失败率</li>\n</ul>\n</li>\n<li>一致性策略<ul>\n<li>标志交换方式（写回法）</li>\n<li>通过式写入（写通法）</li>\n<li>写操作直接对主存进行，而不写入cache</li>\n</ul>\n</li>\n<li>cache的存取时间<ul>\n<li>平均存取时间=h*tc+(1-h)(tc+tm) </li>\n</ul>\n</li>\n<li>最好替换策略<ul>\n<li>按照被替换的字块是下一段时间最少使用的，由替换部件实现</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>cache组织<ul>\n<li>地址映像<ul>\n<li>直接映像<ul>\n<li>cache中许多空的位置被浪费</li>\n<li>主存地址：主存字块标记+cache字块地址+字块内地址</li>\n</ul>\n</li>\n<li>全相联映像<ul>\n<li>成本太高而不能采用</li>\n<li>主存地址：主存字块标记+字块内地址</li>\n<li>优点<ul>\n<li>方式灵活，缩小了块发生冲突的概率</li>\n</ul>\n</li>\n<li>缺点<ul>\n<li>增加了标识位位数</li>\n<li>增加了寻找主存块在cache中对应块的时间</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>组相联映像<ul>\n<li>直接映像和全相联映像的折衷</li>\n<li>主存地址：主存字块标记+组地址+块内地址</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"虚拟存储器\"><a href=\"#虚拟存储器\" class=\"headerlink\" title=\"虚拟存储器\"></a>虚拟存储器</h4><ul>\n<li>存储管理部件（MMU）<ul>\n<li>现代计算机一般都有辅助存储器，但具有辅存的存储系统不一定是虚拟存储系统</li>\n<li>虚拟存储系统的特点<ul>\n<li>允许用户程序用比主存大的多的空间来访问主存</li>\n<li>每次访存都要进行虚实地址的转换</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"第八章：辅助存储器\"><a href=\"#第八章：辅助存储器\" class=\"headerlink\" title=\"第八章：辅助存储器\"></a>第八章：辅助存储器</h3><h4 id=\"半导体存储器可随机访问任一单元，而辅助存储器一般为串行访问存储器\"><a href=\"#半导体存储器可随机访问任一单元，而辅助存储器一般为串行访问存储器\" class=\"headerlink\" title=\"半导体存储器可随机访问任一单元，而辅助存储器一般为串行访问存储器\"></a>半导体存储器可随机访问任一单元，而辅助存储器一般为串行访问存储器</h4><h4 id=\"辅助存储器的种类\"><a href=\"#辅助存储器的种类\" class=\"headerlink\" title=\"辅助存储器的种类\"></a>辅助存储器的种类</h4><ul>\n<li>磁表面存储器<ul>\n<li>数字式磁记录<ul>\n<li>硬盘、软盘和磁带</li>\n</ul>\n</li>\n<li>模拟式磁记录<ul>\n<li>录音、录像设备</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>光存储器<ul>\n<li>光盘</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"串行存储器\"><a href=\"#串行存储器\" class=\"headerlink\" title=\"串行存储器\"></a>串行存储器</h4><ul>\n<li>顺序存取存储器</li>\n<li>直接存取存储器</li>\n</ul>\n<h4 id=\"辅助存储器的技术指标\"><a href=\"#辅助存储器的技术指标\" class=\"headerlink\" title=\"辅助存储器的技术指标\"></a>辅助存储器的技术指标</h4><ul>\n<li>存储密度<ul>\n<li>定义：单位长度或单位面积磁层表面磁层所存储的二进制信息量</li>\n<li>道密度<ul>\n<li>沿磁盘半径方向单位长度的磁道数称为道密度，单位为道/英寸tpi或道/毫米tpmm</li>\n</ul>\n</li>\n<li>位密度或线密度<ul>\n<li>单位长度磁道所能记录二进制信息的位数叫位密度或线密度，单位为位/英寸bpi或位/毫米bpmm</li>\n</ul>\n</li>\n<li>每个磁道所存储的信息量是一样的</li>\n</ul>\n</li>\n<li>存储容量<ul>\n<li>C = n × k × s</li>\n</ul>\n</li>\n<li>寻址时间<ul>\n<li>平均寻址时间Ta=平均找道时间Ts+平均等待时间Tw</li>\n<li>辅存的速度<ul>\n<li>寻址时间</li>\n<li>磁头读写时间</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>数据传输率<ul>\n<li>Dr  = D × V</li>\n</ul>\n</li>\n<li>误码率</li>\n<li>价格</li>\n</ul>\n<h4 id=\"硬磁盘存储器的类型\"><a href=\"#硬磁盘存储器的类型\" class=\"headerlink\" title=\"硬磁盘存储器的类型\"></a>硬磁盘存储器的类型</h4><ul>\n<li>(1) 固定磁头和移动磁头</li>\n<li>(2) 可换盘和固定盘</li>\n</ul>\n<h4 id=\"磁盘存储器\"><a href=\"#磁盘存储器\" class=\"headerlink\" title=\"磁盘存储器\"></a>磁盘存储器</h4><ul>\n<li>温彻斯特磁盘简称温盘</li>\n<li>磁盘存储器由驱动器（HDD），控制器（HDC）和盘片组成</li>\n<li>最外面的同心圆叫0磁道，最里面的同心圆假设称为n磁道</li>\n<li>驱动器的定位驱动系统实现快速精准的磁头定位</li>\n<li>主轴系统的作用是带动盘片按额定转速稳定旋转</li>\n<li>数据控制系统的作用是控制数据的写入和读出，包括寻址，磁头旋转，写电流控制，读出放大，数据分离</li>\n<li>磁盘控制器有两个方向的接口<ul>\n<li>与主机的接口</li>\n<li>与驱动器（设备）的接口</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"光盘\"><a href=\"#光盘\" class=\"headerlink\" title=\"光盘\"></a>光盘</h4><ul>\n<li>采用光存储技术<ul>\n<li>利用激光写入和读出</li>\n<li>第一代光存储技术<ul>\n<li>采用非磁性介质<ul>\n<li>不可擦写</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>第二代光存储技术<ul>\n<li>采用磁性介质<ul>\n<li>可擦写</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>光盘的存储原理<ul>\n<li>只读型和只写一次型<ul>\n<li>热作用（物理或化学变化）</li>\n</ul>\n</li>\n<li>可擦写光盘<ul>\n<li>热磁效应</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"第九-十章：输出输出（I-O）设备-系统\"><a href=\"#第九-十章：输出输出（I-O）设备-系统\" class=\"headerlink\" title=\"第九/十章：输出输出（I/O）设备/系统\"></a>第九/十章：输出输出（I/O）设备/系统</h3><h4 id=\"设备控制器（I-O）的基本功能\"><a href=\"#设备控制器（I-O）的基本功能\" class=\"headerlink\" title=\"设备控制器（I/O）的基本功能\"></a>设备控制器（I/O）的基本功能</h4><ul>\n<li>实现主机和外部设备之间的数据传送</li>\n<li>实现数据缓冲，以达到主机同外部设备之间的速度匹配</li>\n<li>接受主机的命令，提供设备接口的设备，并按照主机的命令控制设备</li>\n</ul>\n<h4 id=\"I-O-编址方式\"><a href=\"#I-O-编址方式\" class=\"headerlink\" title=\"I/O 编址方式\"></a>I/O 编址方式</h4><ul>\n<li>(1) 统一编址：用取数、存数指令</li>\n<li>(2) 不统一编址：有专门的 I/O 指令</li>\n</ul>\n<h4 id=\"I-O-与主机的连接方式\"><a href=\"#I-O-与主机的连接方式\" class=\"headerlink\" title=\"I/O 与主机的连接方式\"></a>I/O 与主机的连接方式</h4><ul>\n<li>辐射式连接<ul>\n<li>每台设备都配有一套</li>\n<li>控制线路和一组信号线</li>\n<li>不便于增删设备</li>\n</ul>\n</li>\n<li>总线连接<ul>\n<li>便于增删设备</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"I-O设备\"><a href=\"#I-O设备\" class=\"headerlink\" title=\"I/O设备\"></a>I/O设备</h4><ul>\n<li>人机交互设备<ul>\n<li>键盘、鼠标等</li>\n</ul>\n</li>\n<li>计算机信息的驻留设备<ul>\n<li>硬盘、光盘等</li>\n</ul>\n</li>\n<li>机——机通信设备<ul>\n<li>MODEN等</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"为什么要设置接口？\"><a href=\"#为什么要设置接口？\" class=\"headerlink\" title=\"为什么要设置接口？\"></a>为什么要设置接口？</h4><ul>\n<li><ol>\n<li>实现设备的选择</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>实现数据缓冲达到速度匹配</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>实现数据串     并格式转换</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>实现电平转换</li>\n</ol>\n</li>\n<li><ol start=\"5\">\n<li>传送控制命令</li>\n</ol>\n</li>\n<li><ol start=\"6\">\n<li>反映设备的状态<ul>\n<li>（“忙”、“就绪”、“中断请求”）</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"中断服务程序的流程\"><a href=\"#中断服务程序的流程\" class=\"headerlink\" title=\"中断服务程序的流程\"></a>中断服务程序的流程</h4><ul>\n<li>(1) 保护现场<ul>\n<li>程序断点的保护</li>\n<li>寄存器内容的保护</li>\n</ul>\n</li>\n<li>(2) 中断服务<ul>\n<li>对不同的 I/O 设备具有不同内容的设备服务</li>\n</ul>\n</li>\n<li>(3) 恢复现场<ul>\n<li>出栈指令</li>\n</ul>\n</li>\n<li>(4) 中断返回<ul>\n<li>中断返回指令</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"单重中断和多重中断\"><a href=\"#单重中断和多重中断\" class=\"headerlink\" title=\"单重中断和多重中断\"></a>单重中断和多重中断</h4><ul>\n<li>单重 中断<ul>\n<li>不允许中断 现行的 中断服务程序</li>\n</ul>\n</li>\n<li>多重 中断<ul>\n<li>允许级别更高 的中断源</li>\n<li>中断 现行的 中断服务程序</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"DMA-方式\"><a href=\"#DMA-方式\" class=\"headerlink\" title=\"DMA 方式\"></a>DMA 方式</h4><ul>\n<li>主存和 I/O 之间有一条直接数据通道</li>\n<li>CPU 和 I/O 并行工作</li>\n<li>DMA 的三种工作方式<ul>\n<li>(1) CPU暂停方式</li>\n<li>(2) CPU周期窃取方式</li>\n<li>(3)直接访问存储器</li>\n</ul>\n</li>\n<li>DMA 接口功能<ul>\n<li>(1) 向 CPU 申请 DMA 传送</li>\n<li>(2) 处理总线 控制权的转交</li>\n<li>(3) 管理 系统总线、控制 数据传送</li>\n<li>(4) 确定 数据传送的 首地址和长度，修正 传送过程中的数据地址和长度</li>\n<li>(5) DMA 传送结束时，给出操作完成信号</li>\n</ul>\n</li>\n<li>DMA 传送过程<ul>\n<li>预处理、数据传送、后处理</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"外设接口\"><a href=\"#外设接口\" class=\"headerlink\" title=\"外设接口\"></a>外设接口</h4><ul>\n<li>设备与主机相连时，必须按照规定的物理互连特性、电气特性等进行连接，这些特性的技术规范称为接口标准</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>整体架构图如下</li>\n</ul>\n<p><img src=\"./../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90.png\" alt=\"计算机组成原理思维导图\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"第一章-计算机系统概论\"><a href=\"#第一章-计算机系统概论\" class=\"headerlink\" title=\"第一章 计算机系统概论\"></a>第一章 计算机系统概论</h3><h4 id=\"冯诺依曼型计算机特点\"><a href=\"#冯诺依曼型计算机特点\" class=\"headerlink\" title=\"冯诺依曼型计算机特点\"></a>冯诺依曼型计算机特点</h4><ul>\n<li>1.计算机由运算器，控制器，存储器，输入和输出设备5部分组成</li>\n<li>2.采用存储程序的方式，程序和数据放在同一个存储器中，并以二进制表示。</li>\n<li>3.指令由操作码和地址码组成</li>\n<li>4.指令在存储器中按执行顺序存放，由指令计数器(即程序计数器PC)指明要执行的指令所在的储存单元地址，一般按顺序递增，但可按运算结果或外界条件而改变</li>\n<li>5.机器以运算器为中心，输入输出设备与存储器间的数据传送都通过运算器</li>\n</ul>\n<h4 id=\"区别以运算器还是存储器为中心的计算机\"><a href=\"#区别以运算器还是存储器为中心的计算机\" class=\"headerlink\" title=\"区别以运算器还是存储器为中心的计算机\"></a>区别以运算器还是存储器为中心的计算机</h4><ul>\n<li>看输入设备能否直接与存储器相连，是的话就是以存储器为中心</li>\n</ul>\n<h3 id=\"第二章-计算机系统\"><a href=\"#第二章-计算机系统\" class=\"headerlink\" title=\"第二章 计算机系统\"></a>第二章 计算机系统</h3><h4 id=\"组成结构\"><a href=\"#组成结构\" class=\"headerlink\" title=\"组成结构\"></a>组成结构</h4><ul>\n<li>硬件<ul>\n<li>结构<ul>\n<li>主机<ul>\n<li>cpu<ul>\n<li>ALU运算器</li>\n<li>CU控制器</li>\n</ul>\n</li>\n<li>存储器<ul>\n<li>主存</li>\n<li>辅存</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>I/O<ul>\n<li>输入设备</li>\n<li>输出设备</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>主要技术指标<ul>\n<li>机器字长<ul>\n<li>CPU一次能处理的数据位数</li>\n</ul>\n</li>\n<li>存储容量<ul>\n<li>存储容量＝存储单元个数×存储字长</li>\n</ul>\n</li>\n<li>运算速度<ul>\n<li>单位时间执行指令的平均条数，MIPS</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>软件<ul>\n<li>系统软件<ul>\n<li>用来管理整个计算机系统 <ul>\n<li>语言处理程序</li>\n<li>操作系统</li>\n<li>服务性程序</li>\n<li>数据库管理系统</li>\n<li>网络软件</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>应用软件<ul>\n<li>按任务需要编制成的各种程序</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"第三章-运算方法和运算部件\"><a href=\"#第三章-运算方法和运算部件\" class=\"headerlink\" title=\"第三章 运算方法和运算部件\"></a>第三章 运算方法和运算部件</h3><h4 id=\"数据的表示方法和转换\"><a href=\"#数据的表示方法和转换\" class=\"headerlink\" title=\"数据的表示方法和转换\"></a>数据的表示方法和转换</h4><ul>\n<li>机器数正0负1<ul>\n<li>符号数值化的带符号二进制数，称为机器数。</li>\n</ul>\n</li>\n<li>真值:符号位加绝对值</li>\n<li>余三码:在8421码的基础上，把每个编码都加上0011<ul>\n<li>当两个余三码想加不产生进位时，应从结果中减去0011;产生进位时，应将进位信号送入高位，本位加0011</li>\n</ul>\n</li>\n<li>格雷码:任何两个相邻编码只有1个二进制位不同，而其余3个二进制位相同</li>\n<li>8421码<ul>\n<li>权值从高到低为8、4、2、1<ul>\n<li>算术运算时，需对运算结果进行修正。方法：如果小于、等于(1001)2，不需要修正；否则加6修正</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"带符号的二进制数据在计算机中的表示方法及加减法运算\"><a href=\"#带符号的二进制数据在计算机中的表示方法及加减法运算\" class=\"headerlink\" title=\"带符号的二进制数据在计算机中的表示方法及加减法运算\"></a>带符号的二进制数据在计算机中的表示方法及加减法运算</h4><ul>\n<li>原码<ul>\n<li>定义<ul>\n<li>最高位为符号位0/1+数值的绝对值形式</li>\n</ul>\n</li>\n<li>特点<ul>\n<li>（1）值+0，-0的原码分别为00000、10000，形式不唯一；</li>\n<li>（2）正数的原码码值随着真值增长而增长<ul>\n<li>负数的原码码值随着真值增长而减少</li>\n</ul>\n</li>\n<li>（3）n+1位原码表示定点整数范围－(2n－1)——2n－1<ul>\n<li>n+1位原码表示定点小数范围 －(1－2－n)——1－2－n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>运算<ul>\n<li>绝对值相加减，由数值大小决定运算结果符号</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>补码<ul>\n<li>定义，特点和运算<ul>\n<li>运算:<br>结果不超过机器所能表示范围时，[X+Y]补=[X]补+[Y]补<br>减法运算:[X–Y]补=[X+(–Y)]补=[X]补+[–Y]补</li>\n<li>结论<ul>\n<li>负数的补数＝模＋负数</li>\n<li>互为补数的绝对值相加＝模</li>\n<li>在补数中，减法运算即加法运算</li>\n</ul>\n</li>\n<li>定义<ul>\n<li>定义法，即[X]补=2·符号位+X     （MOD  2）</li>\n<li>X为正数，则符号0+X的绝对值；X为负数，则X的绝对值取反+1。</li>\n</ul>\n</li>\n<li>特点<ul>\n<li>数值零的补码表示唯一</li>\n<li>正数补码码值随着真值增大而增大，负数补码码值随着真值增大而增大</li>\n<li>n+1位补码所表示定点整数范围－ 2n——2n－1，n+1位补码所表示定点小数范围－1——1－2－n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>加法运算逻辑事例<ul>\n<li>过程</li>\n<li>加减法运算的溢出处理<ul>\n<li>溢出定义<ul>\n<li>当运算结果超出机器数所能表示的范围</li>\n</ul>\n</li>\n<li>加减中，可能产生溢出的情况<ul>\n<li>可能出现溢出<ul>\n<li>同号数相加</li>\n<li>异号数相减</li>\n</ul>\n</li>\n<li>不可能出现溢出<ul>\n<li>异号数相加</li>\n<li>同号数相减</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>判断溢出的方法<ul>\n<li>法一：当符号相同两数相加，结果符号和加数（或被加数）不相同，则溢出<ul>\n<li>fa,fb表示两操作数（A,B）的符号位,fs为结果的符号位</li>\n</ul>\n</li>\n<li>法二：任意符号相加，如果C=Cf，则结果正确，否则溢出；<ul>\n<li>C为数值最高位的进位，Cf为符号位的进位</li>\n</ul>\n</li>\n<li>法三：采用双符号相加，如果fs1=fs2，则结果正确，否则溢出；<ul>\n<li>运算结果的符号位为fs2；</li>\n<li>多符号位的补码，叫做变形补码；</li>\n<li>如果采用双符号位，当数为小数时，模m=4;当数为整数时，模m=2的n+2次方</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>反码<ul>\n<li>定义<ul>\n<li>a.定义法，即[X]反=(2-2-n)·符号位+X   (MOD  2-2-n)</li>\n<li>b.X是正数，[X]反=[X]原；X是负数，符号+数值取反。</li>\n</ul>\n</li>\n<li>特点<ul>\n<li>数值零的反码表示不唯一</li>\n<li>正数反码码值随着真值增大而增大，负数反码码值随着真值增大而增大</li>\n<li>n+1位反码所表示定点整数范围－ (2n－1)——2n－1，n+1位反码所表示定点小数范围－(1－2－n)——1－2－n</li>\n</ul>\n</li>\n<li>加减运算特点<ul>\n<li>在机器数范围内，反码运算满足[X+Y]反=[X]反+[Y]反，[X－Y]反=[X]反+[－Y]反</li>\n</ul>\n</li>\n<li>反码运算在最高位有进位时，要在最低位+1，此时要多进行一次加法运算，增加了复杂性，又影响了速度，因此很少采用</li>\n<li>由于反码运算是以2-2的-次方为模，所以，当最高位有进位而丢掉进位(即2)时，要在最低位+/-1</li>\n</ul>\n</li>\n<li>移码<ul>\n<li>由来及窍门<ul>\n<li>为了从码值直接判断对应真值的大小，所以引进移码</li>\n<li>[X]补的符号位取反，即得[X]移 </li>\n</ul>\n</li>\n<li>特点<ul>\n<li>最高位是符号位，1表示正，0表示负</li>\n<li>数据0有唯一的编码</li>\n<li>移码码值随着真值增大而增大</li>\n<li>n+1位移码所表示定点整数范围－ 2n——2n－1， n+1位移码所表示定点小数范围－1——1－2－n</li>\n<li>计算机中，移码常用于表示阶码，故只执行加、减运算</li>\n<li>计算机中，移码运算公式需要对结果进行修正</li>\n</ul>\n</li>\n<li>浮点数的阶码运算<ul>\n<li>移码定义:[X]移=2的n次方+X</li>\n<li>补码定义:[X]补=2的n+1次方+Y</li>\n<li>阶码求和公式<ul>\n<li>[X]移+[Y]补=[X+Y]移  mod2的n+1次方</li>\n<li>[X]移+[-Y]补=[X-Y]移</li>\n<li>判溢方法<ul>\n<li>双符号位参加运算，最高符号位恒置0</li>\n<li>当结果最高符号位=1则溢出<ul>\n<li>低位符号=0，则上溢；低位符号=1，则下溢；</li>\n</ul>\n</li>\n<li>当结果最高符号位=0则未溢出<ul>\n<li>低位符号=0，负数；低位符号=1，正数</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>说明:如果阶码运算的结果溢出，上述条件不成立。此时，使用双符号位的阶码加法器，并规定移码的第二个符号位，即最高符号位恒用0参加加减运算，则溢出条件是结果的最高符号位为1。此时低位符号为0时，表明结果上溢;为1时，表明结果下溢。当最高符号位为0时，表明没有溢出，低位符号位为1，表明结果为正;为0时表明结果为负。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>补，反，原，移码的相互转换<ul>\n<li>反码-》原码<ul>\n<li>方法：符号位不变，正数不变，负数数值部分取反。</li>\n</ul>\n</li>\n<li>补码-》原码<ul>\n<li>方法1：正数不变，负数数值部分求反加1。</li>\n<li>方法2：串行转换<ul>\n<li>从最后开始数，遇到第一个“1”，除第一个“1”不变，前面数字分别取反</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>移码-》原码<ul>\n<li>方法：移码转换为补码，再转换为原码</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>数据从补码和反码表示形式转换成原码<ul>\n<li>自低位开始转换，从低位向高位，在遇到第一个1之前，保存各位的0不变，第一个1也不变，以后得各位按位取反，最后保持符号位不变，经历一遍后，即可得到补码</li>\n</ul>\n</li>\n<li>定点数和浮点数<ul>\n<li>定点数<ul>\n<li>小数点固定在某个位置上的数据<ul>\n<li>32位定点小数、定点整数补码的范围<ul>\n<li>32位定点小数-1～1-2-31</li>\n<li>32位定点整数-231～231-1</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>浮点数<ul>\n<li>根据IEEE754国际标准，常用的浮点数有两种格式<ul>\n<li>Nmax=Mmax<em>2的Emax Nmin=Mmin</em>2的Emax</li>\n<li>单精度(32位)=8位阶码+24位尾数<ul>\n<li>单精度浮点数(32位)，阶码8位(含一位符号位)，尾数24(含一位符号位)，取值范围:-2的127次方～(1-2的-23次方)*2的127次方</li>\n</ul>\n</li>\n<li>双精度(64位)=11位阶码+53位尾数<ul>\n<li>双精度浮点数(64位)，阶码11位(含一位符号位)，尾数53位(含一位符号位)，取值范围:-2的1023次方～(1-2的-52次方)*2的1023次方</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>为了保证数据精度，尾数通常用规格化形式表示:当R=2，且尾数值不为0时，其绝对值应大于或等于(0.5)10<ul>\n<li>左规</li>\n<li>右规</li>\n</ul>\n</li>\n<li>小数点位置可以浮动的数据。</li>\n<li>表示形式：N = M · RE</li>\n<li>计算机中存储形式<ul>\n<li>Ms+Es+E(n位)+M(m位)<ul>\n<li>阶码E，一般为整数，用补码或者移码表示；</li>\n<li>尾数M，一般为规格化的定点小数，用补码表示；</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"二进制乘法运算\"><a href=\"#二进制乘法运算\" class=\"headerlink\" title=\"二进制乘法运算\"></a>二进制乘法运算</h4><ul>\n<li>定点原码一位乘法<ul>\n<li>两个原码数相乘，其乘积的符号为相乘两数符号的异或值，数值则为两数绝对值之积<ul>\n<li>[X·Y]原=[X]原·[Y]原=(X0⊕Y0)|(X1X2..Xn) · (Y1Y2..Yn)</li>\n</ul>\n</li>\n<li>几点结论<ul>\n<li>从低到高根据乘数每位0、1决定相加被乘数还是0；</li>\n<li>相加数每次左移，最后一起求积；</li>\n<li>符号由异或决定</li>\n</ul>\n</li>\n<li>表达式</li>\n<li>电路框架</li>\n<li>修正<ul>\n<li>1.在机器内多个数据一般不能同时相加，一次加法操作只能求出两数之和，因此每每求得一个相加数，就与上次部分积相加</li>\n<li>2.人工计算时，相加数逐次向左偏移一位，由于最后的乘积位数是乘数(或被乘数)的两倍，如按此算法在机器中运算，加法器也需增到两倍。观察计算过程很容易发现，在求本次部分积时，前一次部分积的最低位不再参与运算，因此可将其右移一位，相加数可直送而不必偏移，于是用N位加法器就可实现两个N位数相乘</li>\n<li>部分积右移时，乘数寄存器同时右移一位，这样可以用乘数寄存器的最低位来控制相加数(取被乘数或零)，同时乘数寄存器的最高位可接受部分积右移出来的一位，因此，完成乘法运算后，A寄存器中保存乘积的高位部分，乘数寄存器中保存乘积低位部分</li>\n</ul>\n</li>\n<li>例题</li>\n<li>控制流程图</li>\n</ul>\n</li>\n<li>定点补码一位乘法<ul>\n<li>表达式</li>\n<li>[X·Y]补=[X]补·(－Y0+Y1·2-1+….Yn·2-n)</li>\n<li>注意：此处为双符号位，当最后乘积高位为负数时，需要补充加上[-|x|]补的操作</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"二进制除法\"><a href=\"#二进制除法\" class=\"headerlink\" title=\"二进制除法\"></a>二进制除法</h4><ul>\n<li>加减交替法<ul>\n<li>当余数为正时，商上1，求下一位商的办法是，余数左移一位，再减去除数;当余数为负时，商上0，求下一位商的办法是，余数左移一位，再加上除数。此方法不用恢复余数，所以又叫不恢复余数法。但若最后一次上商为0而又需得到正确余数，则在这最后扔需恢复余数</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"浮点数的运算方法\"><a href=\"#浮点数的运算方法\" class=\"headerlink\" title=\"浮点数的运算方法\"></a>浮点数的运算方法</h4><ul>\n<li>浮点数的加减法运算<ul>\n<li>1.对阶操作<ul>\n<li>求出△E，再对小的进行移位</li>\n</ul>\n</li>\n<li>2.尾数的加减运算</li>\n<li>3.规格化操作<ul>\n<li>规则简化是符号位和数值最高位不同，即00.1xxxx或11.0xxxx</li>\n</ul>\n</li>\n<li>4.舍入<ul>\n<li>超出表示范围的高位为1舍入</li>\n</ul>\n</li>\n<li>5.检查阶码是否溢出</li>\n</ul>\n</li>\n<li>浮点数的乘除法运算<ul>\n<li>1.浮点数阶码运算(移码)<ul>\n<li>牢记公式<ul>\n<li>[X+Y]移=[X]移+[Y]补</li>\n<li>[X–Y]移=[X]移+[–Y]补</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>2.按照一位乘或加减交替除运算<ul>\n<li>先确定符号，在列式子计算</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"运算部件\"><a href=\"#运算部件\" class=\"headerlink\" title=\"运算部件\"></a>运算部件</h4><ul>\n<li>ABC寄存器作业</li>\n<li>定点运算部件</li>\n<li>浮点运算部件<ul>\n<li>由阶码运算部件和尾数运算部件组成</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"数据校验码\"><a href=\"#数据校验码\" class=\"headerlink\" title=\"数据校验码\"></a>数据校验码</h4><ul>\n<li>码距<ul>\n<li>任意两个合法码之间不相同的二进制位数的最小值<ul>\n<li>要具有差错能力，则码距&gt;1</li>\n<li>合理增大码距，就能提高发现错误的能力</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>鉴定方法<ul>\n<li>有无差错能力</li>\n<li>是否能合理增大码距</li>\n</ul>\n</li>\n<li>奇偶校验码<ul>\n<li>能发现数据代码中一位或奇数个位出错情况的编码</li>\n<li>实现原理是使码距由1增加到2<ul>\n<li>步骤1：在字节高位补充一位，即校验位</li>\n<li>步骤2：依据图3.10电路形成原始数据D8..D1的校验位值</li>\n<li>步骤3：将9位数据写入主存</li>\n<li>步骤4：读出该数据时，读取数据D8..D1通过图3.10判定合法性</li>\n</ul>\n</li>\n<li>电路图</li>\n<li>结论<ul>\n<li>（1）奇偶校验码只能发现一位或奇位错，且不能确定出错位置</li>\n<li>（2）奇偶校验码的码距=2</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>海明校验码<ul>\n<li>海明码位号和校验位位号的关系<ul>\n<li>Pi的位置在2的i-1次方，但是除了最高位</li>\n</ul>\n</li>\n<li>笔记<ul>\n<li>3,5,7||3,6,7||5,6,7</li>\n</ul>\n</li>\n<li>电路图</li>\n<li>海明码码距为4</li>\n<li>纠一位错，查一位错<ul>\n<li>2∧r≥k+r+1</li>\n</ul>\n</li>\n<li>纠一位错，查两位错<ul>\n<li>2∧(r–1)≥k+r</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>循环冗余校验码(CRC)<ul>\n<li>CRC码可以发现并纠正信息存储或传送过程中连续出现的多位错误</li>\n<li>CRC码一般是指k位信息码之后拼接r位校验码</li>\n<li>模2运算<ul>\n<li>模2加减</li>\n<li>模2乘除</li>\n<li>异或逻辑</li>\n</ul>\n</li>\n<li>CRC的译码与纠错<ul>\n<li>更换不同的待测码字可以证明:余数与出错位的对应关系是不变，只与码制和生成多项式有关</li>\n<li>图</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"第四章-主存储器\"><a href=\"#第四章-主存储器\" class=\"headerlink\" title=\"第四章 主存储器\"></a>第四章 主存储器</h3><h4 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h4><ul>\n<li>主存储器处于全机中心低位，辅助存储器或称为外存储器，通常用来存放主存的副本和当前不在运行的程序和数据。</li>\n</ul>\n<h4 id=\"主存储器的类型\"><a href=\"#主存储器的类型\" class=\"headerlink\" title=\"主存储器的类型\"></a>主存储器的类型</h4><ul>\n<li>随机存储器RAM</li>\n<li>非易失性存储器</li>\n</ul>\n<h4 id=\"主存储器的主要技术指标\"><a href=\"#主存储器的主要技术指标\" class=\"headerlink\" title=\"主存储器的主要技术指标\"></a>主存储器的主要技术指标</h4><ul>\n<li>主存容量<ul>\n<li>64×8等等</li>\n<li>计算机可寻址的最小信息单元是一个存储字</li>\n<li>主存储器存储单元的总数</li>\n</ul>\n</li>\n<li>存取速度<ul>\n<li>由存储器存取时间和存储周期表示</li>\n</ul>\n</li>\n<li>存储器存取时间<ul>\n<li>启动一次存储器操作(读/写)到完成该操作所经历的时间</li>\n</ul>\n</li>\n<li>存储周期<ul>\n<li>连续启动两次独立的存储器操作所间隔的最小时间</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"主存储器的基本操作\"><a href=\"#主存储器的基本操作\" class=\"headerlink\" title=\"主存储器的基本操作\"></a>主存储器的基本操作</h4><ul>\n<li>CPU通过使用AR(地址寄存器)和DR(数据寄存器)和主存进行数据传送</li>\n<li>若AR为K位字长，DR为n位字长，则允许主存包含2∧k个可寻址单元</li>\n<li>CPU与主存采取异步工作方式，以ready信号表示一次访存操作的结束</li>\n</ul>\n<h4 id=\"读-写存储器\"><a href=\"#读-写存储器\" class=\"headerlink\" title=\"读/写存储器\"></a>读/写存储器</h4><ul>\n<li>随机存储器(RAM)按存储元件在运行中能否长时间保存信息分为静态存储器和动态存储器</li>\n<li>静态存储器，利用触发器保存信息，只要不断电，信息就不会丢失<ul>\n<li>电路简图</li>\n<li>MOS静态存储结构图</li>\n</ul>\n</li>\n<li>动态存储器，利用MOS电容存储电荷来保存信息，需要不断给电容充电才能使信息来保存信息<ul>\n<li>电路简图</li>\n<li>16K×1位动态存储器框图</li>\n<li>再生<ul>\n<li>集中式</li>\n<li>分散式</li>\n<li>时间小于或等于2ms</li>\n<li>行读出再生</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"非易失性半导体存储器\"><a href=\"#非易失性半导体存储器\" class=\"headerlink\" title=\"非易失性半导体存储器\"></a>非易失性半导体存储器</h4><ul>\n<li>只读存储器ROM<ul>\n<li>只读不能写</li>\n</ul>\n</li>\n<li>可编程序的只读存储器PROM<ul>\n<li>一次性写入</li>\n</ul>\n</li>\n<li>可擦可编程序的只读存储器EPROM<ul>\n<li>可多次写入、读出</li>\n</ul>\n</li>\n<li>可电擦可编程序只读存储器E2PROM<ul>\n<li>可多次读出但写入次数有限</li>\n</ul>\n</li>\n<li>快擦除读写存储器Flash Memory<ul>\n<li>重复写入、读出</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"存储器的组成与控制\"><a href=\"#存储器的组成与控制\" class=\"headerlink\" title=\"存储器的组成与控制\"></a>存储器的组成与控制</h4><ul>\n<li>存储器容量扩展<ul>\n<li>位扩展:用多个存储器芯片对字长进行扩充</li>\n<li>字扩展:增加存储器中字的数量，提高存储器的寻址范围</li>\n<li>字位扩展，假设一个存储器的容量为M×N位，若使用L×K位存储器芯片，那么，这个存储器共需要(M/L)×(N/K)个存储器芯片</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"多体交叉存储器\"><a href=\"#多体交叉存储器\" class=\"headerlink\" title=\"多体交叉存储器\"></a>多体交叉存储器</h4><ul>\n<li>提高访存速度的方式<ul>\n<li>采用高速器件</li>\n<li>采用层次结构</li>\n<li>调整主存结构</li>\n</ul>\n</li>\n<li>计算机中大容量的主存可由多个存储体组成，每个存储体都具有自己的读写线路，地址寄存器和数据寄存器，称为”存储模块”。这种多模块存储器可以实现重叠与交叉存取</li>\n<li>第i个模块M的地址编号应按下式给出:M×j+i</li>\n<li>连续地址分布在相邻的不同模块内，而同一模块内的地址都是不连续的</li>\n</ul>\n<h3 id=\"第五章-指令系统\"><a href=\"#第五章-指令系统\" class=\"headerlink\" title=\"第五章:指令系统\"></a>第五章:指令系统</h3><h4 id=\"指令系统的发展\"><a href=\"#指令系统的发展\" class=\"headerlink\" title=\"指令系统的发展\"></a>指令系统的发展</h4><ul>\n<li>20世纪70年代末人们提出了便于VLSI实现的精简指令系统计算机，简称RISC，同时将指令系统越来越复杂的计算机称为复杂指令系统计算机，简称CISC</li>\n</ul>\n<h4 id=\"指令格式\"><a href=\"#指令格式\" class=\"headerlink\" title=\"指令格式\"></a>指令格式</h4><ul>\n<li>结构(操作码+地址码)<ul>\n<li>操作码</li>\n<li>操作数的地址</li>\n<li>操作结果的存储地址</li>\n<li>下一条指令的地址</li>\n</ul>\n</li>\n<li>地址码<ul>\n<li>零地址指令</li>\n<li>一地址指令<ul>\n<li>寻址范围  224 = 16 M<ul>\n<li>2次访存</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>二地址指令<ul>\n<li>寻址范围  212 = 4 K<ul>\n<li>4 次访存</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>三地址指令<ul>\n<li>寻址范围  28 = 256<ul>\n<li>4 次访存</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>多地址指令<ul>\n<li>寻址范围  26 = 64<ul>\n<li>4 次访存</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>指令字长<ul>\n<li>取决因素<ul>\n<li>操作码的长度</li>\n<li>操作数地址的长度</li>\n<li>操作数地址的个数</li>\n</ul>\n</li>\n<li>指令字长 固定<ul>\n<li>指令字长 = 存储字长</li>\n</ul>\n</li>\n<li>指令字长 可变<ul>\n<li>按字节的倍数变化</li>\n</ul>\n</li>\n<li>对准边界存放<ul>\n<li>不连续存放数据</li>\n<li>按字节编址<ul>\n<li>a.半字地址最低位恒为0</li>\n<li>b.字地址最低两位恒为0</li>\n<li>c.双字地址的最低三位恒为0</li>\n</ul>\n</li>\n<li>减少访存次数，浪费存储空间</li>\n</ul>\n</li>\n<li>不 对 准 边 界 存 放<ul>\n<li>连续存放数据</li>\n<li>节约存储器空间，但增加访存次数，对多字节数据存在调整高 低字节位置的问题</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>寻址方式<ul>\n<li>确定本条指令的数据地址</li>\n<li>下一条要执行的指令地址的方法</li>\n</ul>\n</li>\n<li>指令操作码的扩展技术<ul>\n<li>指令操作码的长度决定了指令系统中完成不同操作的指令数</li>\n<li>若某机器的操作码长度固定为K位，则它最多只能有2^K条不同指令</li>\n<li>指令操作码两种格式<ul>\n<li>固定格式<ul>\n<li>优点:对于简化硬件设计，减少指令译码时间非常有利</li>\n<li>缺点:指令少，浪费地址</li>\n</ul>\n</li>\n<li>可变格式(分散地放在字的不同字段)<ul>\n<li>优点:指令多，缩短指令平均长度，减少程序总位数，增加指令字所能表示的操作信息</li>\n<li>缺点:译码复杂，控制器的设计难度增大</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>拓展方法的一个重要原则<ul>\n<li>使用频度(即指令在程序中出现概率)高的指令应分配短的操作码，使用频度低的指令相应地分配较长的操作码</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>指令系统的兼容性<ul>\n<li>保持系统向上兼容</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"精简指令系统计算机（RISC）——用于小型机\"><a href=\"#精简指令系统计算机（RISC）——用于小型机\" class=\"headerlink\" title=\"精简指令系统计算机（RISC）——用于小型机\"></a>精简指令系统计算机（RISC）——用于小型机</h4><h4 id=\"复杂指令系统计算机（CISC）——用于大型机\"><a href=\"#复杂指令系统计算机（CISC）——用于大型机\" class=\"headerlink\" title=\"复杂指令系统计算机（CISC）——用于大型机\"></a>复杂指令系统计算机（CISC）——用于大型机</h4><h3 id=\"第六章：中央处理器\"><a href=\"#第六章：中央处理器\" class=\"headerlink\" title=\"第六章：中央处理器\"></a>第六章：中央处理器</h3><h4 id=\"计算机工作过程\"><a href=\"#计算机工作过程\" class=\"headerlink\" title=\"计算机工作过程\"></a>计算机工作过程</h4><ul>\n<li>加电——》产生reset信号——》执行程序——》停机——》停电</li>\n<li>产生reset信号的任务<ul>\n<li>任务一：使计算机处于初始状态</li>\n<li>任务二：从PC中取出指令地址</li>\n</ul>\n</li>\n<li>控制器作用是协调并控制计算机各部件执行程序的指令序列</li>\n</ul>\n<h4 id=\"控制器的组成\"><a href=\"#控制器的组成\" class=\"headerlink\" title=\"控制器的组成\"></a>控制器的组成</h4><ul>\n<li>控制器的功能<ul>\n<li>取指令<ul>\n<li>发出指令地址，取出指令的内容</li>\n</ul>\n</li>\n<li>分析指令<ul>\n<li>（1）对操作码译码产生操作相应部件的控制信号</li>\n<li>（2）根据寻址方式形成操作数地址</li>\n</ul>\n</li>\n<li>执行指令<ul>\n<li>（1）根据分析指令后产生控制信号、操作数地址信号序列，通过CPU及输入输出设备的执行实现每条指令的功能</li>\n<li>（2）结果回送存储器</li>\n<li>（3）形成下条指令的地址</li>\n</ul>\n</li>\n<li>控制程序和数据的输入和结果输出</li>\n<li>对异常情况和某些请求的处理<ul>\n<li>异常情况的处理：例如算术运算的溢出、数据传送奇偶错</li>\n<li>某些请求的处理<ul>\n<li>“中断请求”信号</li>\n<li>DMA请求信号</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>控制器的组成<ul>\n<li>程序计数器（PC）<ul>\n<li>即地址寄存器，用来存放当前正在执行的指令地址或即将要执行的下一条指令地址</li>\n</ul>\n</li>\n<li>指令寄存器（IR）<ul>\n<li>用以存放当前正在执行的指令，以便在指令执行过程中控制完成一条指令的全部功能</li>\n</ul>\n</li>\n<li>指令译码器或操作码译码器<ul>\n<li>对指令寄存器中的操作码进行分析解释，产生相应的控制信号</li>\n</ul>\n</li>\n<li>脉冲源及启停线路<ul>\n<li>脉冲源参数一定评率的脉冲作为整个机器的时钟脉冲，是机器周期和工作脉冲的基准信号，在机器刚加电时，还应产生一个总清信号（reset）</li>\n</ul>\n</li>\n<li>时序控制信号形成部件<ul>\n<li>当程序启动后，在CLK时钟作用下，根据当前正在执行的指令的需要，产生相应的时序控制信号，并根据被控制功能部件的反馈信号调整时序控制信号<ul>\n<li>控制存储器</li>\n<li>微指令寄存器<ul>\n<li>控制字段+下址</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>周期概念<ul>\n<li>指令周期<ul>\n<li>完成一条指令所需的时间，包括取指令、分析指令、执行指令</li>\n</ul>\n</li>\n<li>机器周期<ul>\n<li>也称为CPU周期，是CPU从内存中读取一个指令的时间，通常等于取指周期</li>\n</ul>\n</li>\n<li>时钟周期<ul>\n<li>称为节拍脉冲或T周期，是基准脉冲信号</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>三条假设<ul>\n<li>程序是存放在主存中的，当执行完一条指令后才从主存中取下一条指令（非流水线）</li>\n<li>指令的长度是固定的，并限制了寻址方式的多样化</li>\n<li>在程序运行前，程序和数据都已存在主存中</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>指令执行过程（运算器和控制器配合）<ul>\n<li>组成控制器的基本电路<ul>\n<li>具有记忆功能的触发器以及由它组成的寄存器，计数器和存储单元</li>\n<li>没有记忆功能的门电路及由它组成的加法器，算术逻辑运算单元（ALU）和各种逻辑电路</li>\n</ul>\n</li>\n<li>举例<ul>\n<li>加法<ul>\n<li>取指令——》计算操作数地址——》取操作数——》执行结果并运算送结果</li>\n</ul>\n</li>\n<li>要能看懂时序图<ul>\n<li>哪些指令在对应的时间有效</li>\n</ul>\n</li>\n<li>条件转移指令<ul>\n<li>取指令——》计算地址</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>控制器的功能就是按每一条指令的要求产生所需的控制信号</li>\n<li>产生控制信号的方法<ul>\n<li>微程序控制</li>\n<li>硬布线控制</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"微程序控制计算机的基本工作原理\"><a href=\"#微程序控制计算机的基本工作原理\" class=\"headerlink\" title=\"微程序控制计算机的基本工作原理\"></a>微程序控制计算机的基本工作原理</h4><ul>\n<li>基本概念<ul>\n<li>微指令<ul>\n<li>在微程序控制的计算机中，将由同时发出的控制信号所执行的一组微操作</li>\n</ul>\n</li>\n<li>微命令<ul>\n<li>将指令分为若干条微指令，按次序执行这些微指令。组成微指令的操作即微命令</li>\n</ul>\n</li>\n<li>微程序<ul>\n<li>计算机的程序由指令序列构成，而计算机每条指令的功能均由微指令序列解释完成，这些微指令序列的集合就叫做微程序</li>\n</ul>\n</li>\n<li>控制存储器<ul>\n<li>微程序一般是存放在专门的存储器中的，由于该存储器主要存放控制命令（信号）与下一条执行的微指令地址（简称下址）</li>\n<li>存储单元内容<ul>\n<li>（1）微指令的控制信号——控制位</li>\n<li>（2）下条微指令的地址——下址字段</li>\n</ul>\n</li>\n<li>存储芯片：ROM</li>\n</ul>\n</li>\n<li>执行一条指令实际上就是执行一段存放在控制存储器中的微程序</li>\n</ul>\n</li>\n<li>实现微程序控制的基本原理<ul>\n<li>控制信号（23条）</li>\n<li>书上P123页为加法的过程</li>\n<li>微指令格式：控制字段+下址字段</li>\n<li>23个控制位，12个下址位——》容量为4K</li>\n<li>取址微指令的操作对所有指令都是相同的，所以是一条公用的微指令，其下址由操作码译码产生</li>\n</ul>\n</li>\n<li>微程序控制器</li>\n<li>时序信号及工作脉冲的形成</li>\n<li>停机和停电的区别<ul>\n<li>停机<ul>\n<li>电压：稳定<ul>\n<li>存放内容：保持<ul>\n<li>重启PC内容：断点指令地址</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>停电<ul>\n<li>电压：消失<ul>\n<li>存放内容：RAM的内容消失<ul>\n<li>重启PC内容：第一条指令地址</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"微程序设计技术\"><a href=\"#微程序设计技术\" class=\"headerlink\" title=\"微程序设计技术\"></a>微程序设计技术</h4><ul>\n<li>如何缩短微指令字长<ul>\n<li>直接控制法（容量太小）<ul>\n<li>编译方法：每一位代表一个控制信号，直接送往相应的控制点</li>\n<li>优点：控制简单</li>\n<li>缺点：微指令字长过大</li>\n</ul>\n</li>\n<li>字段直接编译法<ul>\n<li>选出互斥的微指令</li>\n<li>每个字段都要留出一个代码，表示本段不发出任何指令（000）</li>\n<li>优点：节省微指令的字长</li>\n<li>缺点：增加了额外的硬件开销</li>\n</ul>\n</li>\n<li>字段间接编译法<ul>\n<li>指令之间相互联系的情况</li>\n<li>举例：A为0-7，B为0-3，如果是直接编译——3+2=5，如果是间接编译——3+1=4</li>\n<li>编码方法：在字段直接编译法中，译码输出端要兼由另一字段中的某些微命令配合解释</li>\n<li>优点：减少了微指令长度</li>\n<li>缺点：可能削弱微指令的并行控制能力，同时增加硬件开销</li>\n</ul>\n</li>\n<li>常熟源字段E(了解)</li>\n</ul>\n</li>\n<li>如何减少微指令长度<ul>\n<li>现行微指令/微地址<ul>\n<li>现行微指令：当前正在执行的指令</li>\n<li>现行微地址：存放现行微指令的控制器存储单元</li>\n</ul>\n</li>\n<li>后继微指令/微地址<ul>\n<li>后继微指令：下一条要执行的微指令</li>\n<li>后继微地址：存放后继微指令的控制器存储单元</li>\n</ul>\n</li>\n<li>增量与下址字段结合产生后继微指令的方法<ul>\n<li>下址字段分成：转移控制字段BCF和转移地址字段BAF<ul>\n<li>BCF：控制微程序的转移情况</li>\n<li>BAF：转移后的微指令所在地址</li>\n</ul>\n</li>\n<li>BAF有两种情况<ul>\n<li>与uPC的位数相等——转移灵活，但增加微指令长度</li>\n<li>比uPC短——转移地址收到限制，但可缩短微指令长度</li>\n</ul>\n</li>\n<li>优点<ul>\n<li>微指令的下址字段很短，仅用于选择输入uPC计数器的某条线路有效</li>\n</ul>\n</li>\n<li>缺点<ul>\n<li>微程序转移不灵活，使得微程序在控存中的物理空间分配有困难</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>多路转移方式<ul>\n<li>一条微指令存在多个转移分支的情况称为多路转移</li>\n</ul>\n</li>\n<li>微中断<ul>\n<li>1.微中断请求信号是由程序中断请求信号引起的</li>\n<li>2.在完成现行指令的微程序后响应该微中断请求</li>\n<li>3.由硬件产生对应微中断处理程序在控存中的入口地址</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>如何提高微程序的执行速度</li>\n<li>微指令格式<ul>\n<li>水平型微指令——直接控制，字段编译（直接、间接）<ul>\n<li>特点：在一条微指令中定义并并行执行多个微命令</li>\n</ul>\n</li>\n<li>垂直型微指令<ul>\n<li>特点：不强调实现微指令的并行控制功能</li>\n<li>定义：采用微操作码编译法，由操作码规定微指令的功能</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>微程序控制存储器<ul>\n<li>一般采用ROM存储器</li>\n<li>也可采用RAM，为防止断电后内容消失，则必须开机后将外存中存放的微程序调入控存RAM，然后才能执行程序。</li>\n<li>当前为了能不断扩展指令系统，通常采用ROM+RAM</li>\n</ul>\n</li>\n<li>动态微程序设计<ul>\n<li>定义：能根据用户要求改变微程序</li>\n<li>优点：是计算机能更灵活、有效的适应于各种不同的应用目标</li>\n</ul>\n</li>\n<li>控制存储器的操作（P136）<ul>\n<li>串行方式</li>\n<li>并行方式——比串行多了微指令寄存器<ul>\n<li>微周期=max(取微指令时间,执行微指令时间)</li>\n<li>由于取微指令、执行微指令同时进行，故对于某些后继微地址的产生根据处理结果而定的微指令，则延迟一个微周期再取微指令</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"硬布线控制的计算机（RISC）——特点快\"><a href=\"#硬布线控制的计算机（RISC）——特点快\" class=\"headerlink\" title=\"硬布线控制的计算机（RISC）——特点快\"></a>硬布线控制的计算机（RISC）——特点快</h4><ul>\n<li>形成操作控制信号的逻辑框图（P141）</li>\n<li>操作控制信号的产生<ul>\n<li>取值周期cy1所产生的信号对所有指令都是相同的，即与当前执行的指令无关，逻辑式得到最简单的形式</li>\n<li>通常，同一个控制控制信号在若干条指令的某些周期（或再加上一些条件）中都需要，为此需要把它们组合起来</li>\n<li>同种类型的指令所需要的控制信号大部分是相同的，仅有少量区别</li>\n<li>在确定指令的操作码时（即对具体指令赋予二进制操作码），为了便于逻辑表达式的化简以减少逻辑电路数量，往往给予特别关注</li>\n</ul>\n</li>\n<li>设计组合逻辑电路从而产生需要的控制信号的步骤<ul>\n<li>1.实际逻辑问题2.真值表3.公式化简4.逻辑电路图</li>\n</ul>\n</li>\n<li>设计目标<ul>\n<li>使用最少的电路元件达到最高的操作速度</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"流水线工作原理\"><a href=\"#流水线工作原理\" class=\"headerlink\" title=\"流水线工作原理\"></a>流水线工作原理</h4><ul>\n<li>几点结论<ul>\n<li>每条指令的执行时间不变</li>\n<li>每条指令处理结果的时间缩短</li>\n<li>流水线处理速率最高时=流水线处于满载的稳定状态</li>\n<li>流水线处理速率最低时=流水线未满载状态</li>\n<li>为了满足在重叠时间段不同指令的机器周期能够完成指定的操作，将时间段=操作完成的最长时间</li>\n<li>为了保证一个周期内流水线的输入信号不变，相邻时间段之间必须设置锁存器或寄存器</li>\n<li>除了指令执行流水线，还有运算操作流水线</li>\n</ul>\n</li>\n<li>相关问题<ul>\n<li>流水线阻塞（P163-6.15）<ul>\n<li>数据相关产生<ul>\n<li>假设第二条指令需要的操作数是第一条指令运算的结果，那么出现了数据相关</li>\n</ul>\n</li>\n<li>指令执行时间不同产生</li>\n<li>程序转移的影响</li>\n<li>异常情况响应中断</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"第七章：存储系统\"><a href=\"#第七章：存储系统\" class=\"headerlink\" title=\"第七章：存储系统\"></a>第七章：存储系统</h3><h4 id=\"存储系统的层次结构\"><a href=\"#存储系统的层次结构\" class=\"headerlink\" title=\"存储系统的层次结构\"></a>存储系统的层次结构</h4><ul>\n<li>cache-&gt;主存-&gt;辅存</li>\n</ul>\n<h4 id=\"高速缓冲存储器\"><a href=\"#高速缓冲存储器\" class=\"headerlink\" title=\"高速缓冲存储器\"></a>高速缓冲存储器</h4><ul>\n<li>cache的工作原理<ul>\n<li>局部性原理</li>\n<li>主存地址和cache地址（P166 图7.2）</li>\n<li>块长<ul>\n<li>块长一般取一个主存周期所能调出的信息长度（一般为16个字）</li>\n</ul>\n</li>\n<li>cache的容量和块的大小是影响cache的效率的重要因素</li>\n<li>命中率<ul>\n<li>CPU所要访问的信息是否在cache中的比率，而将所要访问的信息不在cache中的比率称为失败率</li>\n</ul>\n</li>\n<li>一致性策略<ul>\n<li>标志交换方式（写回法）</li>\n<li>通过式写入（写通法）</li>\n<li>写操作直接对主存进行，而不写入cache</li>\n</ul>\n</li>\n<li>cache的存取时间<ul>\n<li>平均存取时间=h*tc+(1-h)(tc+tm) </li>\n</ul>\n</li>\n<li>最好替换策略<ul>\n<li>按照被替换的字块是下一段时间最少使用的，由替换部件实现</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>cache组织<ul>\n<li>地址映像<ul>\n<li>直接映像<ul>\n<li>cache中许多空的位置被浪费</li>\n<li>主存地址：主存字块标记+cache字块地址+字块内地址</li>\n</ul>\n</li>\n<li>全相联映像<ul>\n<li>成本太高而不能采用</li>\n<li>主存地址：主存字块标记+字块内地址</li>\n<li>优点<ul>\n<li>方式灵活，缩小了块发生冲突的概率</li>\n</ul>\n</li>\n<li>缺点<ul>\n<li>增加了标识位位数</li>\n<li>增加了寻找主存块在cache中对应块的时间</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>组相联映像<ul>\n<li>直接映像和全相联映像的折衷</li>\n<li>主存地址：主存字块标记+组地址+块内地址</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"虚拟存储器\"><a href=\"#虚拟存储器\" class=\"headerlink\" title=\"虚拟存储器\"></a>虚拟存储器</h4><ul>\n<li>存储管理部件（MMU）<ul>\n<li>现代计算机一般都有辅助存储器，但具有辅存的存储系统不一定是虚拟存储系统</li>\n<li>虚拟存储系统的特点<ul>\n<li>允许用户程序用比主存大的多的空间来访问主存</li>\n<li>每次访存都要进行虚实地址的转换</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"第八章：辅助存储器\"><a href=\"#第八章：辅助存储器\" class=\"headerlink\" title=\"第八章：辅助存储器\"></a>第八章：辅助存储器</h3><h4 id=\"半导体存储器可随机访问任一单元，而辅助存储器一般为串行访问存储器\"><a href=\"#半导体存储器可随机访问任一单元，而辅助存储器一般为串行访问存储器\" class=\"headerlink\" title=\"半导体存储器可随机访问任一单元，而辅助存储器一般为串行访问存储器\"></a>半导体存储器可随机访问任一单元，而辅助存储器一般为串行访问存储器</h4><h4 id=\"辅助存储器的种类\"><a href=\"#辅助存储器的种类\" class=\"headerlink\" title=\"辅助存储器的种类\"></a>辅助存储器的种类</h4><ul>\n<li>磁表面存储器<ul>\n<li>数字式磁记录<ul>\n<li>硬盘、软盘和磁带</li>\n</ul>\n</li>\n<li>模拟式磁记录<ul>\n<li>录音、录像设备</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>光存储器<ul>\n<li>光盘</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"串行存储器\"><a href=\"#串行存储器\" class=\"headerlink\" title=\"串行存储器\"></a>串行存储器</h4><ul>\n<li>顺序存取存储器</li>\n<li>直接存取存储器</li>\n</ul>\n<h4 id=\"辅助存储器的技术指标\"><a href=\"#辅助存储器的技术指标\" class=\"headerlink\" title=\"辅助存储器的技术指标\"></a>辅助存储器的技术指标</h4><ul>\n<li>存储密度<ul>\n<li>定义：单位长度或单位面积磁层表面磁层所存储的二进制信息量</li>\n<li>道密度<ul>\n<li>沿磁盘半径方向单位长度的磁道数称为道密度，单位为道/英寸tpi或道/毫米tpmm</li>\n</ul>\n</li>\n<li>位密度或线密度<ul>\n<li>单位长度磁道所能记录二进制信息的位数叫位密度或线密度，单位为位/英寸bpi或位/毫米bpmm</li>\n</ul>\n</li>\n<li>每个磁道所存储的信息量是一样的</li>\n</ul>\n</li>\n<li>存储容量<ul>\n<li>C = n × k × s</li>\n</ul>\n</li>\n<li>寻址时间<ul>\n<li>平均寻址时间Ta=平均找道时间Ts+平均等待时间Tw</li>\n<li>辅存的速度<ul>\n<li>寻址时间</li>\n<li>磁头读写时间</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>数据传输率<ul>\n<li>Dr  = D × V</li>\n</ul>\n</li>\n<li>误码率</li>\n<li>价格</li>\n</ul>\n<h4 id=\"硬磁盘存储器的类型\"><a href=\"#硬磁盘存储器的类型\" class=\"headerlink\" title=\"硬磁盘存储器的类型\"></a>硬磁盘存储器的类型</h4><ul>\n<li>(1) 固定磁头和移动磁头</li>\n<li>(2) 可换盘和固定盘</li>\n</ul>\n<h4 id=\"磁盘存储器\"><a href=\"#磁盘存储器\" class=\"headerlink\" title=\"磁盘存储器\"></a>磁盘存储器</h4><ul>\n<li>温彻斯特磁盘简称温盘</li>\n<li>磁盘存储器由驱动器（HDD），控制器（HDC）和盘片组成</li>\n<li>最外面的同心圆叫0磁道，最里面的同心圆假设称为n磁道</li>\n<li>驱动器的定位驱动系统实现快速精准的磁头定位</li>\n<li>主轴系统的作用是带动盘片按额定转速稳定旋转</li>\n<li>数据控制系统的作用是控制数据的写入和读出，包括寻址，磁头旋转，写电流控制，读出放大，数据分离</li>\n<li>磁盘控制器有两个方向的接口<ul>\n<li>与主机的接口</li>\n<li>与驱动器（设备）的接口</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"光盘\"><a href=\"#光盘\" class=\"headerlink\" title=\"光盘\"></a>光盘</h4><ul>\n<li>采用光存储技术<ul>\n<li>利用激光写入和读出</li>\n<li>第一代光存储技术<ul>\n<li>采用非磁性介质<ul>\n<li>不可擦写</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>第二代光存储技术<ul>\n<li>采用磁性介质<ul>\n<li>可擦写</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>光盘的存储原理<ul>\n<li>只读型和只写一次型<ul>\n<li>热作用（物理或化学变化）</li>\n</ul>\n</li>\n<li>可擦写光盘<ul>\n<li>热磁效应</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"第九-十章：输出输出（I-O）设备-系统\"><a href=\"#第九-十章：输出输出（I-O）设备-系统\" class=\"headerlink\" title=\"第九/十章：输出输出（I/O）设备/系统\"></a>第九/十章：输出输出（I/O）设备/系统</h3><h4 id=\"设备控制器（I-O）的基本功能\"><a href=\"#设备控制器（I-O）的基本功能\" class=\"headerlink\" title=\"设备控制器（I/O）的基本功能\"></a>设备控制器（I/O）的基本功能</h4><ul>\n<li>实现主机和外部设备之间的数据传送</li>\n<li>实现数据缓冲，以达到主机同外部设备之间的速度匹配</li>\n<li>接受主机的命令，提供设备接口的设备，并按照主机的命令控制设备</li>\n</ul>\n<h4 id=\"I-O-编址方式\"><a href=\"#I-O-编址方式\" class=\"headerlink\" title=\"I/O 编址方式\"></a>I/O 编址方式</h4><ul>\n<li>(1) 统一编址：用取数、存数指令</li>\n<li>(2) 不统一编址：有专门的 I/O 指令</li>\n</ul>\n<h4 id=\"I-O-与主机的连接方式\"><a href=\"#I-O-与主机的连接方式\" class=\"headerlink\" title=\"I/O 与主机的连接方式\"></a>I/O 与主机的连接方式</h4><ul>\n<li>辐射式连接<ul>\n<li>每台设备都配有一套</li>\n<li>控制线路和一组信号线</li>\n<li>不便于增删设备</li>\n</ul>\n</li>\n<li>总线连接<ul>\n<li>便于增删设备</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"I-O设备\"><a href=\"#I-O设备\" class=\"headerlink\" title=\"I/O设备\"></a>I/O设备</h4><ul>\n<li>人机交互设备<ul>\n<li>键盘、鼠标等</li>\n</ul>\n</li>\n<li>计算机信息的驻留设备<ul>\n<li>硬盘、光盘等</li>\n</ul>\n</li>\n<li>机——机通信设备<ul>\n<li>MODEN等</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"为什么要设置接口？\"><a href=\"#为什么要设置接口？\" class=\"headerlink\" title=\"为什么要设置接口？\"></a>为什么要设置接口？</h4><ul>\n<li><ol>\n<li>实现设备的选择</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>实现数据缓冲达到速度匹配</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>实现数据串     并格式转换</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>实现电平转换</li>\n</ol>\n</li>\n<li><ol start=\"5\">\n<li>传送控制命令</li>\n</ol>\n</li>\n<li><ol start=\"6\">\n<li>反映设备的状态<ul>\n<li>（“忙”、“就绪”、“中断请求”）</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"中断服务程序的流程\"><a href=\"#中断服务程序的流程\" class=\"headerlink\" title=\"中断服务程序的流程\"></a>中断服务程序的流程</h4><ul>\n<li>(1) 保护现场<ul>\n<li>程序断点的保护</li>\n<li>寄存器内容的保护</li>\n</ul>\n</li>\n<li>(2) 中断服务<ul>\n<li>对不同的 I/O 设备具有不同内容的设备服务</li>\n</ul>\n</li>\n<li>(3) 恢复现场<ul>\n<li>出栈指令</li>\n</ul>\n</li>\n<li>(4) 中断返回<ul>\n<li>中断返回指令</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"单重中断和多重中断\"><a href=\"#单重中断和多重中断\" class=\"headerlink\" title=\"单重中断和多重中断\"></a>单重中断和多重中断</h4><ul>\n<li>单重 中断<ul>\n<li>不允许中断 现行的 中断服务程序</li>\n</ul>\n</li>\n<li>多重 中断<ul>\n<li>允许级别更高 的中断源</li>\n<li>中断 现行的 中断服务程序</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"DMA-方式\"><a href=\"#DMA-方式\" class=\"headerlink\" title=\"DMA 方式\"></a>DMA 方式</h4><ul>\n<li>主存和 I/O 之间有一条直接数据通道</li>\n<li>CPU 和 I/O 并行工作</li>\n<li>DMA 的三种工作方式<ul>\n<li>(1) CPU暂停方式</li>\n<li>(2) CPU周期窃取方式</li>\n<li>(3)直接访问存储器</li>\n</ul>\n</li>\n<li>DMA 接口功能<ul>\n<li>(1) 向 CPU 申请 DMA 传送</li>\n<li>(2) 处理总线 控制权的转交</li>\n<li>(3) 管理 系统总线、控制 数据传送</li>\n<li>(4) 确定 数据传送的 首地址和长度，修正 传送过程中的数据地址和长度</li>\n<li>(5) DMA 传送结束时，给出操作完成信号</li>\n</ul>\n</li>\n<li>DMA 传送过程<ul>\n<li>预处理、数据传送、后处理</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"外设接口\"><a href=\"#外设接口\" class=\"headerlink\" title=\"外设接口\"></a>外设接口</h4><ul>\n<li>设备与主机相连时，必须按照规定的物理互连特性、电气特性等进行连接，这些特性的技术规范称为接口标准</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>整体架构图如下</li>\n</ul>\n<p><img src=\"./../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90.png\" alt=\"计算机组成原理思维导图\"></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ck89wn30m0000i7rhdy04hjpn","category_id":"ck89wn30v0004i7rh2qo2d3xq","_id":"ck89wn30y0009i7rh955p1yz0"},{"post_id":"ck89wn30t0002i7rh0o9haua1","category_id":"ck89wn30y0007i7rh6wd9gs19","_id":"ck89wn30z000bi7rh93bw98v0"}],"PostTag":[{"post_id":"ck89wn30m0000i7rhdy04hjpn","tag_id":"ck89wn30w0005i7rh5jy9egsh","_id":"ck89wn30z000di7rh3y9qaamo"},{"post_id":"ck89wn30m0000i7rhdy04hjpn","tag_id":"ck89wn30y0008i7rhdosj3atz","_id":"ck89wn310000ei7rhdtulezug"},{"post_id":"ck89wn30m0000i7rhdy04hjpn","tag_id":"ck89wn30y000ai7rh6gvyai2r","_id":"ck89wn310000fi7rh5dwadelr"},{"post_id":"ck89wn30t0002i7rh0o9haua1","tag_id":"ck89wn30z000ci7rh4qef7guj","_id":"ck89wn310000gi7rhcb9f36es"}],"Tag":[{"name":"react","_id":"ck89wn30w0005i7rh5jy9egsh"},{"name":"redux","_id":"ck89wn30y0008i7rhdosj3atz"},{"name":"redux-thunk","_id":"ck89wn30y000ai7rh6gvyai2r"},{"name":"计算机原理","_id":"ck89wn30z000ci7rh4qef7guj"}]}}